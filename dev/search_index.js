var documenterSearchIndex = {"docs":
[{"location":"quickguide/#Quick-start-1","page":"Getting Started","title":"Quick start","text":"","category":"section"},{"location":"quickguide/#","page":"Getting Started","title":"Getting Started","text":"Julia API to retreive data from the ENTSO-E transparancy platform using the ENTSOE-E API. Documentation for the ENTSO-E can be found on https://transparency.entsoe.eu/content/static_content/Static%20content/web%20api/Guide.html","category":"page"},{"location":"quickguide/#Prerequisites-1","page":"Getting Started","title":"Prerequisites","text":"","category":"section"},{"location":"quickguide/#","page":"Getting Started","title":"Getting Started","text":"Download and install the Julia API for the ENTSO-E transparency platform first using the following link\nCreate an account in the ENTSO-E transparency platform\nRequest an API key by sending an email to transparency@entsoe.eu with “Restful API access” in the subject line. In the email body state your registered email address. You will receive an email when you have been provided with the API key. The key is then visible in your ENTSO-E account under “Web API Security Token”.","category":"page"},{"location":"quickguide/#Usage-1","page":"Getting Started","title":"Usage","text":"","category":"section"},{"location":"quickguide/#","page":"Getting Started","title":"Getting Started","text":"entsoeAPI.jl is the main file which contains the following functions:","category":"page"},{"location":"quickguide/#","page":"Getting Started","title":"Getting Started","text":"function initialize_key(APIkey::String)\n\nfunction actual_total_load(outBiddingZone_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)\nfunction day_ahead_total_load(outBiddingZone_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)\nfunction week_ahead_total_load(outBiddingZone_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)\nfunction month_ahead_total_load(outBiddingZone_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)\nfunction year_ahead_total_load(outBiddingZone_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)\nfunction year_ahead_margin(outBiddingZone_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)\n\nfunction forecasted_capacity(contract_MarketAgreementType::String, in_Domain::Union{mappings.Area, String}, out_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)\nfunction offered_capacity(auctionType::String, contract_MarketAgreementType::String, in_Domain::Union{mappings.Area, String}, out_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime, auctionCategory::String = \"\", update_DateAndOrTime::DateTime = DateTime(0), classificationSequence_AttributeInstanceComponentPosition::String = \"\")\nfunction flowbased(processType::String, domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)\nfunction intraday_transfer_limits(in_Domain::Union{mappings.Area, String}, out_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)\nfunction explicit_allocation_information_capacity(businessType::String, contract_MarketAgreementType::String, in_Domain::Union{mappings.Area, String}, out_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime, auctionCategory::String = \"\", classificationSequence_AttributeInstanceComponentPosition::String = \"\")\nfunction explicit_allocation_information_revenue(contract_MarketAgreementType::String, in_Domain::Union{mappings.Area, String}, out_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)\nfunction total_capacity_nominated(in_Domain::Union{mappings.Area, String}, out_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)\nfunction total_capacity_already_allocated(contract_MarketAgreementType::String, in_Domain::Union{mappings.Area, String}, out_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime, auctionCategory::String = \"\")\nfunction day_ahead_prices(domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)\nfunction implicit_auction_net_positions(businessType::String, contract_MarketAgreementType::String, domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)\nfunction implicit_auction_congestion_income(businessType::String, contract_MarketAgreementType::String, domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)\nfunction total_commercial_schedules(contract_MarketAgreementType::String, in_Domain::Union{mappings.Area, String}, out_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)\nfunction phyiscal_flows(in_Domain::Union{mappings.Area, String}, out_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)\nfunction capacity_allocated_outside_EU(auctionType::String, contract_MarketAgreementType::String, in_Domain::Union{mappings.Area, String}, out_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime, auctionCategory::String = \"\", classificationSequence_AttributeInstanceComponentPosition::String = \"\")\n\nfunction expansion_and_dismantling(in_Domain::Union{mappings.Area, String}, out_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime, businessType::String = \"\", docStatus::String = \"\")\nfunction redispatching(in_Domain::Union{mappings.Area, String}, out_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime, businessType::String = \"\")\nfunction countertrading(in_Domain::Union{mappings.Area, String}, out_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)\nfunction congestion_costs(domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime, businessType::String = \"\")\n\nfunction installed_generation_capacity_aggregated(in_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime, psrType::String = \"\")\nfunction installed_generation_capacity_per_unit(in_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime, psrType::String = \"\")\nfunction day_ahead_aggregated_generation(in_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)\nfunction day_ahead_generation_forecasts_wind_solar(in_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime, psrType::String = \"\")\nfunction current_generation_forecasts_wind_solar(in_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime, psrType::String = \"\")\nfunction intraday_generation_forecasts_wind_solar(in_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime, psrType::String = \"\")\nfunction actual_generation_per_generation_unit(in_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime, psrType::String = \"\", registeredResource::String = \"\")\nfunction aggregated_generation_per_type(in_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime, psrType::String = \"\")\nfunction aggregated_filling_rate(in_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)\n\nfunction production_generation_units(biddingZone_Domain::Union{mappings.Area, String}, implementation_DateAndOrTime::DateTime, psrType::String = \"\")\n\nfunction current_balancing_state(area_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)\nfunction balancing_energy_bids(area_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime, processType::String)\nfunction aggregated_balancing_energy_bids(area_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime, processType::String)\nfunction procured_balancing_capacity(area_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime, type_MarketAgreementType::String = \"\")\nfunction crossZonal_balancing_capacity(acquiring_Domain::Union{mappings.Area, String}, connecting_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)\nfunction volumes_and_prices_contracted_reserves(type_MarketAgreementType::String, processType::String, controlArea_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime, psrType::String = \"\", offset::Int = 0)\nfunction volumes_contracted_reserves(type_MarketAgreementType::String, controlArea_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime, businessType::String = \"\", psrType::String = \"\", offset::Int = 0)\nfunction prices_contracted_reserves(type_MarketAgreementType::String, controlArea_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime, businessType::String = \"\", psrType::String = \"\", offset::Int = 0)\nfunction accepted_aggregated_offers(controlArea_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime, businessType::String = \"\", psrType::String = \"\")\nfunction activated_balancing_energy(controlArea_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime, businessType::String = \"\", psrType::String = \"\")\nfunction prices_activated_balancing_energy(controlArea_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime, businessType::String = \"\", psrType::String = \"\")\nfunction imbalance_prices(controlArea_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)\nfunction total_imbalance_volumes(controlArea_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)\nfunction financial_expenses(controlArea_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)\nfunction crossBorder_balancing(acquiring_Domain::Union{mappings.Area, String}, connecting_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)\nfunction FCR_total_capacity(area_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)\nfunction share_capacity_FCR(area_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)\nfunction contracted_reserve_capacity_FCR(area_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)\nfunction FRR_actual_capacity(area_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)\nfunction RR_actual_capacity(area_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)\nfunction query_sharing_of_reserves(processType::String, acquiring_Domain::Union{mappings.Area, String}, connecting_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)\nfunction balancing_border_capacity_limitations()\nfunction permanent_allocation_limitations_HVDC()\nfunction netted_and_exchanged_volumes()\n\nfunction unavailability_consumption_units(biddingZone_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime, businessType::String = \"\")\nfunction unavailability_generation_units(biddingZone_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime, businessType::String = \"\", docStatus::String = \"\", periodStartUpdate::DateTime = DateTime(0), periodEndUpdate::DateTime = DateTime(0), registeredResource::String = \"\", mRID::String = \"\", offset::Int = 0)\nfunction unavailability_production_units(biddingZone_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime, businessType::String = \"\", docStatus::String = \"\", periodStartUpdate::DateTime = DateTime(0), periodEndUpdate::DateTime = DateTime(0), registeredResource::String = \"\", mRID::String = \"\", offset::Int = 0)\nfunction unavailability_offshore_grid(biddingZone_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime, docStatus::String = \"\", periodStartUpdate::DateTime = DateTime(0), periodEndUpdate::DateTime = DateTime(0), mRID::String = \"\", offset::Int = 0)\nfunction unavailability_transmission_infrastructure(in_Domain::Union{mappings.Area, String}, out_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime, businessType::String = \"\", docStatus::String = \"\", periodStartUpdate::DateTime = DateTime(0), periodEndUpdate::DateTime = DateTime(0), mRID::String = \"\", offset::Int = 0)\nfunction fallBacks()","category":"page"},{"location":"quickguide/#","page":"Getting Started","title":"Getting Started","text":"The initialize_key(APIkey::String) function saves your personal security token in the GETconstructor.jl file. In this way it is possbile to use the API without entering the security token everytime.","category":"page"},{"location":"quickguide/#","page":"Getting Started","title":"Getting Started","text":"All the other functions retreive a specific set of data from the transparancy platform. This happens in 2 steps: ","category":"page"},{"location":"quickguide/#","page":"Getting Started","title":"Getting Started","text":"A HTTP-request is formed with the functions in the GETconstructor.jl file. This request is sent to the ENTSO-E API which returns the requested data in XML format.\nThe XML data is parsed with the functions in the XMLparser.jl file. The return format is not exactly the same for each function. But it's always a combination of dataframes and dicitionaries (The exact format can be found in the documentation per function).","category":"page"},{"location":"quickguide/#Arguments-1","page":"Getting Started","title":"Arguments","text":"","category":"section"},{"location":"quickguide/#Domains-1","page":"Getting Started","title":"Domains","text":"","category":"section"},{"location":"quickguide/#","page":"Getting Started","title":"Getting Started","text":"Domains can be entered in the following formats:","category":"page"},{"location":"quickguide/#","page":"Getting Started","title":"Getting Started","text":"Area object as defined in mappings.jl\nEIC-code ad defined on https://www.entsoe.eu/data/energy-identification-codes-eic/eic-approved-codes/\nDisplay name as defined on https://www.entsoe.eu/data/energy-identification-codes-eic/eic-approved-codes/","category":"page"},{"location":"quickguide/#","page":"Getting Started","title":"Getting Started","text":"Important to know is that the list in mappings.jl isn't complete and that the domains are always evolving as well. If you want to add a missing domain to mappings.jl you have to do this as follows:","category":"page"},{"location":"quickguide/#","page":"Getting Started","title":"Getting Started","text":"display_name = Area(\"display name\", \"EIC-code\", \"description\", TimeZone)","category":"page"},{"location":"quickguide/#","page":"Getting Started","title":"Getting Started","text":"Example for Belgium:","category":"page"},{"location":"quickguide/#","page":"Getting Started","title":"Getting Started","text":"BE = Area(\"BE\", \"10YBE----------2\", \"Belgium, Elia BZ / CA / MBA\", TimeZone(\"Europe/Brussels\"))","category":"page"},{"location":"quickguide/#Dates-and-Times-1","page":"Getting Started","title":"Dates and Times","text":"","category":"section"},{"location":"quickguide/#","page":"Getting Started","title":"Getting Started","text":"Dates and TImes need to be entered as a DateTime() object. The correct timezone is choosen automatically based on the entered domain. More information on the DateTime()object and the Dates packages can be found on https://docs.julialang.org/en/v1/stdlib/Dates/","category":"page"},{"location":"quickguide/#Example-1","page":"Getting Started","title":"Example","text":"","category":"section"},{"location":"quickguide/#","page":"Getting Started","title":"Getting Started","text":"Hereafter an example will be discussed to clarify how to use the API. We want to get the actual load data from the Czech Republic between 31/12/2015 23:00 and 31/12/2016 23:00. First we have to initialize our personal security token:","category":"page"},{"location":"quickguide/#","page":"Getting Started","title":"Getting Started","text":"APIkey = \"YOUR_PERSONAL_TOKEN\"\nentsoeAPI.initialize_key(APIkey)","category":"page"},{"location":"quickguide/#","page":"Getting Started","title":"Getting Started","text":"When the token is initialized, we can try to retreive the actual data. This is done in the following way:","category":"page"},{"location":"quickguide/#","page":"Getting Started","title":"Getting Started","text":"entsoeAPI.actual_total_load(\"10YCZ-CEPS-----N\", DateTime(2015,12,31,23,00), DateTime(2016,12,31,23,00))","category":"page"},{"location":"generation/#Generation-functions-1","page":"Generation","title":"Generation functions","text":"","category":"section"},{"location":"generation/#","page":"Generation","title":"Generation","text":"This file describes the usage of all the functions under the generation tab in the ENTSOE-E transparancy platform.","category":"page"},{"location":"generation/#User-functions-1","page":"Generation","title":"User functions","text":"","category":"section"},{"location":"generation/#","page":"Generation","title":"Generation","text":"entsoeAPI.installed_generation_capacity_aggregated\nentsoeAPI.installed_generation_capacity_per_unit\nentsoeAPI.day_ahead_aggregated_generation\nentsoeAPI.day_ahead_generation_forecasts_wind_solar\nentsoeAPI.current_generation_forecasts_wind_solar\nentsoeAPI.intraday_generation_forecasts_wind_solar\nentsoeAPI.actual_generation_per_generation_unit\nentsoeAPI.aggregated_generation_per_type\nentsoeAPI.aggregated_filling_rate","category":"page"},{"location":"generation/#entsoeAPI.installed_generation_capacity_aggregated","page":"Generation","title":"entsoeAPI.installed_generation_capacity_aggregated","text":"installed_generation_capacity_aggregated(in_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime[, psrType::String = \"\"])\n\nConstructs the HTTP request for the data about the aggregated installed generation capacity in a certain area (article 14.1 A: https://transparency.entsoe.eu/content/static_content/Static%20content/knowledge%20base/data-views/generation/Data-view%20Installed%20Capacity%20per%20Production%20Type.html). Parses the received HTTP response and returns the data in a dataframe.\n\n[year, type, installed capacity]\n\nMinimum time interval in query response is one year!\n\nArguments\n\nin_Domain::Union{mappings.Area, String}: The area for which the data is needed, can be represented as an Area object or a string with country code or direct code\nperiodStart::DateTime: Start date and time of the needed data\nperiodEnd::DateTime: End date and time of the needed data \npsrType::String = \"\": The coded type of a power system resource. The classification for the asset.\n\n! One year range limit applies !\n\n\n\n\n\n","category":"function"},{"location":"generation/#entsoeAPI.installed_generation_capacity_per_unit","page":"Generation","title":"entsoeAPI.installed_generation_capacity_per_unit","text":"installed_generation_capacity_per_unit(in_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime[, psrType::String = \"\"])\n\nConstructs the HTTP request for the data about the installed generation capacity per unit in a certain area (article 14.1 B: https://transparency.entsoe.eu/content/static_content/Static%20content/knowledge%20base/data-views/generation/Data-view%20Installed%20Capacity%20per%20Production%20Unit.html). Parses the received HTTP response and returns the data in a dataframe.\n\n[production type, code, name, installed capacity at the beginning of the year, voltage connection level]\n\nMinimum time interval in query response is one year!\n\nArguments\n\nin_Domain::Union{mappings.Area, String}: The area for which the data is needed, can be represented as an Area object or a string with country code or direct code\nperiodStart::DateTime: Start date and time of the needed data\nperiodEnd::DateTime: End date and time of the needed data \npsrType::String = \"\": The coded type of a power system resource. The classification for the asset. If not used all resources are included.\n\n! One year range limit applies !\n\n\n\n\n\n","category":"function"},{"location":"generation/#entsoeAPI.day_ahead_aggregated_generation","page":"Generation","title":"entsoeAPI.day_ahead_aggregated_generation","text":"day_ahead_aggregated_generation(in_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)\n\nConstructs the HTTP request for the data about the day ahead forecast of aggregated generation in a certain area (article 14.1 C: https://transparency.entsoe.eu/content/static_content/Static%20content/knowledge%20base/data-views/generation/Data-view%20Generation%20Forecast%20-%20Day%20Ahead.html). Parses the received HTTP response and returns the data in a dictionary.\n\n(\"generation\" => [start, end, scheduled generation], \"consumption\" => [start, end, scheduled consumption])\n\nMinimum time interval in query response is one day!\n\nArguments\n\nin_Domain::Union{mappings.Area, String}: The area for which the data is needed, can be represented as an Area object or a string with country code or direct code\nperiodStart::DateTime: Start date and time of the needed data\nperiodEnd::DateTime: End date and time of the needed data \n\n! One year range limit applies !\n\n\n\n\n\n","category":"function"},{"location":"generation/#entsoeAPI.day_ahead_generation_forecasts_wind_solar","page":"Generation","title":"entsoeAPI.day_ahead_generation_forecasts_wind_solar","text":"day_ahead_generation_forecasts_wind_solar(in_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime[, psrType::String = \"\"])\n\nConstructs the HTTP request for the data about the day ahead forecast of wind and solar generation in a certain area (article 14.1 D: https://transparency.entsoe.eu/content/static_content/Static%20content/knowledge%20base/data-views/generation/Data-view%20Generation%20Forecasts%20-%20Day%20Ahead%20for%20Wind%20and%20Solar.html). Parses the received HTTP response and returns the data in a dictionary.\n\n(\"solar\" => [start, end, solar], \"wind offshore\" => [start, end, wind offshore], \"wind onshore\" => [start, end, wind onshore])\n\nMinimum time interval in query response is one day!\n\nArguments\n\nin_Domain::Union{mappings.Area, String}: The area for which the data is needed, can be represented as an Area object or a string with country code or direct code\nperiodStart::DateTime: Start date and time of the needed data\nperiodEnd::DateTime: End date and time of the needed data \npsrType::String = \"\": The coded type of a power system resource. The classification for the asset. If not used all resources are included.\n\n! One year range limit applies !\n\n\n\n\n\n","category":"function"},{"location":"generation/#entsoeAPI.current_generation_forecasts_wind_solar","page":"Generation","title":"entsoeAPI.current_generation_forecasts_wind_solar","text":"current_generation_forecasts_wind_solar(in_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime[, psrType::String = \"\"])\n\nConstructs the HTTP request for the data about the current forecast of wind and solar generation in a certain area (article 14.1 D: https://transparency.entsoe.eu/content/static_content/Static%20content/knowledge%20base/data-views/generation/Data-view%20Generation%20Forecast%20-%20Day%20Ahead.html). Parses the received HTTP response and returns the data in a dictionary.\n\n(\"solar\" => [start, end, solar], \"wind offshore\" => [start, end, wind offshore], \"wind onshore\" => [start, end, wind onshore])\n\nMinimum time interval in query response is one day!\n\nArguments\n\nin_Domain::Union{mappings.Area, String}: The area for which the data is needed, can be represented as an Area object or a string with country code or direct code\nperiodStart::DateTime: Start date and time of the needed data\nperiodEnd::DateTime: End date and time of the needed data \npsrType::String = \"\": The coded type of a power system resource. The classification for the asset. If not used all resources are included.\n\n! One year range limit applies !\n\n\n\n\n\n","category":"function"},{"location":"generation/#entsoeAPI.intraday_generation_forecasts_wind_solar","page":"Generation","title":"entsoeAPI.intraday_generation_forecasts_wind_solar","text":"intraday_generation_forecasts_wind_solar(in_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime[, psrType::String = \"\"])\n\nConstructs the HTTP request for the data about the intraday forecast of wind and solar generation in a certain area (article 14.1 D: https://transparency.entsoe.eu/content/static_content/Static%20content/knowledge%20base/data-views/generation/Data-view%20Generation%20Forecast%20-%20Day%20Ahead.html). Parses the received HTTP response and returns the data in a dictionary.\n\n(\"solar\" => [start, end, solar], \"wind offshore\" => [start, end, wind offshore], \"wind onshore\" => [start, end, wind onshore])\n\nMinimum time interval in query response is one MTU period!\n\nArguments\n\nin_Domain::Union{mappings.Area, String}: The area for which the data is needed, can be represented as an Area object or a string with country code or direct code\nperiodStart::DateTime: Start date and time of the needed data\nperiodEnd::DateTime: End date and time of the needed data \npsrType::String = \"\": The coded type of a power system resource. The classification for the asset. If not used all resources are included.\n\n! One year range limit applies !\n\n\n\n\n\n","category":"function"},{"location":"generation/#entsoeAPI.actual_generation_per_generation_unit","page":"Generation","title":"entsoeAPI.actual_generation_per_generation_unit","text":"actual_generation_per_generation_unit(in_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime[, psrType::String = \"\", registeredResource::String = \"\"])\n\nConstructs the HTTP request for the data about the actual generation per generation unit in a certain area (article 16.1 A: https://transparency.entsoe.eu/content/static_content/Static%20content/knowledge%20base/data-views/generation/Data-view%20Actual%20Generation%20per%20Generation%20Unit.html). Parses the received HTTP response and returns the data in a dictionary.\n\nNOT IMPLEMENTED YET\n\nMinimum time interval in query response is one MTU period!\n\nArguments\n\nin_Domain::Union{mappings.Area, String}: The area for which the data is needed, can be represented as an Area object or a string with country code or direct code\nperiodStart::DateTime: Start date and time of the needed data\nperiodEnd::DateTime: End date and time of the needed data \npsrType::String = \"\": The coded type of a power system resource. The classification for the asset. If not used all resources are included.\nregisteredResource = \"\": The unique identification of a resource\n\n! One day range limit applies !\n\n\n\n\n\n","category":"function"},{"location":"generation/#entsoeAPI.aggregated_generation_per_type","page":"Generation","title":"entsoeAPI.aggregated_generation_per_type","text":"aggregated_generation_per_type(in_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime[, psrType::String = \"\"])\n\nConstructs the HTTP request for the data about the actual aggregated generation per plant type in a certain area (article 16.1 B&C: https://transparency.entsoe.eu/content/static_content/Static%20content/knowledge%20base/data-views/generation/Data-view%20Actual%20Generation%20per%20Production%20Unit.html). Parses the received HTTP response and returns the data in a dictionary.\n\n(\"type\" => [start, end, aggregated generation])\n\nMinimum time interval in query response is one MTU period!\n\nArguments\n\nin_Domain::Union{mappings.Area, String}: The area for which the data is needed, can be represented as an Area object or a string with country code or direct code\nperiodStart::DateTime: Start date and time of the needed data\nperiodEnd::DateTime: End date and time of the needed data \npsrType::String = \"\": The coded type of a power system resource. The classification for the asset. If not used all resources are included.\n\n! One year range limit applies !\n\n\n\n\n\n","category":"function"},{"location":"generation/#entsoeAPI.aggregated_filling_rate","page":"Generation","title":"entsoeAPI.aggregated_filling_rate","text":"aggregated_filling_rate(in_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)\n\nConstructs the HTTP request for the data about the aggregated filling rate of water reservoirs and hydro storage plants in a certain area (article 16.1 D: https://transparency.entsoe.eu/content/static_content/Static%20content/knowledge%20base/data-views/generation/Data-view%20Water%20Reservoirs%20and%20Hydro%20Storage%20Plants.html). Parses the received HTTP response and returns the data in a dictionary.\n\n[year, week, stored energy value]\n\nMinimum time inteval in query response is one week!\n\nArguments\n\nin_Domain::Union{mappings.Area, String}: The area for which the data is needed, can be represented as an Area object or a string with country code or direct code\nperiodStart::DateTime: Start date and time of the needed data\nperiodEnd::DateTime: End date and time of the needed data \n\n! One year range limit applies !\n\n\n\n\n\n","category":"function"},{"location":"generation/#GET-functions-1","page":"Generation","title":"GET functions","text":"","category":"section"},{"location":"generation/#","page":"Generation","title":"Generation","text":"entsoeAPI.GETconstructor.query_installed_generation_capacity_aggregated\nentsoeAPI.GETconstructor.query_installed_generation_capacity_per_unit\nentsoeAPI.GETconstructor.query_day_ahead_aggregated_generation\nentsoeAPI.GETconstructor.query_day_ahead_generation_forecasts_wind_solar\nentsoeAPI.GETconstructor.query_current_generation_forecasts_wind_solar\nentsoeAPI.GETconstructor.query_intraday_generation_forecasts_wind_solar\nentsoeAPI.GETconstructor.query_actual_generation_per_generation_unit\nentsoeAPI.GETconstructor.query_aggregated_generation_per_type\nentsoeAPI.GETconstructor.query_aggregated_filling_rate","category":"page"},{"location":"generation/#entsoeAPI.GETconstructor.query_installed_generation_capacity_aggregated","page":"Generation","title":"entsoeAPI.GETconstructor.query_installed_generation_capacity_aggregated","text":"query_installed_generation_capacity_aggregated(in_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime[, psrType::String = \"\"])\n\nConstructs the HTTP request for the data about the aggregated installed generation capacity in a certain area (article 14.1 A: https://transparency.entsoe.eu/content/static_content/Static%20content/knowledge%20base/data-views/generation/Data-view%20Installed%20Capacity%20per%20Production%20Type.html). Returns the received HTTP response, together with the used timezone. Minimum time interval in query response is one year!\n\nArguments\n\nin_Domain::Union{mappings.Area, String}: The area for which the data is needed, can be represented as an Area object or a string with country code or direct code\nperiodStart::DateTime: Start date and time of the needed data\nperiodEnd::DateTime: End date and time of the needed data \npsrType::String = \"\": The coded type of a power system resource. The classification for the asset.\n\n! One year range limit applies !\n\n\n\n\n\n","category":"function"},{"location":"generation/#entsoeAPI.GETconstructor.query_installed_generation_capacity_per_unit","page":"Generation","title":"entsoeAPI.GETconstructor.query_installed_generation_capacity_per_unit","text":"query_installed_generation_capacity_per_unit(in_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime[, psrType::String = \"\"])\n\nConstructs the HTTP request for the data about the installed generation capacity per unit in a certain area (article 14.1 B: https://transparency.entsoe.eu/content/static_content/Static%20content/knowledge%20base/data-views/generation/Data-view%20Installed%20Capacity%20per%20Production%20Unit.html). Returns the received HTTP response, together with the used timezone. Minimum time interval in query response is one year!\n\nArguments\n\nin_Domain::Union{mappings.Area, String}: The area for which the data is needed, can be represented as an Area object or a string with country code or direct code\nperiodStart::DateTime: Start date and time of the needed data\nperiodEnd::DateTime: End date and time of the needed data \npsrType::String = \"\": The coded type of a power system resource. The classification for the asset. If not used all resources are included.\n\n! One year range limit applies !\n\n\n\n\n\n","category":"function"},{"location":"generation/#entsoeAPI.GETconstructor.query_day_ahead_aggregated_generation","page":"Generation","title":"entsoeAPI.GETconstructor.query_day_ahead_aggregated_generation","text":"query_day_ahead_aggregated_generation(in_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)\n\nConstructs the HTTP request for the data about the day ahead forecast of aggregated generation in a certain area (article 14.1 C: https://transparency.entsoe.eu/content/static_content/Static%20content/knowledge%20base/data-views/generation/Data-view%20Generation%20Forecast%20-%20Day%20Ahead.html). Returns the received HTTP response, together with the used timezone. Minimum time interval in query response is one day!\n\nArguments\n\nin_Domain::Union{mappings.Area, String}: The area for which the data is needed, can be represented as an Area object or a string with country code or direct code\nperiodStart::DateTime: Start date and time of the needed data\nperiodEnd::DateTime: End date and time of the needed data \n\n! One year range limit applies !\n\n\n\n\n\n","category":"function"},{"location":"generation/#entsoeAPI.GETconstructor.query_day_ahead_generation_forecasts_wind_solar","page":"Generation","title":"entsoeAPI.GETconstructor.query_day_ahead_generation_forecasts_wind_solar","text":"query_day_ahead_generation_forecasts_wind_solar(in_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime[, psrType::String = \"\"])\n\nConstructs the HTTP request for the data about the day ahead forecast of wind and solar generation in a certain area (article 14.1 D: https://transparency.entsoe.eu/content/static_content/Static%20content/knowledge%20base/data-views/generation/Data-view%20Generation%20Forecasts%20-%20Day%20Ahead%20for%20Wind%20and%20Solar.html). Returns the received HTTP response, together with the used timezone. Minimum time interval in query response is one day!\n\nArguments\n\nin_Domain::Union{mappings.Area, String}: The area for which the data is needed, can be represented as an Area object or a string with country code or direct code\nperiodStart::DateTime: Start date and time of the needed data\nperiodEnd::DateTime: End date and time of the needed data \npsrType::String = \"\": The coded type of a power system resource. The classification for the asset. If not used all resources are included.\n\n! One year range limit applies !\n\n\n\n\n\n","category":"function"},{"location":"generation/#entsoeAPI.GETconstructor.query_current_generation_forecasts_wind_solar","page":"Generation","title":"entsoeAPI.GETconstructor.query_current_generation_forecasts_wind_solar","text":"query_current_generation_forecasts_wind_solar(in_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime[, psrType::String = \"\"])\n\nConstructs the HTTP request for the data about the current forecast of wind and solar generation in a certain area (article 14.1 D: https://transparency.entsoe.eu/content/static_content/Static%20content/knowledge%20base/data-views/generation/Data-view%20Generation%20Forecast%20-%20Day%20Ahead.html). Returns the received HTTP response, together with the used timezone. Minimum time interval in query response is one day!\n\nArguments\n\nin_Domain::Union{mappings.Area, String}: The area for which the data is needed, can be represented as an Area object or a string with country code or direct code\nperiodStart::DateTime: Start date and time of the needed data\nperiodEnd::DateTime: End date and time of the needed data \npsrType::String = \"\": The coded type of a power system resource. The classification for the asset. If not used all resources are included.\n\n! One year range limit applies !\n\n\n\n\n\n","category":"function"},{"location":"generation/#entsoeAPI.GETconstructor.query_intraday_generation_forecasts_wind_solar","page":"Generation","title":"entsoeAPI.GETconstructor.query_intraday_generation_forecasts_wind_solar","text":"query_intraday_generation_forecasts_wind_solar(in_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime[, psrType::String = \"\"])\n\nConstructs the HTTP request for the data about the intraday forecast of wind and solar generation in a certain area (article 14.1 D: https://transparency.entsoe.eu/content/static_content/Static%20content/knowledge%20base/data-views/generation/Data-view%20Generation%20Forecast%20-%20Day%20Ahead.html). Returns the received HTTP response, together with the used timezone. Minimum time interval in query response is one MTU period!\n\nArguments\n\nin_Domain::Union{mappings.Area, String}: The area for which the data is needed, can be represented as an Area object or a string with country code or direct code\nperiodStart::DateTime: Start date and time of the needed data\nperiodEnd::DateTime: End date and time of the needed data \npsrType::String = \"\": The coded type of a power system resource. The classification for the asset. If not used all resources are included.\n\n! One year range limit applies !\n\n\n\n\n\n","category":"function"},{"location":"generation/#entsoeAPI.GETconstructor.query_actual_generation_per_generation_unit","page":"Generation","title":"entsoeAPI.GETconstructor.query_actual_generation_per_generation_unit","text":"query_actual_generation_per_generation_unit(in_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime[, psrType::String = \"\", registeredResource::String = \"\"])\n\nConstructs the HTTP request for the data about the actual generation per generation unit in a certain area (article 16.1 A: https://transparency.entsoe.eu/content/static_content/Static%20content/knowledge%20base/data-views/generation/Data-view%20Actual%20Generation%20per%20Generation%20Unit.html). Returns the received HTTP response, together with the used timezone. Minimum time interval in query response is one MTU period!\n\nArguments\n\nin_Domain::Union{mappings.Area, String}: The area for which the data is needed, can be represented as an Area object or a string with country code or direct code\nperiodStart::DateTime: Start date and time of the needed data\nperiodEnd::DateTime: End date and time of the needed data \npsrType::String = \"\": The coded type of a power system resource. The classification for the asset. If not used all resources are included.\nregisteredResource = \"\": The unique identification of a resource\n\n! One day range limit applies !\n\n\n\n\n\n","category":"function"},{"location":"generation/#entsoeAPI.GETconstructor.query_aggregated_generation_per_type","page":"Generation","title":"entsoeAPI.GETconstructor.query_aggregated_generation_per_type","text":"query_aggregated_generation_per_type(in_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime[, psrType::String = \"\"])\n\nConstructs the HTTP request for the data about the actual aggregated generation per plant type in a certain area (article 16.1 B&C: https://transparency.entsoe.eu/content/static_content/Static%20content/knowledge%20base/data-views/generation/Data-view%20Actual%20Generation%20per%20Production%20Unit.html). Returns the received HTTP response, together with the used timezone. Minimum time interval in query response is one MTU period!\n\nArguments\n\nin_Domain::Union{mappings.Area, String}: The area for which the data is needed, can be represented as an Area object or a string with country code or direct code\nperiodStart::DateTime: Start date and time of the needed data\nperiodEnd::DateTime: End date and time of the needed data \npsrType::String = \"\": The coded type of a power system resource. The classification for the asset. If not used all resources are included.\n\n! One year range limit applies !\n\n\n\n\n\n","category":"function"},{"location":"generation/#entsoeAPI.GETconstructor.query_aggregated_filling_rate","page":"Generation","title":"entsoeAPI.GETconstructor.query_aggregated_filling_rate","text":"query_aggregated_filling_rate(in_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)\n\nConstructs the HTTP request for the data about the aggregated filling rate of water reservoirs and hydro storage plants in a certain area (article 16.1 D: https://transparency.entsoe.eu/content/static_content/Static%20content/knowledge%20base/data-views/generation/Data-view%20Water%20Reservoirs%20and%20Hydro%20Storage%20Plants.html). Returns the received HTTP response, together with the used timezone. Minimum time inteval in query response is one week!\n\nArguments\n\nin_Domain::Union{mappings.Area, String}: The area for which the data is needed, can be represented as an Area object or a string with country code or direct code\nperiodStart::DateTime: Start date and time of the needed data\nperiodEnd::DateTime: End date and time of the needed data \n\n! One year range limit applies !\n\n\n\n\n\n","category":"function"},{"location":"generation/#Parse-functions-1","page":"Generation","title":"Parse functions","text":"","category":"section"},{"location":"generation/#","page":"Generation","title":"Generation","text":"entsoeAPI.xmlParser.parse_installed_generation_capacity_aggregated\nentsoeAPI.xmlParser.parse_installed_generation_capacity_per_unit\nentsoeAPI.xmlParser.parse_day_ahead_aggregated_generation\nentsoeAPI.xmlParser.parse_day_ahead_generation_forecasts_wind_solar\nentsoeAPI.xmlParser.parse_current_generation_forecasts_wind_solar\nentsoeAPI.xmlParser.parse_intraday_generation_forecasts_wind_solar\nentsoeAPI.xmlParser.parse_actual_generation_per_generation_unit\nentsoeAPI.xmlParser.parse_aggregated_generation_per_type\nentsoeAPI.xmlParser.parse_aggregated_filling_rate","category":"page"},{"location":"generation/#entsoeAPI.xmlParser.parse_installed_generation_capacity_aggregated","page":"Generation","title":"entsoeAPI.xmlParser.parse_installed_generation_capacity_aggregated","text":"parse_installed_generation_capacity_aggregated(xml::Vector{UInt8}, tz::TimeZone)\n\nParses xml file generated by the function GETconstructor.query_installed_generation_capacity_aggregated(in_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime[, psrType::String = \"\"]). Returns the data in a dataframe.\n\n[year, type, installed capacity]\n\nArguments\n\nxml::Vector{UInt8}: xml data in the format as returned by the function GETconstructor.query_installed_generation_capacity_aggregated(in_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime[, psrType::String = \"\"])\ntz::TimeZone: Timezone in which the dates and times have to be represented\n\n\n\n\n\n","category":"function"},{"location":"generation/#entsoeAPI.xmlParser.parse_installed_generation_capacity_per_unit","page":"Generation","title":"entsoeAPI.xmlParser.parse_installed_generation_capacity_per_unit","text":"parse_installed_generation_capacity_per_unit(xml::Vector{UInt8})\n\nParses xml file generated by the function GETconstructor.query_installed_generation_capacity_per_unit(in_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime[, psrType::String = \"\"]). Returns the data in a dataframe.\n\n[production type, code, name, installed capacity at the beginnen of the year, voltage connection level]\n\nArguments\n\nxml::Vector{UInt8}: xml data in the format as returned by the function GETconstructor.query_installed_generation_capacity_per_unit(in_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime[, psrType::String = \"\"])\ntz::TimeZone: Timezone in which the dates and times have to be represented\n\n\n\n\n\n","category":"function"},{"location":"generation/#entsoeAPI.xmlParser.parse_day_ahead_aggregated_generation","page":"Generation","title":"entsoeAPI.xmlParser.parse_day_ahead_aggregated_generation","text":"parse_day_ahead_aggregated_generation(xml::Vector{UInt8}, tz::TimeZone)\n\nParses xml file generated by the function GETconstructor.query_day_ahead_aggregated_generation(in_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime). Returns the data in a dictionary.\n\n(\"generation\" => [start, end, scheduled generation], \"consumption\" => [start, end, scheduled consumption])\n\nArguments\n\nxml::Vector{UInt8}: xml data in the format as returned by the function GETconstructor.query_day_ahead_aggregated_generation(in_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)\ntz::TimeZone: Timezone in which the dates and times have to be represented\n\n\n\n\n\n","category":"function"},{"location":"generation/#entsoeAPI.xmlParser.parse_day_ahead_generation_forecasts_wind_solar","page":"Generation","title":"entsoeAPI.xmlParser.parse_day_ahead_generation_forecasts_wind_solar","text":"parse_day_ahead_generation_forecasts_wind_solar(xml::Vector{UInt8}, tz::TimeZone)\n\nParses xml file generated by the function GETconstructor.query_day_ahead_generation_forecasts_wind_solar(in_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime, psrType::String = \"\"). Returns the data in a dictionary.\n\n(\"solar\" => [start, end, solar], \"wind offshore\" => [start, end, wind offshore], \"wind onshore\" => [start, end, wind onshore])\n\nArguments\n\nxml::Vector{UInt8}: xml data in the format as returned by the function GETconstructor.query_day_ahead_generation_forecasts_wind_solar(in_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime, psrType::String = \"\")\ntz::TimeZone: Timezone in which the dates and times have to be represented\n\n\n\n\n\n","category":"function"},{"location":"generation/#entsoeAPI.xmlParser.parse_current_generation_forecasts_wind_solar","page":"Generation","title":"entsoeAPI.xmlParser.parse_current_generation_forecasts_wind_solar","text":"parse_current_generation_forecasts_wind_solar(xml::Vector{UInt8}, tz::TimeZone)\n\nParses xml file generated by the function GETconstructor.query_current_generation_forecasts_wind_solar(in_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime[, psrType::String = \"\"]). Returns the data in a dictionary.\n\n(\"solar\" => [start, end, solar], \"wind offshore\" => [start, end, wind offshore], \"wind onshore\" => [start, end, wind onshore])\n\nArguments\n\nxml::Vector{UInt8}: xml data in the format as returned by the function GETconstructor.query_current_generation_forecasts_wind_solar(in_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime[, psrType::String = \"\"])\ntz::TimeZone: Timezone in which the dates and times have to be represented\n\n\n\n\n\n","category":"function"},{"location":"generation/#entsoeAPI.xmlParser.parse_intraday_generation_forecasts_wind_solar","page":"Generation","title":"entsoeAPI.xmlParser.parse_intraday_generation_forecasts_wind_solar","text":"parse_intraday_generation_forecasts_wind_solar(xml::Vector{UInt8}, tz::TimeZone)\n\nParses xml file generated by the function GETconstructor.query_intraday_generation_forecasts_wind_solar(in_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime[, psrType::String = \"\"]). Returns the data in a dictionary.\n\n(\"solar\" => [start, end, solar], \"wind offshore\" => [start, end, wind offshore], \"wind onshore\" => [start, end, wind onshore])\n\nArguments\n\nxml::Vector{UInt8}: xml data in the format as returned by the function GETconstructor.query_intraday_generation_forecasts_wind_solar(in_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime[, psrType::String = \"\"])\ntz::TimeZone: Timezone in which the dates and times have to be represented\n\n\n\n\n\n","category":"function"},{"location":"generation/#entsoeAPI.xmlParser.parse_aggregated_generation_per_type","page":"Generation","title":"entsoeAPI.xmlParser.parse_aggregated_generation_per_type","text":"parse_aggregated_generation_per_type(xml::Vector{UInt8}, tz::TimeZone)\n\nParses xml file generated by the function GETconstructor.query_aggregated_generation_per_type(in_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime[, psrType::String = \"\"]). Returns the data in a dictionary.\n\n(\"type\" => [start, end, aggregated generation])\n\nArguments\n\nxml::Vector{UInt8}: xml data in the format as returned by the function GETconstructor.query_aggregated_generation_per_type(in_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime[, psrType::String = \"\"])\ntz::TimeZone: Timezone in which the dates and times have to be represented\n\n\n\n\n\n","category":"function"},{"location":"generation/#entsoeAPI.xmlParser.parse_aggregated_filling_rate","page":"Generation","title":"entsoeAPI.xmlParser.parse_aggregated_filling_rate","text":"parse_aggregated_filling_rate(xml::Vector{UInt8}, tz::TimeZone)\n\nParses xml file generated by the function GETconstructor.query_aggregated_filling_rate(in_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime). Returns the data in a dataframe.\n\n[year, week, stored energy value]\n\nArguments\n\nxml::Vector{UInt8}: xml data in the format as returned by the function GETconstructor.query_aggregated_filling_rate(in_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)\ntz::TimeZone: Timezone in which the dates and times have to be represented\n\n\n\n\n\n","category":"function"},{"location":"outages/#Outages-functions-1","page":"Outages","title":"Outages functions","text":"","category":"section"},{"location":"outages/#","page":"Outages","title":"Outages","text":"This file describes the usage of all the functions under the outages tab in the ENTSOE-E transparancy platform.","category":"page"},{"location":"outages/#User-functions-1","page":"Outages","title":"User functions","text":"","category":"section"},{"location":"outages/#","page":"Outages","title":"Outages","text":"entsoeAPI.unavailability_consumption_units\nentsoeAPI.unavailability_generation_units\nentsoeAPI.unavailability_production_units\nentsoeAPI.unavailability_offshore_grid\nentsoeAPI.unavailability_transmission_infrastructure\nentsoeAPI.fallbacks","category":"page"},{"location":"outages/#entsoeAPI.unavailability_consumption_units","page":"Outages","title":"entsoeAPI.unavailability_consumption_units","text":"unavailability_consumption_units(biddingZone_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime[, businessType::String = \"\"])\n\nConstructs the HTTP request for the data about the unavailability of consumption units in a certain area (article 7.1 A&B: https://transparency.entsoe.eu/content/static_content/Static%20content/knowledge%20base/data-views/outage-domain/Data-view%20Aggregated%20Unavailability%20of%20Consumption%20Units.html). Parses the received HTTP response and returns the data in a dataframe.\n\nNOT YET IMPLEMENTED\n\nMinimum time interval in query response is one MTU period!\n\nArguments\n\nbiddingZone_Domain::Union{mappings.Area, String}: Area for which the outages data is needed, can be represented as an Area object or a string with country code or direct code \nperiodStart::DateTime: Start date and time of the needed data\nperiodEnd::DateTime: End date and time of the needed data \nbusinessType::String = \"\": The identification of the nature of the data\n\n! One year range limit applies !\n\n\n\n\n\n","category":"function"},{"location":"outages/#entsoeAPI.unavailability_generation_units","page":"Outages","title":"entsoeAPI.unavailability_generation_units","text":"unavailability_generation_units(biddingZone_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime[, businessType::String = \"\", docStatus::String = \"\", periodStartUpdate::DateTime = DateTime(0), periodEndUpdate::DateTime = DateTime(0), registeredResource::String = \"\", mRID::String = \"\", offset::Int = 0])\n\nConstructs the HTTP request for the data about the unavailability of generation units in a certain area (article 15.1 A&B: https://transparency.entsoe.eu/content/static_content/Static%20content/knowledge%20base/data-views/outage-domain/Data-view%20Unavailability%20of%20Production%20and%20Generation%20Units.html). Parses the received HTTP response and returns the data in a dataframe.\n\nNOT YET IMPLEMENTED\n\nMinimum time interval in query response depends on duration of matching outages!\n\nArguments\n\nbiddingZone_Domain::Union{mappings.Area, String}: Area for which the outages data is needed, can be represented as an Area object or a string with country code or direct code \nperiodStart::DateTime: Start date and time of the needed data\nperiodEnd::DateTime: End date and time of the needed data \nbusinessType::String = \"\": The identification of the nature of the data\ndocStatus::String = \"\": Identification of the condition or position of the document with regard to its standing\nperiodStartUpdate::DateTime = DatetTime(0):\nperiodEndUpdate::DateTime = DateTime(0): \nregisteredResource::String = \"\": The unique identification of a resource\nmrRID::String = \"\": Unique identification of the document being exchanged within a business process flow\noffset::Int = 0: allows downloading more than 200 documents. The offset ∈ [0,4800] so that paging is restricted to query for 4900 documents max., offset=n returns files in sequence between n+1 and n+200\n\n! One year range limit applies ! ! 200 documents limit applies !\n\n\n\n\n\n","category":"function"},{"location":"outages/#entsoeAPI.unavailability_production_units","page":"Outages","title":"entsoeAPI.unavailability_production_units","text":"unavailability_production_units(biddingZone_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime[, businessType::String = \"\", docStatus::String = \"\", periodStartUpdate::DateTime = DateTime(0), periodEndUpdate::DateTime = DateTime(0), registeredResource::String = \"\", mRID::String = \"\", offset::Int = 0])\n\nConstructs the HTTP request for the data about the unavailability of production units in a certain area (article 15.1 C&D: https://transparency.entsoe.eu/content/static_content/Static%20content/knowledge%20base/data-views/outage-domain/Data-view%20Unavailability%20of%20Production%20and%20Generation%20Units.html). Parses the received HTTP response and returns the data in a dataframe.\n\nNOT YET IMPLEMENTED\n\nMinimum time interval in query response depends on duration of matching outages!\n\nArguments\n\nbiddingZone_Domain::Union{mappings.Area, String}: Area for which the outages data is needed, can be represented as an Area object or a string with country code or direct code \nperiodStart::DateTime: Start date and time of the needed data\nperiodEnd::DateTime: End date and time of the needed data \nbusinessType::String = \"\": The identification of the nature of the data\ndocStatus::String = \"\": Identification of the condition or position of the document with regard to its standing\nperiodStartUpdate::DateTime = DatetTime(0):\nperiodEndUpdate::DateTime = DateTime(0): \nregisteredResource::String = \"\": The unique identification of a resource\nmrRID::String = \"\": Unique identification of the document being exchanged within a business process flow\noffset::Int = 0: allows downloading more than 200 documents. The offset ∈ [0,4800] so that paging is restricted to query for 4900 documents max., offset=n returns files in sequence between n+1 and n+200\n\n! One year range limit applies ! ! 200 documents limit applies !\n\n\n\n\n\n","category":"function"},{"location":"outages/#entsoeAPI.unavailability_offshore_grid","page":"Outages","title":"entsoeAPI.unavailability_offshore_grid","text":"unavailability_offshore_grid(biddingZone_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime[, docStatus::String = \"\", periodStartUpdate::DateTime = DateTime(0), periodEndUpdate::DateTime = DateTime(0), mRID::String = \"\", offset::Int = 0])\n\nConstructs the HTTP request for the data about the unavailability of the offshore grid infrastructure in a certain area (article 10.1 C: https://transparency.entsoe.eu/content/static_content/Static%20content/knowledge%20base/data-views/outage-domain/Data-view%20Unavailability%20of%20off-shore%20grid.html). Parses the received HTTP response and returns the data in a dataframe.\n\nNOT YET IMPLEMENTED\n\nMinimum time interval in query response depends on duration of matching outages!\n\nArguments\n\nbiddingZone_Domain::Union{mappings.Area, String}: Area for which the outages data is needed, can be represented as an Area object or a string with country code or direct code \nperiodStart::DateTime: Start date and time of the needed data\nperiodEnd::DateTime: End date and time of the needed data \ndocStatus::String = \"\": Identification of the condition or position of the document with regard to its standing\nperiodStartUpdate::DateTime = DatetTime(0):\nperiodEndUpdate::DateTime = DateTime(0): \nregisteredResource::String = \"\": The unique identification of a resource\nmrRID::String = \"\": Unique identification of the document being exchanged within a business process flow\noffset::Int = 0: allows downloading more than 200 documents. The offset ∈ [0,4800] so that paging is restricted to query for 4900 documents max., offset=n returns files in sequence between n+1 and n+200\n\n! One year range limit applies ! ! 200 documents limit applies !\n\n\n\n\n\n","category":"function"},{"location":"outages/#entsoeAPI.unavailability_transmission_infrastructure","page":"Outages","title":"entsoeAPI.unavailability_transmission_infrastructure","text":"unavailability_transmission_infrastructure(in_Domain::Union{mappings.Area, String}, out_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime[, businessType::String = \"\", docStatus::String = \"\", periodStartUpdate::DateTime = DateTime(0), periodEndUpdate::DateTime = DateTime(0), mRID::String = \"\", offset::Int = 0])\n\nConstructs the HTTP request for the data about the unavailability of the transmission infrastructure in a certain area (article 10.1 A&B: https://transparency.entsoe.eu/content/static_content/Static%20content/knowledge%20base/data-views/outage-domain/Data-view%20Unavailability%20in%20Transmission%20Grid.html). Parses the received HTTP response and returns the data in a dataframe.\n\nNOT YET IMPLEMENTED\n\nMinimum time interval in query response depends on duration of matching outages!\n\nArguments\n\nin_Domain::Union{mappings.Area, String}: The area where energy is going, can be represented as an Area object or a string with country code or direct code \nout_Domain::Union{mappings.Area, String}: The area where energy is coming from, can be represented as an Area object or a string with country code or direct code\nperiodStart::DateTime: Start date and time of the needed data\nperiodEnd::DateTime: End date and time of the needed data \nbusinessType::String = \"\": The identification of the nature of the data\ndocStatus::String = \"\": Identification of the condition or position of the document with regard to its standing\nperiodStartUpdate::DateTime = DatetTime(0): \nperiodEndUpdate::DateTime = DateTime(0): \nregisteredResource::String = \"\": The unique identification of a resource\nmrRID::String = \"\": Unique identification of the document being exchanged within a business process flow\noffset::Int = 0: allows downloading more than 200 documents. The offset ∈ [0,4800] so that paging is restricted to query for 4900 documents max., offset=n returns files in sequence between n+1 and n+200\n\n! One year range limit applies ! ! 200 documents limit applies !\n\n\n\n\n\n","category":"function"},{"location":"outages/#GET-functions-1","page":"Outages","title":"GET functions","text":"","category":"section"},{"location":"outages/#","page":"Outages","title":"Outages","text":"entsoeAPI.GETconstructor.query_unavailability_consumption_units\nentsoeAPI.GETconstructor.query_unavailability_generation_units\nentsoeAPI.GETconstructor.query_unavailability_production_units\nentsoeAPI.GETconstructor.query_unavailability_offshore_grid\nentsoeAPI.GETconstructor.query_unavailability_transmission_infrastructure\nentsoeAPI.GETconstructor.query_fallbacks","category":"page"},{"location":"outages/#entsoeAPI.GETconstructor.query_unavailability_consumption_units","page":"Outages","title":"entsoeAPI.GETconstructor.query_unavailability_consumption_units","text":"query_unavailability_consumption_units(biddingZone_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime[, businessType::String = \"\"])\n\nConstructs the HTTP request for the data about the unavailability of consumption units in a certain area (article 7.1 A&B: https://transparency.entsoe.eu/content/static_content/Static%20content/knowledge%20base/data-views/outage-domain/Data-view%20Aggregated%20Unavailability%20of%20Consumption%20Units.html). Returns the received HTTP response. Minimum time interval in query response is one MTU period!\n\nArguments\n\nbiddingZone_Domain::Union{mappings.Area, String}: Area for which the outages data is needed, can be represented as an Area object or a string with country code or direct code \nperiodStart::DateTime: Start date and time of the needed data\nperiodEnd::DateTime: End date and time of the needed data \nbusinessType::String = \"\": The identification of the nature of the data\n\n! One year range limit applies !\n\n\n\n\n\n","category":"function"},{"location":"outages/#entsoeAPI.GETconstructor.query_unavailability_generation_units","page":"Outages","title":"entsoeAPI.GETconstructor.query_unavailability_generation_units","text":"query_unavailability_generation_units(biddingZone_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime[, businessType::String = \"\", docStatus::String = \"\", periodStartUpdate::DateTime = DateTime(0), periodEndUpdate::DateTime = DateTime(0), registeredResource::String = \"\", mRID::String = \"\", offset::Int = 0])\n\nConstructs the HTTP request for the data about the unavailability of generation units in a certain area (article 15.1 A&B: https://transparency.entsoe.eu/content/static_content/Static%20content/knowledge%20base/data-views/outage-domain/Data-view%20Unavailability%20of%20Production%20and%20Generation%20Units.html). Returns the received HTTP response. Minimum time interval in query response depends on duration of matching outages!\n\nArguments\n\nbiddingZone_Domain::Union{mappings.Area, String}: Area for which the outages data is needed, can be represented as an Area object or a string with country code or direct code \nperiodStart::DateTime: Start date and time of the needed data\nperiodEnd::DateTime: End date and time of the needed data \nbusinessType::String = \"\": The identification of the nature of the data\ndocStatus::String = \"\": Identification of the condition or position of the document with regard to its standing\nperiodStartUpdate::DateTime = DatetTime(0):\nperiodEndUpdate::DateTime = DateTime(0): \nregisteredResource::String = \"\": The unique identification of a resource\nmrRID::String = \"\": Unique identification of the document being exchanged within a business process flow\noffset::Int = 0: allows downloading more than 200 documents. The offset ∈ [0,4800] so that paging is restricted to query for 4900 documents max., offset=n returns files in sequence between n+1 and n+200\n\n! One year range limit applies ! ! 200 documents limit applies !\n\n\n\n\n\n","category":"function"},{"location":"outages/#entsoeAPI.GETconstructor.query_unavailability_production_units","page":"Outages","title":"entsoeAPI.GETconstructor.query_unavailability_production_units","text":"query_unavailability_production_units(biddingZone_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime[, businessType::String = \"\", docStatus::String = \"\", periodStartUpdate::DateTime = DateTime(0), periodEndUpdate::DateTime = DateTime(0), registeredResource::String = \"\", mRID::String = \"\", offset::Int = 0])\n\nConstructs the HTTP request for the data about the unavailability of production units in a certain area (article 15.1 C&D: https://transparency.entsoe.eu/content/static_content/Static%20content/knowledge%20base/data-views/outage-domain/Data-view%20Unavailability%20of%20Production%20and%20Generation%20Units.html). Returns the received HTTP response. Minimum time interval in query response depends on duration of matching outages!\n\nArguments\n\nbiddingZone_Domain::Union{mappings.Area, String}: Area for which the outages data is needed, can be represented as an Area object or a string with country code or direct code \nperiodStart::DateTime: Start date and time of the needed data\nperiodEnd::DateTime: End date and time of the needed data \nbusinessType::String = \"\": The identification of the nature of the data\ndocStatus::String = \"\": Identification of the condition or position of the document with regard to its standing\nperiodStartUpdate::DateTime = DatetTime(0):\nperiodEndUpdate::DateTime = DateTime(0): \nregisteredResource::String = \"\": The unique identification of a resource\nmrRID::String = \"\": Unique identification of the document being exchanged within a business process flow\noffset::Int = 0: allows downloading more than 200 documents. The offset ∈ [0,4800] so that paging is restricted to query for 4900 documents max., offset=n returns files in sequence between n+1 and n+200\n\n! One year range limit applies ! ! 200 documents limit applies !\n\n\n\n\n\n","category":"function"},{"location":"outages/#entsoeAPI.GETconstructor.query_unavailability_offshore_grid","page":"Outages","title":"entsoeAPI.GETconstructor.query_unavailability_offshore_grid","text":"query_unavailability_offshore_grid(biddingZone_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime[, docStatus::String = \"\", periodStartUpdate::DateTime = DateTime(0), periodEndUpdate::DateTime = DateTime(0), mRID::String = \"\", offset::Int = 0])\n\nConstructs the HTTP request for the data about the unavailability of the offshore grid infrastructure in a certain area (article 10.1 C: https://transparency.entsoe.eu/content/static_content/Static%20content/knowledge%20base/data-views/outage-domain/Data-view%20Unavailability%20of%20off-shore%20grid.html). Returns the received HTTP response. Minimum time interval in query response depends on duration of matching outages!\n\nArguments\n\nbiddingZone_Domain::Union{mappings.Area, String}: Area for which the outages data is needed, can be represented as an Area object or a string with country code or direct code \nperiodStart::DateTime: Start date and time of the needed data\nperiodEnd::DateTime: End date and time of the needed data \ndocStatus::String = \"\": Identification of the condition or position of the document with regard to its standing\nperiodStartUpdate::DateTime = DatetTime(0):\nperiodEndUpdate::DateTime = DateTime(0): \nregisteredResource::String = \"\": The unique identification of a resource\nmrRID::String = \"\": Unique identification of the document being exchanged within a business process flow\noffset::Int = 0: allows downloading more than 200 documents. The offset ∈ [0,4800] so that paging is restricted to query for 4900 documents max., offset=n returns files in sequence between n+1 and n+200\n\n! One year range limit applies ! ! 200 documents limit applies !\n\n\n\n\n\n","category":"function"},{"location":"outages/#entsoeAPI.GETconstructor.query_unavailability_transmission_infrastructure","page":"Outages","title":"entsoeAPI.GETconstructor.query_unavailability_transmission_infrastructure","text":"query_unavailability_transmission_infrastructure(in_Domain::Union{mappings.Area, String}, out_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime[, businessType::String = \"\", docStatus::String = \"\", periodStartUpdate::DateTime = DateTime(0), periodEndUpdate::DateTime = DateTime(0), mRID::String = \"\", offset::Int = 0])\n\nConstructs the HTTP request for the data about the unavailability of the transmission infrastructure in a certain area (article 10.1 A&B: https://transparency.entsoe.eu/content/static_content/Static%20content/knowledge%20base/data-views/outage-domain/Data-view%20Unavailability%20in%20Transmission%20Grid.html). Returns the received HTTP response. Minimum time interval in query response depends on duration of matching outages!\n\nArguments\n\nin_Domain::Union{mappings.Area, String}: The area where energy is going, can be represented as an Area object or a string with country code or direct code \nout_Domain::Union{mappings.Area, String}: The area where energy is coming from, can be represented as an Area object or a string with country code or direct code\nperiodStart::DateTime: Start date and time of the needed data\nperiodEnd::DateTime: End date and time of the needed data \nbusinessType::String = \"\": The identification of the nature of the data\ndocStatus::String = \"\": Identification of the condition or position of the document with regard to its standing\nperiodStartUpdate::DateTime = DatetTime(0): \nperiodEndUpdate::DateTime = DateTime(0): \nregisteredResource::String = \"\": The unique identification of a resource\nmrRID::String = \"\": Unique identification of the document being exchanged within a business process flow\noffset::Int = 0: allows downloading more than 200 documents. The offset ∈ [0,4800] so that paging is restricted to query for 4900 documents max., offset=n returns files in sequence between n+1 and n+200\n\n! One year range limit applies ! ! 200 documents limit applies !\n\n\n\n\n\n","category":"function"},{"location":"outages/#Parse-functions-1","page":"Outages","title":"Parse functions","text":"","category":"section"},{"location":"outages/#","page":"Outages","title":"Outages","text":"entsoeAPI.xmlParser.parse_unavailability_consumption_units\nentsoeAPI.xmlParser.parse_unavailability_generation_units\nentsoeAPI.xmlParser.parse_unavailability_production_units\nentsoeAPI.xmlParser.parse_unavailability_offshore_grid\nentsoeAPI.xmlParser.parse_unavailability_transmission_infrastructure\nentsoeAPI.xmlParser.parse_fallbacks","category":"page"},{"location":"transmission/#Transmission-functions-1","page":"Transmission","title":"Transmission functions","text":"","category":"section"},{"location":"transmission/#","page":"Transmission","title":"Transmission","text":"This file describes the usage of all the functions under the transmission tab in the ENTSOE-E transparancy platform.","category":"page"},{"location":"transmission/#User-functions-1","page":"Transmission","title":"User functions","text":"","category":"section"},{"location":"transmission/#","page":"Transmission","title":"Transmission","text":"entsoeAPI.forecasted_capacity\nentsoeAPI.offered_capacity\nentsoeAPI.flowbased\nentsoeAPI.intraday_transfer_limits\nentsoeAPI.explicit_allocation_information_capacity\nentsoeAPI.explicit_allocation_information_revenue\nentsoeAPI.total_capacity_nominated\nentsoeAPI.total_capacity_already_allocated\nentsoeAPI.day_ahead_prices\nentsoeAPI.implicit_auction_net_positions\nentsoeAPI.implicit_auction_congestion_income\nentsoeAPI.total_commercial_schedules\nentsoeAPI.physical_flows\nentsoeAPI.capacity_allocated_outside_EU","category":"page"},{"location":"transmission/#entsoeAPI.forecasted_capacity","page":"Transmission","title":"entsoeAPI.forecasted_capacity","text":"forecasted_capacity(contract_MarketAgreementType::String, in_Domain::Union{mappings.Area, String}, out_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)\n\nConstructs the HTTP request for the data of the forecasted capacity over a certain border (article 11.1 A: https://transparency.entsoe.eu/content/static_content/Static%20content/knowledge%20base/data-views/transmission-domain/Data-view%20Forecasted%20Transfer%20Capacities%20-%20Day%20Ahead.html). Parses the received HTTP response and returns the data in a dataframe.\n\n[time, capacity]\n\nMinimum time interval in query response ranges from day to year, depending on selected Contract_MarketAgreementType!\n\nArguments\n\ncontract_MarketAgreementType::String:The specification of the kind of the agreement, e.g. long term, daily contract. Used to distinguish between day ahead, week ahead, month ahead and year ahead forecasts.\nin_Domain::Union{mappings.Area, String}: The area where energy is going, can be represented as an Area object or a string with country code or direct code \nout_Domain::Union{mappings.Area, String}: The area where energy is coming from, can be represented as an Area object or a string with country code or direct code\nperiodStart::DateTime: Start date and time of the needed data\nperiodEnd::DateTime: End date and time of the needed data \n\n! One year range limit applies !\n\n\n\n\n\n","category":"function"},{"location":"transmission/#entsoeAPI.offered_capacity","page":"Transmission","title":"entsoeAPI.offered_capacity","text":"offered_capacity(auctionType::String, contract_MarketAgreementType::String, in_Domain::Union{mappings.Area, String}, out_Domain::Union{mappings.Area}, periodStart::DateTime, periodEnd::DateTime[, auctionCategory::String = \"\", update_DateAndOrTime::DateTime = DateTime(0), classificationSequence_AttributeInstanceComponentPosition::String = \"\"])\n\nConstructs the HTTP request for the data of the offered capacity over a certain border (article 11.1 A: https://transparency.entsoe.eu/content/static_content/Static%20content/knowledge%20base/data-views/transmission/Data-view%20Explicit%20Allocations%20-%20Intraday.html). Parses the received HTTP response and returns the data in a dataframe.\n\n[time, capacity]\n\nMinimum time interval in query response ranges from day to year, depending on selected Contract_MarketAgreementType!\n\nArguments\n\nauctionType::String: The kind of the auction (e.g. implicit, explicit ...)\ncontract_MarketAgreementType::String: The specification of the kind of the agreement, e.g. long term, daily contract. Used to distinguish between day ahead, week ahead, month ahead and year ahead forecasts.\nin_Domain::Union{mappings.Area, String}: The area where energy is going, can be represented as an Area object or a string with country code or direct code \nout_Domain::Union{mappings.Area, String}: The area where energy is coming from, can be represented as an Area object or a string with country code or direct code\nperiodStart::DateTime: Start date and time of the needed data\nperiodEnd::DateTime: End date and time of the needed data \nauctionCategory::String = \"\": The product category of an auction\nupdate_DateAndOrTime::DateTime = \"\": The date and time of the update of the document\nclassificationSequence_AttributeInstanceComponentPosition::String = \"\": A sequential value representing a relative sequence number. A classification sequence is only provided in the case where there are several auctions in the same category and contract type.\n\n! 100 document limit applies !\n\n\n\n\n\n","category":"function"},{"location":"transmission/#entsoeAPI.flowbased","page":"Transmission","title":"entsoeAPI.flowbased","text":"flowbased(processType::String, domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)\n\nConstructs the HTTP request for the data of the flow-based parameters of a certain area (article 11.1 B: https://transparency.entsoe.eu/content/static_content/Static%20content/knowledge%20base/data-views/transmission-domain/Data-view%20Day%20Ahead%20Flow%20Based%20Allocations.html). Parses the received HTTP response and returns the data in a dictionary.\n\n(\"time\" => [cb/co, RAM, domain, ..., domain])\n\nMinimum time interval in query response is one day for day-ahead allocations!\n\nArguments\n\nprocessType::String: The kind of the auction (e.g. implicit, explicit ...)\ndomain::Union{mappings.Area, String}: The area for which the data is needed, can be represented as an Area object or a string with country code or direct code \nperiodStart::DateTime: Start date and time of the needed data\nperiodEnd::DateTime: End date and time of the needed data \n\n! 100 document limit applies !\n\n\n\n\n\n","category":"function"},{"location":"transmission/#entsoeAPI.intraday_transfer_limits","page":"Transmission","title":"entsoeAPI.intraday_transfer_limits","text":"intraday_transfer_limits(in_Domain::Union{mappings.Area, String}, out_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)\n\nConstructs the HTTP request for the data of the intraday transfer limits over a certain border (article 11.3: https://transparency.entsoe.eu/content/static_content/Static%20content/knowledge%20base/data-views/transmission-domain/Data-view%20Cross%20Border%20Capacity%20of%20DC%20Links%20-%20Intraday%20Transfer%20Limits.html). Parses the received HTTP response and returns the data in a dataframe.\n\n[time, capacity]\n\nMinimum time interval in query response ranges from part of day up to one day!\n\nArguments\n\nin_Domain::Union{mappings.Area, String}: The area where energy is going, can be represented as an Area object or a string with country code or direct code \nout_Domain::Union{mappings.Area, String}: The area where energy is coming from, can be represented as an Area object or a string with country code or direct code\nperiodStart::DateTime: Start date and time of the needed data\nperiodEnd::DateTime: End date and time of the needed data \n\n! One year range limit applies !\n\n\n\n\n\n","category":"function"},{"location":"transmission/#entsoeAPI.explicit_allocation_information_capacity","page":"Transmission","title":"entsoeAPI.explicit_allocation_information_capacity","text":"explicit_allocation_information_capacity(businessType::String, contract_MarketAgreementType::String, in_Domain::Union{mappings.Area, String}, out_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime[, auctionCategory::String = \"\", classificationSequence_AttributeInstanceComponentPosition::String = \"\"])\n\nConstructs the HTTP request for the data of the capacity explicitly allocated to the market over a certain border and its revenue (article 12.1 A: https://transparency.entsoe.eu/content/static_content/Static%20content/knowledge%20base/data-views/transmission/Data-view%20Explicit%20Allocations%20-%20Day%20ahead.html). Parses the received HTTP response and returns the data in a dataframe.\n\n[time, capacity [, price]]\n\nMinimum time interval in query response ranges from part of day to year, depending on selected Contract_MarketAgreementType!\n\nArguments\n\nbusinessType::String: The identification of the nature of the data\ncontract_MarketAgreementType::String: The specification of the kind of the agreement, e.g. long term, daily contract. Used to distinguish between day ahead, week ahead, month ahead and year ahead forecasts.\nin_Domain::Union{mappings.Area, String}: The area where energy is going, can be represented as an Area object or a string with country code or direct code \nout_Domain::Union{mappings.Area, String}: The area where energy is coming from, can be represented as an Area object or a string with country code or direct code\nperiodStart::DateTime: Start date and time of the needed data\nperiodEnd::DateTime: End date and time of the needed data \nauctionCategory::String = \"\": The product category of an auction\nclassificationSequence_AttributeInstanceComponentPosition::String = \"\": A sequential value representing a relative sequence number. A classification sequence is only provided in the case where there are several auctions in the same category and contract type.\n\n! 100 document limit applies !\n\n\n\n\n\n","category":"function"},{"location":"transmission/#entsoeAPI.explicit_allocation_information_revenue","page":"Transmission","title":"entsoeAPI.explicit_allocation_information_revenue","text":"explicit_allocation_information_revenue(contract_MarketAgreementType::String, in_Domain::Union{mappings.Area, String}, out_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)\n\nConstructs the HTTP request for the data of the revenue of the capacity explicitly allocated to the market over a certain border (article 12.1 A: https://transparency.entsoe.eu/content/static_content/Static%20content/knowledge%20base/data-views/transmission-domain/Data-view%20Explicit%20Allocations%20Revenue.html). Parses the received HTTP response and returns the data in a dataframe.\n\n[time, price]\n\nMinimum time interval in query response ranges from part of day to year, depending on selected Contract_MarketAgreementType!\n\nArguments\n\ncontract_MarketAgreementType::String: The specification of the kind of the agreement, e.g. long term, daily contract. Used to distinguish between day ahead, week ahead, month ahead and year ahead forecasts.\nin_Domain::Union{mappings.Area, String}: The area where energy is going, can be represented as an Area object or a string with country code or direct code \nout_Domain::Union{mappings.Area, String}: The area where energy is coming from, can be represented as an Area object or a string with country code or direct code\nperiodStart::DateTime: Start date and time of the needed data\nperiodEnd::DateTime: End date and time of the needed data \n\n! 100 document limit applies !\n\n\n\n\n\n","category":"function"},{"location":"transmission/#entsoeAPI.total_capacity_nominated","page":"Transmission","title":"entsoeAPI.total_capacity_nominated","text":"total_capacity_nominated(in_Domain::Union{mappings.Area, String}, out_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)\n\nConstructs the HTTP request for the data of the total nominated capacity over a certain border (article 12.1 B: https://transparency.entsoe.eu/content/static_content/Static%20content/knowledge%20base/data-views/transmission-domain/Data-view%20Total%20Nominated%20Capacity.html). Parses the received HTTP response and returns the data in a dataframe.\n\n[time, capacity]\n\nMinimum time interval in query response is one day!\n\nArguments\n\nin_Domain::Union{mappings.Area, String}: The area where energy is going, can be represented as an Area object or a string with country code or direct code \nout_Domain::Union{mappings.Area, String}: The area where energy is coming from, can be represented as an Area object or a string with country code or direct code\nperiodStart::DateTime: Start date and time of the needed data\nperiodEnd::DateTime: End date and time of the needed data \n\n! One year range limit applies !\n\n\n\n\n\n","category":"function"},{"location":"transmission/#entsoeAPI.total_capacity_already_allocated","page":"Transmission","title":"entsoeAPI.total_capacity_already_allocated","text":"total_capacity_already_allocated(contract_MarketAgreementType::String, in_Domain::Union{mappings.Area, String}, out_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime[, auctionCategory::String = \"\"])\n\nConstructs the HTTP request for the data of the total capacity already allocated over a certain border (article 12.1 C: https://transparency.entsoe.eu/content/static_content/Static%20content/knowledge%20base/data-views/transmission/Data-view%20Explicit%20Allocations%20-%20AAC.html). Parses the received HTTP response and returns the data in a dataframe.\n\n[time, capacity]\n\nMinimum time interval in query response ranges from part of day to year, depending on selected Contract_MarketAgreement.Type!\n\nArguments\n\ncontract_MarketAgreementType::String: The specification of the kind of the agreement, e.g. long term, daily contract. Used to distinguish between day ahead, week ahead, month ahead and year ahead forecasts.\nin_Domain::Union{mappings.Area, String}: The area where energy is going, can be represented as an Area object or a string with country code or direct code \nout_Domain::Union{mappings.Area, String}: The area where energy is coming from, can be represented as an Area object or a string with country code or direct code\nperiodStart::DateTime: Start date and time of the needed data\nperiodEnd::DateTime: End date and time of the needed data \nauctionCategory::String = \"\": The product category of an auction\n\n! 100 documents limit applies !\n\n\n\n\n\n","category":"function"},{"location":"transmission/#entsoeAPI.day_ahead_prices","page":"Transmission","title":"entsoeAPI.day_ahead_prices","text":"day_ahead_prices(domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)\n\nConstructs the HTTP request for the data of the day ahead prices in a certain area (article 12.1 D: https://transparency.entsoe.eu/content/static_content/Static%20content/knowledge%20base/data-views/transmission-domain/Data-view%20Day-ahead%20prices.html). Parses the received HTTP response and returns the data in a dataframe.\n\n[time, price]\n\nMinimum time interval in query response is one day!\n\nArguments\n\ndomain::Union{mappings.Area, String}: The area for which the data is needed, can be represented as an Area object or a string with country code or direct code\nperiodStart::DateTime: Start date and time of the needed data\nperiodEnd::DateTime: End date and time of the needed data \n\n! One year range limit applies !\n\n\n\n\n\n","category":"function"},{"location":"transmission/#entsoeAPI.implicit_auction_net_positions","page":"Transmission","title":"entsoeAPI.implicit_auction_net_positions","text":"implicit_auction_net_positions(businessType::String, contract_MarketAgreementType::String, domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)\n\nConstructs the HTTP request for the data of the net positions and congestion income of implictly allocated capacity over a certain border (article 12.1 E: https://transparency.entsoe.eu/content/static_content/Static%20content/knowledge%20base/data-views/transmission-domain/Data-view%20Intraday%20Flow%20Based%20Implicit%20Allocations%20-%20Congestion%20Income.html). Parses the received HTTP response and returns the data in a dataframe.\n\n[time, import/export, capacity]\n\nMinimum time interval in query response is one day!\n\nArguments\n\nbusinessType::String: The identification of the nature of the data.\ncontract_MarketAgreementType::String: The specification of the kind of the agreement, e.g. long term, daily contract. Used to distinguish between day ahead, week ahead, month ahead and year ahead forecasts.\nin_Domain::Union{mappings.Area, String}: The area where energy is going, can be represented as an Area object or a string with country code or direct code \nout_Domain::Union{mappings.Area, String}: The area where energy is coming from, can be represented as an Area object or a string with country code or direct code\nperiodStart::DateTime: Start date and time of the needed data\nperiodEnd::DateTime: End date and time of the needed data \n\n! One year range limit applies ! ! 100 documents limit applies !\n\n\n\n\n\n","category":"function"},{"location":"transmission/#entsoeAPI.implicit_auction_congestion_income","page":"Transmission","title":"entsoeAPI.implicit_auction_congestion_income","text":"implicit_auction_congestion_income(businessType::String, contract_MarketAgreementType::String, domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)\n\nConstructs the HTTP request for the data of the net positions and congestion income of implictly allocated capacity over a certain border (article 12.1 E: https://transparency.entsoe.eu/content/static_content/Static%20content/knowledge%20base/data-views/transmission-domain/Data-view%20Intraday%20Flow%20Based%20Implicit%20Allocations%20-%20Congestion%20Income.html). Parses the received HTTP response and returns the data in a dataframe.\n\n[time, price]\n\nMinimum time interval in query response is one day!\n\nArguments\n\nbusinessType::String: The identification of the nature of the data.\ncontract_MarketAgreementType::String: The specification of the kind of the agreement, e.g. long term, daily contract. Used to distinguish between day ahead, week ahead, month ahead and year ahead forecasts.\nin_Domain::Union{mappings.Area, String}: The area where energy is going, can be represented as an Area object or a string with country code or direct code \nout_Domain::Union{mappings.Area, String}: The area where energy is coming from, can be represented as an Area object or a string with country code or direct code\nperiodStart::DateTime: Start date and time of the needed data\nperiodEnd::DateTime: End date and time of the needed data \n\n! One year range limit applies ! ! 100 documents limit applies !\n\n\n\n\n\n","category":"function"},{"location":"transmission/#entsoeAPI.total_commercial_schedules","page":"Transmission","title":"entsoeAPI.total_commercial_schedules","text":"total_commercial_schedules(contract_MarketAgreementType::String, in_Domain::Union{mappings.Area, String}, out_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)\n\nConstructs the HTTP request for the data of the total or day ahead commercial schedules over a certain border (article 12.1 F: https://transparency.entsoe.eu/content/static_content/Static%20content/knowledge%20base/data-views/transmission-domain/Data-view%20Scheduled%20Commercial%20Exchanges%20-%20Day%20Ahead.html). Parses the received HTTP response and returns the data in a dataframe.\n\n[time, capacity]\n\nMinimum time interval in query response is one day!\n\nArguments\n\ncontract_MarketAgreementType::String: The specification of the kind of the agreement, e.g. long term, daily contract. Used to distinguish between day ahead, week ahead, month ahead and year ahead forecasts.\nin_Domain::Union{mappings.Area, String}: The area where energy is going, can be represented as an Area object or a string with country code or direct code \nout_Domain::Union{mappings.Area, String}: The area where energy is coming from, can be represented as an Area object or a string with country code or direct code\nperiodStart::DateTime: Start date and time of the needed data\nperiodEnd::DateTime: End date and time of the needed data \n\n! One year range limit applies !\n\n\n\n\n\n","category":"function"},{"location":"transmission/#entsoeAPI.physical_flows","page":"Transmission","title":"entsoeAPI.physical_flows","text":"phyiscal_flows(in_Domain::Union{mappings.Area, String}, out_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)\n\nConstructs the HTTP request for the data of the physical flows over a certain border (article 12.1 G: https://transparency.entsoe.eu/content/static_content/Static%20content/knowledge%20base/data-views/transmission-domain/Data-view%20Cross%20Border%20Physical%20Flows.html). Parses the received HTTP response and returns the data in a dataframe.\n\n[time, capacity]\n\nMinimum time interval in query response is MTU period!\n\nArguments\n\nin_Domain::Union{mappings.Area, String}: The area where energy is going, can be represented as an Area object or a string with country code or direct code \nout_Domain::Union{mappings.Area, String}: The area where energy is coming from, can be represented as an Area object or a string with country code or direct code\nperiodStart::DateTime: Start date and time of the needed data\nperiodEnd::DateTime: End date and time of the needed data \n\n! One year range limit applies !\n\n\n\n\n\n","category":"function"},{"location":"transmission/#entsoeAPI.capacity_allocated_outside_EU","page":"Transmission","title":"entsoeAPI.capacity_allocated_outside_EU","text":"capacity_allocated_outside_EU(auctionType::String, contract_MarketAgreementType::String, in_Domain::Union{mappings.Area, String}, out_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime[, auctionCategory::String = \"\", classificationSequence_AttributeInstanceComponentPosition::String = \"\"])\n\nConstructs the HTTP request for the data of the capacity allocated outside the EU over a certain border (article 12.1 H: https://transparency.entsoe.eu/content/static_content/Static%20content/knowledge%20base/data-views/transmission/Data-view%20Transfer%20Capacities%20Allocated%20with%20Third%20Countries.html). Parses the received HTTP response and returns the data in a dataframe.\n\n[time, capacity]\n\nMinimum time interval in query response ranges from part of day to year, depending on selected Contract_MarketAgreementType!\n\nArguments\n\nauctionType::String: The kind of the auction (e.g. implicit, explicit ...)\ncontract_MarketAgreementType::String: The specification of the kind of the agreement, e.g. long term, daily contract. Used to distinguish between day ahead, week ahead, month ahead and year ahead forecasts.\nin_Domain::Union{mappings.Area, String}: The area where energy is going, can be represented as an Area object or a string with country code or direct code \nout_Domain::Union{mappings.Area, String}: The area where energy is coming from, can be represented as an Area object or a string with country code or direct code\nperiodStart::DateTime: Start date and time of the needed data\nperiodEnd::DateTime: End date and time of the needed data \nauctionCategory::String = \"\": The product category of an auction\nclassificationSequence_AttributeInstanceComponentPosition::String = \"\": A sequential value representing a relative sequence number. A classification sequence is only provided in the case where there are several auctions in the same category and contract type.\n\n! 100 document limit applies !\n\n\n\n\n\n","category":"function"},{"location":"transmission/#GET-functions-1","page":"Transmission","title":"GET functions","text":"","category":"section"},{"location":"transmission/#","page":"Transmission","title":"Transmission","text":"entsoeAPI.GETconstructor.query_forecasted_capacity\nentsoeAPI.GETconstructor.query_offered_capacity\nentsoeAPI.GETconstructor.query_flowbased\nentsoeAPI.GETconstructor.query_intraday_transfer_limits\nentsoeAPI.GETconstructor.query_explicit_allocation_information_capacity\nentsoeAPI.GETconstructor.query_explicit_allocation_information_revenue\nentsoeAPI.GETconstructor.query_total_capacity_nominated\nentsoeAPI.GETconstructor.query_total_capacity_already_allocated\nentsoeAPI.GETconstructor.query_day_ahead_prices\nentsoeAPI.GETconstructor.query_implicit_auction_net_positions_and_congestion_income\nentsoeAPI.GETconstructor.query_total_commercial_schedules\nentsoeAPI.GETconstructor.query_physical_flows\nentsoeAPI.GETconstructor.query_capacity_allocated_outside_EU","category":"page"},{"location":"transmission/#entsoeAPI.GETconstructor.query_forecasted_capacity","page":"Transmission","title":"entsoeAPI.GETconstructor.query_forecasted_capacity","text":"query_forecasted_capacity(contract_MarketAgreementType::String, in_Domain::Union{mappings.Area, String}, out_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)\n\nConstructs the HTTP request for the data of the forecasted capacity over a certain border (article 11.1 A: https://transparency.entsoe.eu/content/staticcontent/Static%20content/knowledge%20base/data-views/transmission-domain/Data-view%20Forecasted%20Transfer%20Capacities%20-%20Day%20Ahead.html). Returns the received HTTP response, together with the used timezone. Minimum time interval in query response ranges from day to year, depending on selected ContractMarketAgreementType!\n\nArguments\n\ncontract_MarketAgreementType::String:The specification of the kind of the agreement, e.g. long term, daily contract. Used to distinguish between day ahead, week ahead, month ahead and year ahead forecasts.\nin_Domain::Union{mappings.Area, String}: The area where energy is going, can be represented as an Area object or a string with country code or direct code \nout_Domain::Union{mappings.Area, String}: The area where energy is coming from, can be represented as an Area object or a string with country code or direct code\nperiodStart::DateTime: Start date and time of the needed data\nperiodEnd::DateTime: End date and time of the needed data \n\n! One year range limit applies !\n\n\n\n\n\n","category":"function"},{"location":"transmission/#entsoeAPI.GETconstructor.query_offered_capacity","page":"Transmission","title":"entsoeAPI.GETconstructor.query_offered_capacity","text":"query_offered_capacity(auctionType::String, contract_MarketAgreementType::String, in_Domain::Union{mappings.Area, String}, out_Domain::Union{mappings.Area}, periodStart::DateTime, periodEnd::DateTime[, auctionCategory::String = \"\", update_DateAndOrTime::DateTime = DateTime(0), classificationSequence_AttributeInstanceComponentPosition::String = \"\"])\n\nConstructs the HTTP request for the data of the offered capacity over a certain border (article 11.1 A: https://transparency.entsoe.eu/content/staticcontent/Static%20content/knowledge%20base/data-views/transmission/Data-view%20Explicit%20Allocations%20-%20Intraday.html). Returns the received HTTP response, together with the used timezone. Minimum time interval in query response ranges from day to year, depending on selected ContractMarketAgreementType!\n\nArguments\n\nauctionType::String: The kind of the auction (e.g. implicit, explicit ...)\ncontract_MarketAgreementType::String: The specification of the kind of the agreement, e.g. long term, daily contract. Used to distinguish between day ahead, week ahead, month ahead and year ahead forecasts.\nin_Domain::Union{mappings.Area, String}: The area where energy is going, can be represented as an Area object or a string with country code or direct code \nout_Domain::Union{mappings.Area, String}: The area where energy is coming from, can be represented as an Area object or a string with country code or direct code\nperiodStart::DateTime: Start date and time of the needed data\nperiodEnd::DateTime: End date and time of the needed data \nauctionCategory::String = \"\": The product category of an auction\nupdate_DateAndOrTime::DateTime = \"\": The date and time of the update of the document\nclassificationSequence_AttributeInstanceComponentPosition::String = \"\": A sequential value representing a relative sequence number. A classification sequence is only provided in the case where there are several auctions in the same category and contract type.\n\n! 100 document limit applies !\n\n\n\n\n\n","category":"function"},{"location":"transmission/#entsoeAPI.GETconstructor.query_flowbased","page":"Transmission","title":"entsoeAPI.GETconstructor.query_flowbased","text":"query_flowbased(processType::String, domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)\n\nConstructs the HTTP request for the data of the flow-based parameters of a certain area (article 11.1 B: https://transparency.entsoe.eu/content/static_content/Static%20content/knowledge%20base/data-views/transmission-domain/Data-view%20Day%20Ahead%20Flow%20Based%20Allocations.html). Returns the received HTTP response, together with the used timezone. Minimum time interval in query response is one day for day-ahead allocations!\n\nArguments\n\nprocessType::String: The kind of the auction (e.g. implicit, explicit ...)\ndomain::Union{mappings.Area, String}: The area for which the data is needed, can be represented as an Area object or a string with country code or direct code \nperiodStart::DateTime: Start date and time of the needed data\nperiodEnd::DateTime: End date and time of the needed data \n\n! 100 document limit applies !\n\n\n\n\n\n","category":"function"},{"location":"transmission/#entsoeAPI.GETconstructor.query_intraday_transfer_limits","page":"Transmission","title":"entsoeAPI.GETconstructor.query_intraday_transfer_limits","text":"query_intraday_transfer_limits(in_Domain::Union{mappings.Area, String}, out_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)\n\nConstructs the HTTP request for the data of the intraday transfer limits over a certain border (article 11.3: https://transparency.entsoe.eu/content/static_content/Static%20content/knowledge%20base/data-views/transmission-domain/Data-view%20Cross%20Border%20Capacity%20of%20DC%20Links%20-%20Intraday%20Transfer%20Limits.html). Returns the received HTTP response, together with the used timezone. Minimum time interval in query response ranges from part of day up to one day!\n\nArguments\n\nin_Domain::Union{mappings.Area, String}: The area where energy is going, can be represented as an Area object or a string with country code or direct code \nout_Domain::Union{mappings.Area, String}: The area where energy is coming from, can be represented as an Area object or a string with country code or direct code\nperiodStart::DateTime: Start date and time of the needed data\nperiodEnd::DateTime: End date and time of the needed data \n\n! One year range limit applies !\n\n\n\n\n\n","category":"function"},{"location":"transmission/#entsoeAPI.GETconstructor.query_explicit_allocation_information_capacity","page":"Transmission","title":"entsoeAPI.GETconstructor.query_explicit_allocation_information_capacity","text":"query_explicit_allocation_information_capacity(businessType::String, contract_MarketAgreementType::String, in_Domain::Union{mappings.Area, String}, out_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime[, auctionCategory::String = \"\", classificationSequence_AttributeInstanceComponentPosition::String = \"\"])\n\nConstructs the HTTP request for the data of the capacity explicitly allocated to the market over a certain border and its revenue (article 12.1 A: https://transparency.entsoe.eu/content/staticcontent/Static%20content/knowledge%20base/data-views/transmission/Data-view%20Explicit%20Allocations%20-%20Day%20ahead.html). Returns the received HTTP response, together with the used timezone. Minimum time interval in query response ranges from part of day to year, depending on selected ContractMarketAgreementType!\n\nArguments\n\nbusinessType::String: The identification of the nature of the data\ncontract_MarketAgreementType::String: The specification of the kind of the agreement, e.g. long term, daily contract. Used to distinguish between day ahead, week ahead, month ahead and year ahead forecasts.\nin_Domain::Union{mappings.Area, String}: The area where energy is going, can be represented as an Area object or a string with country code or direct code \nout_Domain::Union{mappings.Area, String}: The area where energy is coming from, can be represented as an Area object or a string with country code or direct code\nperiodStart::DateTime: Start date and time of the needed data\nperiodEnd::DateTime: End date and time of the needed data \nauctionCategory::String = \"\": The product category of an auction\nclassificationSequence_AttributeInstanceComponentPosition::String = \"\": A sequential value representing a relative sequence number. A classification sequence is only provided in the case where there are several auctions in the same category and contract type.\n\n! 100 document limit applies !\n\n\n\n\n\n","category":"function"},{"location":"transmission/#entsoeAPI.GETconstructor.query_explicit_allocation_information_revenue","page":"Transmission","title":"entsoeAPI.GETconstructor.query_explicit_allocation_information_revenue","text":"query_explicit_allocation_information_revenue(contract_MarketAgreementType::String, in_Domain::Union{mappings.Area, String}, out_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)\n\nConstructs the HTTP request for the data of the revenue of the capacity explicitly allocated to the market over a certain border (article 12.1 A: https://transparency.entsoe.eu/content/staticcontent/Static%20content/knowledge%20base/data-views/transmission-domain/Data-view%20Explicit%20Allocations%20Revenue.html). Returns the received HTTP response, together with the used timezone. Minimum time interval in query response ranges from part of day to year, depending on selected ContractMarketAgreementType!\n\nArguments\n\ncontract_MarketAgreementType::String: The specification of the kind of the agreement, e.g. long term, daily contract. Used to distinguish between day ahead, week ahead, month ahead and year ahead forecasts.\nin_Domain::Union{mappings.Area, String}: The area where energy is going, can be represented as an Area object or a string with country code or direct code \nout_Domain::Union{mappings.Area, String}: The area where energy is coming from, can be represented as an Area object or a string with country code or direct code\nperiodStart::DateTime: Start date and time of the needed data\nperiodEnd::DateTime: End date and time of the needed data \n\n! 100 document limit applies !\n\n\n\n\n\n","category":"function"},{"location":"transmission/#entsoeAPI.GETconstructor.query_total_capacity_nominated","page":"Transmission","title":"entsoeAPI.GETconstructor.query_total_capacity_nominated","text":"query_total_capacity_nominated(in_Domain::Union{mappings.Area, String}, out_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)\n\nConstructs the HTTP request for the data of the total nominated capacity over a certain border (article 12.1 B: https://transparency.entsoe.eu/content/static_content/Static%20content/knowledge%20base/data-views/transmission-domain/Data-view%20Total%20Nominated%20Capacity.html). Returns the received HTTP response, together with the used timezone. Minimum time interval in query response is one day!\n\nArguments\n\nin_Domain::Union{mappings.Area, String}: The area where energy is going, can be represented as an Area object or a string with country code or direct code \nout_Domain::Union{mappings.Area, String}: The area where energy is coming from, can be represented as an Area object or a string with country code or direct code\nperiodStart::DateTime: Start date and time of the needed data\nperiodEnd::DateTime: End date and time of the needed data \n\n! One year range limit applies !\n\n\n\n\n\n","category":"function"},{"location":"transmission/#entsoeAPI.GETconstructor.query_total_capacity_already_allocated","page":"Transmission","title":"entsoeAPI.GETconstructor.query_total_capacity_already_allocated","text":"query_total_capacity_already_allocated(contract_MarketAgreementType::String, in_Domain::Union{mappings.Area, String}, out_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime[, auctionCategory::String = \"\"])\n\nConstructs the HTTP request for the data of the total capacity already allocated over a certain border (article 12.1 C: https://transparency.entsoe.eu/content/staticcontent/Static%20content/knowledge%20base/data-views/transmission/Data-view%20Explicit%20Allocations%20-%20AAC.html). Returns the received HTTP response, together with the used timezone. Minimum time interval in query response ranges from part of day to year, depending on selected ContractMarketAgreement.Type!\n\nArguments\n\ncontract_MarketAgreementType::String: The specification of the kind of the agreement, e.g. long term, daily contract. Used to distinguish between day ahead, week ahead, month ahead and year ahead forecasts.\nin_Domain::Union{mappings.Area, String}: The area where energy is going, can be represented as an Area object or a string with country code or direct code \nout_Domain::Union{mappings.Area, String}: The area where energy is coming from, can be represented as an Area object or a string with country code or direct code\nperiodStart::DateTime: Start date and time of the needed data\nperiodEnd::DateTime: End date and time of the needed data \nauctionCategory::String = \"\": The product category of an auction\n\n! 100 documents limit applies !\n\n\n\n\n\n","category":"function"},{"location":"transmission/#entsoeAPI.GETconstructor.query_day_ahead_prices","page":"Transmission","title":"entsoeAPI.GETconstructor.query_day_ahead_prices","text":"query_day_ahead_prices(domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)\n\nConstructs the HTTP request for the data of the day ahead prices in a certain area (article 12.1 D: https://transparency.entsoe.eu/content/static_content/Static%20content/knowledge%20base/data-views/transmission-domain/Data-view%20Day-ahead%20prices.html). Returns the received HTTP response, together with the used timezone. Minimum time interval in query response is one day!\n\nArguments\n\ndomain::Union{mappings.Area, String}: The area for which the data is needed, can be represented as an Area object or a string with country code or direct code\nperiodStart::DateTime: Start date and time of the needed data\nperiodEnd::DateTime: End date and time of the needed data \n\n! One year range limit applies !\n\n\n\n\n\n","category":"function"},{"location":"transmission/#entsoeAPI.GETconstructor.query_implicit_auction_net_positions_and_congestion_income","page":"Transmission","title":"entsoeAPI.GETconstructor.query_implicit_auction_net_positions_and_congestion_income","text":"query_implicit_auction_net_positions_and_congestion_income(businessType::String, contract_MarketAgreementType::String, domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)\n\nConstructs the HTTP request for the data of the net positions and congestion income of implictly allocated capacity over a certain border (article 12.1 E: https://transparency.entsoe.eu/content/static_content/Static%20content/knowledge%20base/data-views/transmission-domain/Data-view%20Intraday%20Flow%20Based%20Implicit%20Allocations%20-%20Congestion%20Income.html). Returns the received HTTP response, together with the used timezone. Minimum time interval in query response is one day!\n\nArguments\n\nbusinessType::String: The identification of the nature of the data.\ncontract_MarketAgreementType::String: The specification of the kind of the agreement, e.g. long term, daily contract. Used to distinguish between day ahead, week ahead, month ahead and year ahead forecasts.\nin_Domain::Union{mappings.Area, String}: The area where energy is going, can be represented as an Area object or a string with country code or direct code \nout_Domain::Union{mappings.Area, String}: The area where energy is coming from, can be represented as an Area object or a string with country code or direct code\nperiodStart::DateTime: Start date and time of the needed data\nperiodEnd::DateTime: End date and time of the needed data \n\n! One year range limit applies ! ! 100 documents limit applies !\n\n\n\n\n\n","category":"function"},{"location":"transmission/#entsoeAPI.GETconstructor.query_total_commercial_schedules","page":"Transmission","title":"entsoeAPI.GETconstructor.query_total_commercial_schedules","text":"query_total_commercial_schedules(contract_MarketAgreementType::String, in_Domain::Union{mappings.Area, String}, out_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)\n\nConstructs the HTTP request for the data of the total or day ahead commercial schedules over a certain border (article 12.1 F: https://transparency.entsoe.eu/content/static_content/Static%20content/knowledge%20base/data-views/transmission-domain/Data-view%20Scheduled%20Commercial%20Exchanges%20-%20Day%20Ahead.html). Returns the received HTTP response, together with the used timezone. Minimum time interval in query response is one day!\n\nArguments\n\ncontract_MarketAgreementType::String: The specification of the kind of the agreement, e.g. long term, daily contract. Used to distinguish between day ahead, week ahead, month ahead and year ahead forecasts.\nin_Domain::Union{mappings.Area, String}: The area where energy is going, can be represented as an Area object or a string with country code or direct code \nout_Domain::Union{mappings.Area, String}: The area where energy is coming from, can be represented as an Area object or a string with country code or direct code\nperiodStart::DateTime: Start date and time of the needed data\nperiodEnd::DateTime: End date and time of the needed data \n\n! One year range limit applies !\n\n\n\n\n\n","category":"function"},{"location":"transmission/#entsoeAPI.GETconstructor.query_physical_flows","page":"Transmission","title":"entsoeAPI.GETconstructor.query_physical_flows","text":"query_physical_flows(in_Domain::Union{mappings.Area, String}, out_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)\n\nConstructs the HTTP request for the data of the physical flows over a certain border (article 12.1 G: https://transparency.entsoe.eu/content/static_content/Static%20content/knowledge%20base/data-views/transmission-domain/Data-view%20Cross%20Border%20Physical%20Flows.html). Returns the received HTTP response, together with the used timezone. Minimum time interval in query response is MTU period!\n\nArguments\n\nin_Domain::Union{mappings.Area, String}: The area where energy is going, can be represented as an Area object or a string with country code or direct code \nout_Domain::Union{mappings.Area, String}: The area where energy is coming from, can be represented as an Area object or a string with country code or direct code\nperiodStart::DateTime: Start date and time of the needed data\nperiodEnd::DateTime: End date and time of the needed data \n\n! One year range limit applies !\n\n\n\n\n\n","category":"function"},{"location":"transmission/#entsoeAPI.GETconstructor.query_capacity_allocated_outside_EU","page":"Transmission","title":"entsoeAPI.GETconstructor.query_capacity_allocated_outside_EU","text":"query_capacity_allocated_outside_EU(auctionType::String, contract_MarketAgreementType::String, in_Domain::Union{mappings.Area, String}, out_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime[, auctionCategory::String = \"\", classificationSequence_AttributeInstanceComponentPosition::String = \"\"])\n\nConstructs the HTTP request for the data of the capacity allocated outside the EU over a certain border (article 12.1 H: https://transparency.entsoe.eu/content/staticcontent/Static%20content/knowledge%20base/data-views/transmission/Data-view%20Transfer%20Capacities%20Allocated%20with%20Third%20Countries.html). Returns the received HTTP response, together with the used timezone. Minimum time interval in query response ranges from part of day to year, depending on selected ContractMarketAgreementType!\n\nArguments\n\nauctionType::String: The kind of the auction (e.g. implicit, explicit ...)\ncontract_MarketAgreementType::String: The specification of the kind of the agreement, e.g. long term, daily contract. Used to distinguish between day ahead, week ahead, month ahead and year ahead forecasts.\nin_Domain::Union{mappings.Area, String}: The area where energy is going, can be represented as an Area object or a string with country code or direct code \nout_Domain::Union{mappings.Area, String}: The area where energy is coming from, can be represented as an Area object or a string with country code or direct code\nperiodStart::DateTime: Start date and time of the needed data\nperiodEnd::DateTime: End date and time of the needed data \nauctionCategory::String = \"\": The product category of an auction\nclassificationSequence_AttributeInstanceComponentPosition::String = \"\": A sequential value representing a relative sequence number. A classification sequence is only provided in the case where there are several auctions in the same category and contract type.\n\n! 100 document limit applies !\n\n\n\n\n\n","category":"function"},{"location":"transmission/#Parse-functions-1","page":"Transmission","title":"Parse functions","text":"","category":"section"},{"location":"transmission/#","page":"Transmission","title":"Transmission","text":"entsoeAPI.xmlParser.parse_forecasted_capacity\nentsoeAPI.xmlParser.parse_offered_capacity\nentsoeAPI.xmlParser.parse_flowbased\nentsoeAPI.xmlParser.parse_intraday_transfer_limits\nentsoeAPI.xmlParser.parse_explicit_allocation_information_capacity\nentsoeAPI.xmlParser.parse_explicit_allocation_information_revenue\nentsoeAPI.xmlParser.parse_total_capacity_nominated\nentsoeAPI.xmlParser.parse_total_capacity_already_allocated\nentsoeAPI.xmlParser.parse_day_ahead_prices\nentsoeAPI.xmlParser.parse_implicit_auction_net_positions\nentsoeAPI.xmlParser.parse_implicit_auction_congestion_income\nentsoeAPI.xmlParser.parse_total_commercial_schedules\nentsoeAPI.xmlParser.parse_physical_flows\nentsoeAPI.xmlParser.parse_capacity_allocated_outside_EU","category":"page"},{"location":"transmission/#entsoeAPI.xmlParser.parse_forecasted_capacity","page":"Transmission","title":"entsoeAPI.xmlParser.parse_forecasted_capacity","text":"parse_forecasted_capacity(xml::Vector{UInt8}, tz::TimeZone)\n\nParses the xml file generated by the function GETconstructor.query_forecasted_capacity(contract_MarketAgreementType::String, in_Domain::Union{mappings.Area, String}, out_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime). Returns the data in a dataframe.\n\n[time, capacity]\n\nArguments\n\nxml::Vector{UInt8}: xml data in the format as returned by the function GETconstructor.query_forecasted_capacity(contract_MarketAgreementType::String, in_Domain::Union{mappings.Area, String}, out_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)\ntz::TimeZone: Timezone in which the dates and times have to be represented\n\n\n\n\n\n","category":"function"},{"location":"transmission/#entsoeAPI.xmlParser.parse_offered_capacity","page":"Transmission","title":"entsoeAPI.xmlParser.parse_offered_capacity","text":"parse_offered_capacity(xml::Vector{UInt8}, tz::TimeZone)\n\nParses the xml file generated by the function GETconstructor.query_offered_capacity(auctionType::String, contract_MarketAgreementType::String, in_Domain::Union{mappings.Area, String}, out_Domain::Union{mappings.Area}, periodStart::DateTime, periodEnd::DateTime[, auctionCategory::String = \"\", update_DateAndOrTime::DateTime = DateTime(0), classificationSequence_AttributeInstanceComponentPosition::String = \"\"]). Returns the data in a dataframe.\n\n[time, capacity]\n\nArguments\n\nxml::Vector{UInt8}: xml data in the format as returned by the function GETconstructor.query_offered_capacity(auctionType::String, contract_MarketAgreementType::String, in_Domain::Union{mappings.Area, String}, out_Domain::Union{mappings.Area}, periodStart::DateTime, periodEnd::DateTime[, auctionCategory::String = \"\", update_DateAndOrTime::DateTime = DateTime(0), classificationSequence_AttributeInstanceComponentPosition::String = \"\"])\ntz::TimeZone: Timezone in which the dates and times have to be represented\n\n\n\n\n\n","category":"function"},{"location":"transmission/#entsoeAPI.xmlParser.parse_flowbased","page":"Transmission","title":"entsoeAPI.xmlParser.parse_flowbased","text":"parse_flowbased(xml::Vector{UInt8}, tz::TimeZone)\n\nParses the xml file generated by the function GETconstructor.query_flowbased(processType::String, domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime). Returns the data in dictionary.\n\n(\"time\" => [cb/co, RAM, domain, ..., domain])\n\nArguments\n\nxml::Vector{UInt8}: xml data in the format as returned by the function GETconstructor.query_flowbased(processType::String, domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)\ntz::TimeZone: Timezone in which the dates and times have to be represented\n\n\n\n\n\n","category":"function"},{"location":"transmission/#entsoeAPI.xmlParser.parse_intraday_transfer_limits","page":"Transmission","title":"entsoeAPI.xmlParser.parse_intraday_transfer_limits","text":"parse_intraday_transfer_limits(xml::Vector{UInt8}, tz::TimeZone)\n\nParses the xml file generated by the function GETconstructor.query_intraday_transfer_limits(in_Domain::Union{mappings.Area, String}, out_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime). Returns the data in a dataframe.\n\n[time, capacity]\n\nArguments\n\nxml::Vector{UInt8}: xml data in the format as returned by the function GETconstructor.query_intraday_transfer_limits(in_Domain::Union{mappings.Area, String}, out_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)\ntz::TimeZone: Timezone in which the dates and times have to be represented\n\n\n\n\n\n","category":"function"},{"location":"transmission/#entsoeAPI.xmlParser.parse_explicit_allocation_information_capacity","page":"Transmission","title":"entsoeAPI.xmlParser.parse_explicit_allocation_information_capacity","text":"parse_explicit_allocation_information_capacity(xml::Vector{UInt8}, tz::TimeZone)\n\nParses the xml file generated by the function GETconstructor.query_explicit_allocation_information_capacity(businessType::String, contract_MarketAgreementType::String, in_Domain::Union{mappings.Area, String}, out_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime[, auctionCategory::String = \"\", classificationSequence_AttributeInstanceComponentPosition::String = \"\"]). Returns the data in a dataframe.\n\n[time, capacity [, price]]\n\nArguments\n\nxml::Vector{UInt8}: xml data in the format as returned by the function GETconstructor.query_explicit_allocation_information_capacity(businessType::String, contract_MarketAgreementType::String, in_Domain::Union{mappings.Area, String}, out_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime[, auctionCategory::String = \"\", classificationSequence_AttributeInstanceComponentPosition::String = \"\"])\ntz::TimeZone: Timezone in which the dates and times have to be represented\n\n\n\n\n\n","category":"function"},{"location":"transmission/#entsoeAPI.xmlParser.parse_explicit_allocation_information_revenue","page":"Transmission","title":"entsoeAPI.xmlParser.parse_explicit_allocation_information_revenue","text":"parse_explicit_allocation_information_revenue(xml::Vector{UInt8}, tz::TimeZone)\n\nParses the xml file generated by the function GETconstructor.query_explicit_allocation_information_revenue(contract_MarketAgreementType::String, in_Domain::Union{mappings.Area, String}, out_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime) Returns the data in a dataframe.\n\n[time, price]\n\nArguments\n\nxml::Vector{UInt8}: xml data in the format as returned by the function GETconstructor.query_explicit_allocation_information_revenue(contract_MarketAgreementType::String, in_Domain::Union{mappings.Area, String}, out_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)\ntz::TimeZone: Timezone in which the dates and times have to be represented\n\n\n\n\n\n","category":"function"},{"location":"transmission/#entsoeAPI.xmlParser.parse_total_capacity_nominated","page":"Transmission","title":"entsoeAPI.xmlParser.parse_total_capacity_nominated","text":"parse_total_capacity_nominated(xml::Vector{UInt8}, tz::TimeZone)\n\nParses the xml file generated by the function GETconstructor.query_total_capacity_nominated(in_Domain::Union{mappings.Area, String}, out_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime). Returns the data in a dataframe.\n\n[time, capacity]\n\nArguments\n\n- `xml::Vector{UInt8}`: xml data in the format as returned by the function `GETconstructor.query_total_capacity_nominated(in_Domain::Union{mappings.Area, String}, out_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)`\n- `tz::TimeZone`: Timezone in which the dates and times have to be represented\n\n\n\n\n\n","category":"function"},{"location":"transmission/#entsoeAPI.xmlParser.parse_total_capacity_already_allocated","page":"Transmission","title":"entsoeAPI.xmlParser.parse_total_capacity_already_allocated","text":"parse_total_capacity_already_allocated(xml::Vector{UInt8}, tz::TimeZone)\n\nParses the xml file generated by the function GETconstructor.query_total_capacity_already_allocated(contract_MarketAgreementType::String, in_Domain::Union{mappings.Area, String}, out_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime[, auctionCategory::String = \"\"]). Returns the data in a dataframe.\n\n[time, capacity]\n\nArguments\n\nxml::Vector{UInt8}: xml data in the format as returned by the function GETconstructor.query_total_capacity_already_allocated(contract_MarketAgreementType::String, in_Domain::Union{mappings.Area, String}, out_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime[, auctionCategory::String = \"\"])\ntz::TimeZone: Timezone in which the dates and times have to be represented\n\n\n\n\n\n","category":"function"},{"location":"transmission/#entsoeAPI.xmlParser.parse_day_ahead_prices","page":"Transmission","title":"entsoeAPI.xmlParser.parse_day_ahead_prices","text":"parse_day_ahead_prices(xml::Vector{UInt8}, tz::TimeZone)\n\nParses the xml file generated by the function GETconstructor.query_day_ahead_prices(domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime). Returns the data in a dataframe.\n\n[time, capacity]\n\nArguments\n\nxml::Vector{UInt8}: xml data in the format as returned by the function GETconstructor.query_day_ahead_prices(domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)\ntz::TimeZone: Timezone in which the dates and times have to be represented\n\n\n\n\n\n","category":"function"},{"location":"transmission/#entsoeAPI.xmlParser.parse_implicit_auction_net_positions","page":"Transmission","title":"entsoeAPI.xmlParser.parse_implicit_auction_net_positions","text":"parse_implicit_auction_net_positions(xml::Vector{UInt8}, tz::TimeZone)\n\nParses the xml file generated by the function GETconstructor.query_implicit_auction_net_positions_and_congestion_income(businessType::String, contract_MarketAgreementType::String, domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime), in case the option 'net positions' is chosen. Returns the data in a dataframe.\n\n[time, import/export, capacity]\n\nArguments\n\nxml::Vector{UInt8}: xml data in the format as returned by the function GETconstructor.query_implicit_auction_net_positions_and_congestion_income(businessType::String, contract_MarketAgreementType::String, domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)\ntz::TimeZone: Timezone in which the dates and times have to be represented\n\n\n\n\n\n","category":"function"},{"location":"transmission/#entsoeAPI.xmlParser.parse_implicit_auction_congestion_income","page":"Transmission","title":"entsoeAPI.xmlParser.parse_implicit_auction_congestion_income","text":"parse_implicit_auction_congestion_income(xml::Vector{UInt8}, tz::TimeZone)\n\nParses the xml file generated by the function GETconstructor.query_implicit_auction_net_positions_and_congestion_income(businessType::String, contract_MarketAgreementType::String, domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime), in case the option 'congestion income' is chosen. Returns the data in a dataframe.\n\n[time, price]\n\nArguments\n\nxml::Vector{UInt8}: xml data in the format as returned by the function GETconstructor.query_implicit_auction_net_positions_and_congestion_income(businessType::String, contract_MarketAgreementType::String, domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)\ntz::TimeZone: Timezone in which the dates and times have to be represented\n\n\n\n\n\n","category":"function"},{"location":"transmission/#entsoeAPI.xmlParser.parse_total_commercial_schedules","page":"Transmission","title":"entsoeAPI.xmlParser.parse_total_commercial_schedules","text":"parse_total_commercial_schedules(xml::Vector{UInt8}, tz::TimeZone)\n\nParses the xml file generated by the function GETconstructor.query_total_commercial_schedules(contract_MarketAgreementType::String, in_Domain::Union{mappings.Area, String}, out_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime). Returns the data in a dataframe.\n\n[time, capacity]\n\nArguments\n\nxml::Vector{UInt8}: xml data in the format as returned by the function GETconstructor.query_total_commercial_schedules(contract_MarketAgreementType::String, in_Domain::Union{mappings.Area, String}, out_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)\ntz::TimeZone: Timezone in which the dates and times have to be represented\n\n\n\n\n\n","category":"function"},{"location":"transmission/#entsoeAPI.xmlParser.parse_physical_flows","page":"Transmission","title":"entsoeAPI.xmlParser.parse_physical_flows","text":"parse_physical_flows(xml::Vector{UInt8}, tz::TimeZone)\n\nParses the xml file generated by the function GETconstructor.query_phyiscal_flows(in_Domain::Union{mappings.Area, String}, out_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime). Returns the data in a dataframe.\n\n[time, capacity]\n\nArguments\n\nxml::Vector{UInt8}: xml data in the format as returned by the function GETconstructor.query_phyiscal_flows(in_Domain::Union{mappings.Area, String}, out_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)\ntz::TimeZone: Timezone in which the dates and times have to be represented\n\n\n\n\n\n","category":"function"},{"location":"transmission/#entsoeAPI.xmlParser.parse_capacity_allocated_outside_EU","page":"Transmission","title":"entsoeAPI.xmlParser.parse_capacity_allocated_outside_EU","text":"parse_capacity_allocated_outside_EU(xml::Vector{UInt8}, tz::TimeZone)\n\nParses the xml file generated by the function GETconstructor.query_capacity_allocated_outside_EU(auctionType::String, contract_MarketAgreementType::String, in_Domain::Union{mappings.Area, String}, out_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime[, auctionCategory::String = \"\", classificationSequence_AttributeInstanceComponentPosition::String = \"\"]). Returns the data in a dataframe.\n\n[time, capacity]\n\nArguments\n\nxml::Vector{UInt8}: xml data in the format as returned by the function GETconstructor.query_capacity_allocated_outside_EU(auctionType::String, contract_MarketAgreementType::String, in_Domain::Union{mappings.Area, String}, out_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime[, auctionCategory::String = \"\", classificationSequence_AttributeInstanceComponentPosition::String = \"\"])\ntz::TimeZone: Timezone in which the dates and times have to be represented\n\n\n\n\n\n","category":"function"},{"location":"balancing/#Balancing-functions-1","page":"Balancing","title":"Balancing functions","text":"","category":"section"},{"location":"balancing/#","page":"Balancing","title":"Balancing","text":"This file describes the usage of all the functions under the balancing tab in the ENTSOE-E transparancy platform.","category":"page"},{"location":"balancing/#User-functions-1","page":"Balancing","title":"User functions","text":"","category":"section"},{"location":"balancing/#","page":"Balancing","title":"Balancing","text":"entsoeAPI.current_balancing_state\nentsoeAPI.balancing_energy_bids\nentsoeAPI.aggregated_balancing_energy_bids\nentsoeAPI.procured_balancing_capacity\nentsoeAPI.crossZonal_balancing_capacity\nentsoeAPI.volumes_and_prices_contracted_reserves\nentsoeAPI.volumes_contracted_reserves\nentsoeAPI.prices_contracted_reserves\nentsoeAPI.accepted_aggregated_offers\nentsoeAPI.activated_balancing_energy\nentsoeAPI.prices_activated_balancing_energy\nentsoeAPI.imbalance_prices\nentsoeAPI.total_imbalance_volumes\nentsoeAPI.financial_expenses\nentsoeAPI.crossBorder_balancing\nentsoeAPI.FCR_total_capacity\nentsoeAPI.share_capacity_FCR\nentsoeAPI.contracted_reserve_capacity_FCR\nentsoeAPI.FRR_actual_capacity\nentsoeAPI.RR_actual_capacity\nentsoeAPI.sharing_of_reserves\nentsoeAPI.balancing_border_capacity_limitations\nentsoeAPI.permanent_allocation_limitations_HVDC\nentsoeAPI.netted_and_exchanged_volumes","category":"page"},{"location":"balancing/#entsoeAPI.current_balancing_state","page":"Balancing","title":"entsoeAPI.current_balancing_state","text":"current_balancing_state(area_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)\n\nConstructs the HTTP request for the data about the current balancing state in a certain area (article GL EB 12.3 A). Parses the received HTTP response and returns the data in a dataframe.\n\n[start, end, situation, open loop ace]\n\nArguments\n\narea_Domain::Union{mappings.Area, String}: The area for which the data is needed, can be represented as an Area object or a string with country code or direct code\nperiodStart::DateTime: Start date and time of the needed data\nperiodEnd::DateTime: End date and time of the needed data \n\n! 100 day range limit applies !\n\n\n\n\n\n","category":"function"},{"location":"balancing/#entsoeAPI.balancing_energy_bids","page":"Balancing","title":"entsoeAPI.balancing_energy_bids","text":"balancing_energy_bids(area_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime, processType::String)\n\nConstructs the HTTP request for the data about the balancing energy bids in a certain area (article GL EB 12.3 B-D). Parses the received HTTP response and returns the data in a dataframe.\n\nNOT IMPLEMENTED YET\n\nArguments\n\nprocessType::String: identifies the type of processing to be carried out on the information\narea_Domain::Union{mappings.Area, String}: The area for which the data is needed, can be represented as an Area object or a string with country code or direct code\nperiodStart::DateTime: Start date and time of the needed data\nperiodEnd::DateTime: End date and time of the needed data \n\n! 1 day range limit applies !\n\n\n\n\n\n","category":"function"},{"location":"balancing/#entsoeAPI.aggregated_balancing_energy_bids","page":"Balancing","title":"entsoeAPI.aggregated_balancing_energy_bids","text":"aggregated_balancing_energy_bids(area_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime, processType::String)\n\nConstructs the HTTP request for the data about the aggregated balancing energy bids in a certain area (article GL EB 12.3 E: https://transparency.entsoe.eu/content/static_content/Static%20content/knowledge%20base/data-views/balancing/Data-view%20Aggregated%20Bids.html). Parses the received HTTP response and returns the data in a dataframe.\n\n[start, end, type of product, direction, offered, activated, unavailable]\n\nArguments\n\narea_Domain::Union{mappings.Area, String}: The area for which the data is needed, can be represented as an Area object or a string with country code or direct code\nperiodStart::DateTime: Start date and time of the needed data\nperiodEnd::DateTime: End date and time of the needed data \nprocessType::String:  identifies the type of processing to be carried out on the information\n\n! One year range limit applies !\n\n\n\n\n\n","category":"function"},{"location":"balancing/#entsoeAPI.procured_balancing_capacity","page":"Balancing","title":"entsoeAPI.procured_balancing_capacity","text":"procured_balancing_capacity(area_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime[, type_MarketAgreementType::String = \"\"])\n\nConstructs the HTTP request for the data about the produced balancing capacity in a certain area (article GL EB 12.3 F: https://transparency.entsoe.eu/content/static_content/Static%20content/knowledge%20base/data-views/balancing/Data-view%20Procured%20Capacity.html). Parses the received HTTP response and returns the data in a dataframe.\n\nNOT IMPLEMENTED YET\n\nArguments\n\narea_Domain::Union{mappings.Area, String}: The area for which the data is needed, can be represented as an Area object or a string with country code or direct code\nperiodStart::DateTime: Start date and time of the needed data\nperiodEnd::DateTime: End date and time of the needed data \ntype_MarketAgreementType::String = \"\": Indicates the time horizon for which balancing capacity was procured\n\n! 100 document limit applies !\n\n\n\n\n\n","category":"function"},{"location":"balancing/#entsoeAPI.crossZonal_balancing_capacity","page":"Balancing","title":"entsoeAPI.crossZonal_balancing_capacity","text":"crossZonal_balancing_capacity(acquiring_Domain::Union{mappings.Area, String}, connecting_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)\n\nConstructs the HTTP request for the data about the use of the allocated cross-zonal balancing capacity over a certain border (article GL EB 12.3 H&I: https://transparency.entsoe.eu/content/static_content/Static%20content/knowledge%20base/data-views/balancing/Data-view%20Use%20of%20allocated%20cross-zonal%20balancing%20capacity.html). Parses the received HTTP response and returns the data in a dataframe.\n\nNOT IMPLEMENTED YET\n\nArguments\n\nacquiring_Domain::Union{mappings.Area, String}: \nconnecting_Domain::Union{mappings.Area, String}: \nperiodStart::DateTime: Start date and time of the needed data\nperiodEnd::DateTime: End date and time of the needed data \ntype_MarketAgreementType::String = \"\": Indicates the time horizon for which balancing capacity was procured\n\n\n\n\n\n","category":"function"},{"location":"balancing/#entsoeAPI.volumes_and_prices_contracted_reserves","page":"Balancing","title":"entsoeAPI.volumes_and_prices_contracted_reserves","text":"volumes_and_prices_contracted_reserves(type_MarketAgreementType::String, processType::String, controlArea_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime[, psrType::String = \"\", offset::Int = 0])\n\nConstructs the HTTP request for the data about the prices and the volumes of the contracted reserves in a certain area (article 17.1 B&C). Parses the received HTTP response and returns the data in a dataframe.\n\nNOT IMPLEMENTED YET\n\nMinimum time interval in query response ranges from part of day to year, depending on selected Type_MarketAgreement.Type!\n\nArguments\n\ntype_MarketAgreementType::String: Indicates the time horizon for which balancing capacity was procured\nprocessType::String:  identifies the type of processing to be carried out on the information\ncontrolArea_Domain::Union{mappings.Area, String}: The area for which the data is needed, can be represented as an Area object or a string with country code or direct code\nperiodStart::DateTime: Start date and time of the needed data\nperiodEnd::DateTime: End date and time of the needed data \npsrType::String = \"\": The coded type of a power system resource. The classification for the asset.\noffset::Int = 0: allows downloading more than 100 documents. The offset ∈ [0,4800] so that paging is restricted to query for 4900 documents max., offset=n returns files in sequence between n+1 and n+100\n\n! 100 document limit applies !\n\n\n\n\n\n","category":"function"},{"location":"balancing/#entsoeAPI.volumes_contracted_reserves","page":"Balancing","title":"entsoeAPI.volumes_contracted_reserves","text":"volumes_contracted_reserves(type_MarketAgreementType::String, controlArea_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime[, businessType::String = \"\", psrType::String = \"\", offset::Int = 0])\n\nConstructs the HTTP request for the data about the volumes of the contracted reserves in a certain area (article 17.1 B: https://transparency.entsoe.eu/content/static_content/Static%20content/knowledge%20base/data-views/balancing/Data-view%20Volumes%20of%20Contracted%20Balancing%20Reserves.html). Parses the received HTTP response and returns the data in a dataframe.\n\n[start, end, reserve type, regulation volume, direction]\n\nMinimum time interval in query response ranges from part of day to year, depending on selected Type_MarketAgreement.Type!\n\nArguments\n\ntype_MarketAgreementType::String: Indicates the time horizon for which balancing capacity was procured\ncontrolArea_Domain::Union{mappings.Area, String}: The area for which the data is needed, can be represented as an Area object or a string with country code or direct code\nperiodStart::DateTime: Start date and time of the needed data\nperiodEnd::DateTime: End date and time of the needed data \nbusinessType::String = \"\": The identification of the nature of the data\npsrType::String = \"\": The coded type of a power system resource. The classification for the asset.\noffset::Int = 0: allows downloading more than 100 documents. The offset ∈ [0,4800] so that paging is restricted to query for 4900 documents max., offset=n returns files in sequence between n+1 and n+100\n\n! 100 document limit applies ! ! Doesn't work for hourly data due to some unclear reason... !\n\n\n\n\n\n","category":"function"},{"location":"balancing/#entsoeAPI.prices_contracted_reserves","page":"Balancing","title":"entsoeAPI.prices_contracted_reserves","text":"prices_contracted_reserves(type_MarketAgreementType::String, controlArea_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime[, businessType::String = \"\", psrType::String = \"\", offset::Int = 0])\n\nConstructs the HTTP request for the data about the prices of the contracted reserves in a certain area (article 17.1 C: https://transparency.entsoe.eu/content/static_content/Static%20content/knowledge%20base/data-views/balancing/Data-view%20Price%20of%20Reserved%20Balancing%20Reserves.html). Parses the received HTTP response and returns the data in a dataframe.\n\n[start, end, reserve type, regulation price, direction, price type]\n\nMinimum time interval in query response ranges from part of day to year, depending on selected Type_MarketAgreement.Type!\n\nArguments\n\ntype_MarketAgreementType::String: Indicates the time horizon for which balancing capacity was procured\ncontrolArea_Domain::Union{mappings.Area, String}: The area for which the data is needed, can be represented as an Area object or a string with country code or direct code\nperiodStart::DateTime: Start date and time of the needed data\nperiodEnd::DateTime: End date and time of the needed data \nbusinessType::String = \"\": The identification of the nature of the data\npsrType::String = \"\": The coded type of a power system resource. The classification for the asset.\noffset::Int = 0: allows downloading more than 100 documents. The offset ∈ [0,4800] so that paging is restricted to query for 4900 documents max., offset=n returns files in sequence between n+1 and n+100\n\n! 100 document limit applies !\n\n\n\n\n\n","category":"function"},{"location":"balancing/#entsoeAPI.accepted_aggregated_offers","page":"Balancing","title":"entsoeAPI.accepted_aggregated_offers","text":"accepted_aggregated_offers(controlArea_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime[, businessType::String = \"\", psrType::String = \"\"])\n\nConstructs the HTTP request for the data about the accepted aggregated offers in a certain area (article 17.1 D: https://transparency.entsoe.eu/content/static_content/Static%20content/knowledge%20base/data-views/balancing/Data-view%20Accepted%20Offers%20and%20Activated%20Balancing%20Reserves.html). Parses the received HTTP response and returns the data in a dataframe.\n\n[start, end, reserve type, source, activated reserves, direction]\n\nMinimum time interval in query response is one BTU period!\n\nArguments\n\ncontrolArea_Domain::Union{mappings.Area, String}: The area for which the data is needed, can be represented as an Area object or a string with country code or direct code\nperiodStart::DateTime: Start date and time of the needed data\nperiodEnd::DateTime: End date and time of the needed data \nbusinessType::String = \"\": The identification of the nature of the data\npsrType::String = \"\": The coded type of a power system resource. The classification for the asset.\n\n! One year range limit applies !\n\n\n\n\n\n","category":"function"},{"location":"balancing/#entsoeAPI.activated_balancing_energy","page":"Balancing","title":"entsoeAPI.activated_balancing_energy","text":"activated_balancing_energy(controlArea_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime[, businessType::String = \"\", psrType::String = \"\"])\n\nConstructs the HTTP request for the data about the activated balancing energy in a certain area (article 17.1 E: https://transparency.entsoe.eu/content/static_content/Static%20content/knowledge%20base/data-views/balancing/Data-view%20Accepted%20Offers%20and%20Activated%20Balancing%20Reserves.html). Parses the received HTTP response and returns the data in a dataframe.\n\n[start, end, reserve type, source, activated energy, direction]\n\nMinimum time interval in query response is one BTU period!\n\nArguments\n\ncontrolArea_Domain::Union{mappings.Area, String}: The area for which the data is needed, can be represented as an Area object or a string with country code or direct code\nperiodStart::DateTime: Start date and time of the needed data\nperiodEnd::DateTime: End date and time of the needed data \nbusinessType::String = \"\": The identification of the nature of the data\npsrType::String = \"\": The coded type of a power system resource. The classification for the asset.\n\n! One year range limit applies !\n\n\n\n\n\n","category":"function"},{"location":"balancing/#entsoeAPI.prices_activated_balancing_energy","page":"Balancing","title":"entsoeAPI.prices_activated_balancing_energy","text":"prices_activated_balancing_energy(controlArea_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime[, businessType::String = \"\", psrType::String = \"\"])\n\nConstructs the HTTP request for the data about the prices of the activated balancing energy in a certain area (article 17.1 F: https://transparency.entsoe.eu/content/static_content/Static%20content/knowledge%20base/data-views/balancing/Data-view%20Accepted%20Offers%20and%20Activated%20Balancing%20Reserves.html). Parses the received HTTP response and returns the data in a dataframe.\n\n[start, end, reserve type, source, price type, price, direction]\n\nMinimum time interval in query response is one BTU period!\n\nArguments\n\ncontrolArea_Domain::Union{mappings.Area, String}: The area for which the data is needed, can be represented as an Area object or a string with country code or direct code\nperiodStart::DateTime: Start date and time of the needed data\nperiodEnd::DateTime: End date and time of the needed data \nbusinessType::String = \"\": The identification of the nature of the data\npsrType::String = \"\": The coded type of a power system resource. The classification for the asset.\n\n! One year range limit applies !\n\n\n\n\n\n","category":"function"},{"location":"balancing/#entsoeAPI.imbalance_prices","page":"Balancing","title":"entsoeAPI.imbalance_prices","text":"imbalance_prices(controlArea_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)\n\nConstructs the HTTP request for the data about the imbalance prices in a certain area (article 17.1 G: https://transparency.entsoe.eu/content/static_content/Static%20content/knowledge%20base/data-views/balancing/Data-view%20Imbalance.html). Parses the received HTTP response and returns the data in a dataframe.\n\nNOT IMPLEMENTED YET\n\nMinimum time interval in query response is one BTU period!\n\nArguments\n\ncontrolArea_Domain::Union{mappings.Area, String}: The area for which the data is needed, can be represented as an Area object or a string with country code or direct code\nperiodStart::DateTime: Start date and time of the needed data\nperiodEnd::DateTime: End date and time of the needed data \n\n! One year range limit applies !\n\n\n\n\n\n","category":"function"},{"location":"balancing/#entsoeAPI.total_imbalance_volumes","page":"Balancing","title":"entsoeAPI.total_imbalance_volumes","text":"total_imbalance_volumes(controlArea_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)\n\nConstructs the HTTP request for the data about the imbalance volumes in a certain area (article 17.1 H: https://transparency.entsoe.eu/content/static_content/Static%20content/knowledge%20base/data-views/balancing/Data-view%20Imbalance.html). Parses the received HTTP response and returns the data in a dataframe.\n\n[start, end, volume, difference, situation, status]\n\nMinimum time interval in query response is one BTU period!\n\nArguments\n\ncontrolArea_Domain::Union{mappings.Area, String}: The area for which the data is needed, can be represented as an Area object or a string with country code or direct code\nperiodStart::DateTime: Start date and time of the needed data\nperiodEnd::DateTime: End date and time of the needed data \n\n! One year range limit applies !\n\n\n\n\n\n","category":"function"},{"location":"balancing/#entsoeAPI.financial_expenses","page":"Balancing","title":"entsoeAPI.financial_expenses","text":"financial_expenses(controlArea_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)\n\nConstructs the HTTP request for the data about the financial expenses and income for balancing in a certain area (article 17.1 I: https://transparency.entsoe.eu/content/static_content/Static%20content/knowledge%20base/data-views/balancing/Data-view%20Financial%20Expenses%20and%20Income.html). Parses the received HTTP response and returns the data in a dataframe.\n\n[start, end, income, expenses, status]\n\nMinimum time interval in query response is one month!\n\nArguments\n\ncontrolArea_Domain::Union{mappings.Area, String}: The area for which the data is needed, can be represented as an Area object or a string with country code or direct code\nperiodStart::DateTime: Start date and time of the needed data\nperiodEnd::DateTime: End date and time of the needed data \n\n! One year range limit applies !\n\n\n\n\n\n","category":"function"},{"location":"balancing/#entsoeAPI.crossBorder_balancing","page":"Balancing","title":"entsoeAPI.crossBorder_balancing","text":"crossBorder_balancing(acquiring_Domain::Union{mappings.Area, String}, connecting_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)\n\nConstructs the HTTP request for the data about the cross-border balancing over a certain border (article 17.1 J: https://transparency.entsoe.eu/content/static_content/Static%20content/knowledge%20base/data-views/balancing/Data-view%20Cross-Border%20Balancing.html). Parses the received HTTP response and returns the data in a dataframe.\n\nNOT YET IMPLEMENTED\n\nMinimum time interval in query response is one BTU period!\n\nArguments\n\nacquiring_Domain::Union{mappings.Area, String}: \nconnecting_Domain::Union{mappings.Area, String}: \nperiodStart::DateTime: Start date and time of the needed data\nperiodEnd::DateTime: End date and time of the needed data \n\n! One year range limit applies !\n\n\n\n\n\n","category":"function"},{"location":"balancing/#entsoeAPI.FCR_total_capacity","page":"Balancing","title":"entsoeAPI.FCR_total_capacity","text":"FCR_total_capacity(area_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)\n\nConstructs the HTTP request for the data about the FCR total capacity in a certain area (article SO GL 187.2). Parses the received HTTP response and returns the data in a dataframe.\n\nNOT YET IMPLEMENTED\n\nArguments\n\narea_Domain::Union{mappings.Area, String}: The area for which the data is needed, can be represented as an Area object or a string with country code or direct code\nperiodStart::DateTime: Start date and time of the needed data\nperiodEnd::DateTime: End date and time of the needed data \n\n! One year range limit applies !\n\n\n\n\n\n","category":"function"},{"location":"balancing/#entsoeAPI.share_capacity_FCR","page":"Balancing","title":"entsoeAPI.share_capacity_FCR","text":"share_capacity_FCR(area_Domain::Union{mappings.Area, String}, periodStart::Datetime, periodEnd::DateTime)\n\nConstructs the HTTP request for the data about the share of FCR capacity in a certain area (article SO GL 187.2). Parses the received HTTP response and returns the data in a dataframe.\n\nNOT YET IMPLEMENTED\n\nArguments\n\narea_Domain::Union{mappings.Area, String}: The area for which the data is needed, can be represented as an Area object or a string with country code or direct code\nperiodStart::DateTime: Start date and time of the needed data\nperiodEnd::DateTime: End date and time of the needed data \n\n! One year range limit applies !\n\n\n\n\n\n","category":"function"},{"location":"balancing/#entsoeAPI.contracted_reserve_capacity_FCR","page":"Balancing","title":"entsoeAPI.contracted_reserve_capacity_FCR","text":"contracted_reserve_capacity_FCR(area_Domain::Union{mappings.Area}, periodStart::DateTime, periodEnd::DateTime)\n\nConstructs the HTTP request for the data about the share of contracted reserve FCR capacity in a certain area (article SO GL 187.2). Parses the received HTTP response and returns the data in a dataframe.\n\nNOT YET IMPLEMENTED\n\nArguments\n\narea_Domain::Union{mappings.Area, String}: The area for which the data is needed, can be represented as an Area object or a string with country code or direct code\nperiodStart::DateTime: Start date and time of the needed data\nperiodEnd::DateTime: End date and time of the needed data \n\n! One year range limit applies !\n\n\n\n\n\n","category":"function"},{"location":"balancing/#entsoeAPI.FRR_actual_capacity","page":"Balancing","title":"entsoeAPI.FRR_actual_capacity","text":"FRR_actual_capacity(area_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)\n\nConstructs the HTTP request for the data about the actual FRR capacity in a certain area (article SO GL 188.4). Parses the received HTTP response and returns the data in a dataframe.\n\nNOT YET IMPLEMENTED\n\nArguments\n\narea_Domain::Union{mappings.Area, String}: The area for which the data is needed, can be represented as an Area object or a string with country code or direct code\nperiodStart::DateTime: Start date and time of the needed data\nperiodEnd::DateTime: End date and time of the needed data \n\n! One quarter range limit applies !\n\n\n\n\n\n","category":"function"},{"location":"balancing/#entsoeAPI.RR_actual_capacity","page":"Balancing","title":"entsoeAPI.RR_actual_capacity","text":"RR_actual_capacity(area_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)\n\nConstructs the HTTP request for the data about the actual RR capacity in a certain area (article SO GL 189.3). Parses the received HTTP response and returns the data in a dataframe.\n\nNOT YET IMPLEMENTED\n\nArguments\n\narea_Domain::Union{mappings.Area, String}: The area for which the data is needed, can be represented as an Area object or a string with country code or direct code\nperiodStart::DateTime: Start date and time of the needed data\nperiodEnd::DateTime: End date and time of the needed data \n\n! One quarter range limit applies !\n\n\n\n\n\n","category":"function"},{"location":"balancing/#entsoeAPI.sharing_of_reserves","page":"Balancing","title":"entsoeAPI.sharing_of_reserves","text":"sharing_of_reserves(processType::String, acquiring_Domain::Union{mappings.Area, String}, connecting_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)\n\nConstructs the HTTP request for the data about the sharing of RR and FRR over a certain border (article SO GL 190.1). Parses the received HTTP response and returns the data in a dataframe.\n\nNOT YET IMPLEMENTED\n\nArguments\n\nprocessType::String:  identifies the type of processing to be carried out on the information\nacquiring_Domain::Union{mappings.Area, String}: \nconnecting_Domain::Union{mappings.Area, String}: \nperiodStart::DateTime: Start date and time of the needed data\nperiodEnd::DateTime: End date and time of the needed data \n\n! One year range limit applies !\n\n\n\n\n\n","category":"function"},{"location":"balancing/#GET-functions-1","page":"Balancing","title":"GET functions","text":"","category":"section"},{"location":"balancing/#","page":"Balancing","title":"Balancing","text":"entsoeAPI.GETconstructor.query_current_balancing_state\nentsoeAPI.GETconstructor.query_balancing_energy_bids\nentsoeAPI.GETconstructor.query_aggregated_balancing_energy_bids\nentsoeAPI.GETconstructor.query_procured_balancing_capacity\nentsoeAPI.GETconstructor.query_crossZonal_balancing_capacity\nentsoeAPI.GETconstructor.query_volumes_and_prices_contracted_reserves\nentsoeAPI.GETconstructor.query_volumes_contracted_reserves\nentsoeAPI.GETconstructor.query_prices_contracted_reserves\nentsoeAPI.GETconstructor.query_accepted_aggregated_offers\nentsoeAPI.GETconstructor.query_activated_balancing_energy\nentsoeAPI.GETconstructor.query_prices_activated_balancing_energy\nentsoeAPI.GETconstructor.query_imbalance_prices\nentsoeAPI.GETconstructor.query_total_imbalance_volumes\nentsoeAPI.GETconstructor.query_financial_expenses\nentsoeAPI.GETconstructor.query_crossBorder_balancing\nentsoeAPI.GETconstructor.query_FCR_total_capacity\nentsoeAPI.GETconstructor.query_share_capacity_FCR\nentsoeAPI.GETconstructor.query_contracted_reserve_capacity_FCR\nentsoeAPI.GETconstructor.query_FRR_actual_capacity\nentsoeAPI.GETconstructor.query_RR_actual_capacity\nentsoeAPI.GETconstructor.query_sharing_of_reserves\nentsoeAPI.GETconstructor.query_balancing_border_capacity_limitations\nentsoeAPI.GETconstructor.query_permanent_allocation_limitations_HVDC\nentsoeAPI.GETconstructor.query_netted_and_exchanged_volumes","category":"page"},{"location":"balancing/#entsoeAPI.GETconstructor.query_current_balancing_state","page":"Balancing","title":"entsoeAPI.GETconstructor.query_current_balancing_state","text":"query_current_balancing_state(area_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)\n\nConstructs the HTTP request for the data about the current balancing state in a certain area (article GL EB 12.3 A). Returns the received HTTP response, together with the used timezone.\n\nArguments\n\narea_Domain::Union{mappings.Area, String}: The area for which the data is needed, can be represented as an Area object or a string with country code or direct code\nperiodStart::DateTime: Start date and time of the needed data\nperiodEnd::DateTime: End date and time of the needed data \n\n! 100 day range limit applies !\n\n\n\n\n\n","category":"function"},{"location":"balancing/#entsoeAPI.GETconstructor.query_balancing_energy_bids","page":"Balancing","title":"entsoeAPI.GETconstructor.query_balancing_energy_bids","text":"query_balancing_energy_bids(area_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime, processType::String)\n\nConstructs the HTTP request for the data about the balancing energy bids in a certain area (article GL EB 12.3 B-D). Returns the received HTTP response, together with the used timezone.\n\nArguments\n\nprocessType::String:  identifies the type of processing to be carried out on the information\narea_Domain::Union{mappings.Area, String}: The area for which the data is needed, can be represented as an Area object or a string with country code or direct code\nperiodStart::DateTime: Start date and time of the needed data\nperiodEnd::DateTime: End date and time of the needed data \n\n! 1 day range limit applies !\n\n\n\n\n\n","category":"function"},{"location":"balancing/#entsoeAPI.GETconstructor.query_aggregated_balancing_energy_bids","page":"Balancing","title":"entsoeAPI.GETconstructor.query_aggregated_balancing_energy_bids","text":"query_aggregated_balancing_energy_bids(area_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime, processType::String)\n\nConstructs the HTTP request for the data about the aggregated balancing energy bids in a certain area (article GL EB 12.3 E: https://transparency.entsoe.eu/content/static_content/Static%20content/knowledge%20base/data-views/balancing/Data-view%20Aggregated%20Bids.html). Returns the received HTTP response, together with the used timezone.\n\nArguments\n\narea_Domain::Union{mappings.Area, String}: The area for which the data is needed, can be represented as an Area object or a string with country code or direct code\nperiodStart::DateTime: Start date and time of the needed data\nperiodEnd::DateTime: End date and time of the needed data \nprocessType::String:  identifies the type of processing to be carried out on the information\n\n! One year range limit applies !\n\n\n\n\n\n","category":"function"},{"location":"balancing/#entsoeAPI.GETconstructor.query_procured_balancing_capacity","page":"Balancing","title":"entsoeAPI.GETconstructor.query_procured_balancing_capacity","text":"query_procured_balancing_capacity(area_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime[, type_MarketAgreementType::String = \"\"])\n\nConstructs the HTTP request for the data about the produced balancing capacity in a certain area (article GL EB 12.3 F: https://transparency.entsoe.eu/content/static_content/Static%20content/knowledge%20base/data-views/balancing/Data-view%20Procured%20Capacity.html). Returns the received HTTP response, together with the used timezone.\n\nArguments\n\narea_Domain::Union{mappings.Area, String}: The area for which the data is needed, can be represented as an Area object or a string with country code or direct code\nperiodStart::DateTime: Start date and time of the needed data\nperiodEnd::DateTime: End date and time of the needed data \ntype_MarketAgreementType::String = \"\": Indicates the time horizon for which balancing capacity was procured\n\n! 100 document limit applies !\n\n\n\n\n\n","category":"function"},{"location":"balancing/#entsoeAPI.GETconstructor.query_crossZonal_balancing_capacity","page":"Balancing","title":"entsoeAPI.GETconstructor.query_crossZonal_balancing_capacity","text":"query_crossZonal_balancing_capacity(acquiring_Domain::Union{mappings.Area, String}, connecting_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)\n\nConstructs the HTTP request for the data about the use of the allocated cross-zonal balancing capacity over a certain border (article GL EB 12.3 H&I: https://transparency.entsoe.eu/content/static_content/Static%20content/knowledge%20base/data-views/balancing/Data-view%20Use%20of%20allocated%20cross-zonal%20balancing%20capacity.html). Returns the received HTTP response, together with the used timezone.\n\nArguments\n\nacquiring_Domain::Union{mappings.Area, String}: \nconnecting_Domain::Union{mappings.Area, String}: \nperiodStart::DateTime: Start date and time of the needed data\nperiodEnd::DateTime: End date and time of the needed data \ntype_MarketAgreementType::String = \"\": Indicates the time horizon for which balancing capacity was procured\n\n\n\n\n\n","category":"function"},{"location":"balancing/#entsoeAPI.GETconstructor.query_volumes_and_prices_contracted_reserves","page":"Balancing","title":"entsoeAPI.GETconstructor.query_volumes_and_prices_contracted_reserves","text":"query_volumes_and_prices_contracted_reserves(type_MarketAgreementType::String, processType::String, controlArea_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime[, psrType::String = \"\", offset::Int = 0])\n\nConstructs the HTTP request for the data about the prices and the volumes of the contracted reserves in a certain area (article 17.1 B&C). Returns the received HTTP response, together with the used timezone. Minimum time interval in query response ranges from part of day to year, depending on selected Type_MarketAgreement.Type!\n\nArguments\n\ntype_MarketAgreementType::String: Indicates the time horizon for which balancing capacity was procured\nprocessType::String:  identifies the type of processing to be carried out on the information\ncontrolArea_Domain::Union{mappings.Area, String}: The area for which the data is needed, can be represented as an Area object or a string with country code or direct code\nperiodStart::DateTime: Start date and time of the needed data\nperiodEnd::DateTime: End date and time of the needed data \npsrType::String = \"\": The coded type of a power system resource. The classification for the asset.\noffset::Int = 0: allows downloading more than 100 documents. The offset ∈ [0,4800] so that paging is restricted to query for 4900 documents max., offset=n returns files in sequence between n+1 and n+100\n\n! 100 document limit applies !\n\n\n\n\n\n","category":"function"},{"location":"balancing/#entsoeAPI.GETconstructor.query_volumes_contracted_reserves","page":"Balancing","title":"entsoeAPI.GETconstructor.query_volumes_contracted_reserves","text":"query_volumes_contracted_reserves(type_MarketAgreementType::String, controlArea_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime[, businessType::String = \"\", psrType::String = \"\", offset::Int = 0])\n\nConstructs the HTTP request for the data about the volumes of the contracted reserves in a certain area (article 17.1 B: https://transparency.entsoe.eu/content/staticcontent/Static%20content/knowledge%20base/data-views/balancing/Data-view%20Volumes%20of%20Contracted%20Balancing%20Reserves.html). Returns the received HTTP response, together with the used timezone. Minimum time interval in query response ranges from part of day to year, depending on selected TypeMarketAgreement.Type!\n\nArguments\n\ntype_MarketAgreementType::String: Indicates the time horizon for which balancing capacity was procured\ncontrolArea_Domain::Union{mappings.Area, String}: The area for which the data is needed, can be represented as an Area object or a string with country code or direct code\nperiodStart::DateTime: Start date and time of the needed data\nperiodEnd::DateTime: End date and time of the needed data \nbusinessType::String = \"\": The identification of the nature of the data\npsrType::String = \"\": The coded type of a power system resource. The classification for the asset.\noffset::Int = 0: allows downloading more than 100 documents. The offset ∈ [0,4800] so that paging is restricted to query for 4900 documents max., offset=n returns files in sequence between n+1 and n+100\n\n! 100 document limit applies ! ! Doesn't work for hourly data due to some unclear reason... !\n\n\n\n\n\n","category":"function"},{"location":"balancing/#entsoeAPI.GETconstructor.query_prices_contracted_reserves","page":"Balancing","title":"entsoeAPI.GETconstructor.query_prices_contracted_reserves","text":"query_prices_contracted_reserves(type_MarketAgreementType::String, controlArea_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime[, businessType::String = \"\", psrType::String = \"\", offset::Int = 0])\n\nConstructs the HTTP request for the data about the prices of the contracted reserves in a certain area (article 17.1 C: https://transparency.entsoe.eu/content/staticcontent/Static%20content/knowledge%20base/data-views/balancing/Data-view%20Price%20of%20Reserved%20Balancing%20Reserves.html).     Returns the received HTTP response, together with the used timezone. Minimum time interval in query response ranges from part of day to year, depending on selected TypeMarketAgreement.Type!\n\nArguments\n\ntype_MarketAgreementType::String: Indicates the time horizon for which balancing capacity was procured\ncontrolArea_Domain::Union{mappings.Area, String}: The area for which the data is needed, can be represented as an Area object or a string with country code or direct code\nperiodStart::DateTime: Start date and time of the needed data\nperiodEnd::DateTime: End date and time of the needed data \nbusinessType::String = \"\": The identification of the nature of the data\npsrType::String = \"\": The coded type of a power system resource. The classification for the asset.\noffset::Int = 0: allows downloading more than 100 documents. The offset ∈ [0,4800] so that paging is restricted to query for 4900 documents max., offset=n returns files in sequence between n+1 and n+100\n\n! 100 document limit applies !\n\n\n\n\n\n","category":"function"},{"location":"balancing/#entsoeAPI.GETconstructor.query_accepted_aggregated_offers","page":"Balancing","title":"entsoeAPI.GETconstructor.query_accepted_aggregated_offers","text":"query_accepted_aggregated_offers(controlArea_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime[, businessType::String = \"\", psrType::String = \"\"])\n\nConstructs the HTTP request for the data about the accepted aggregated offers in a certain area (article 17.1 D: https://transparency.entsoe.eu/content/static_content/Static%20content/knowledge%20base/data-views/balancing/Data-view%20Accepted%20Offers%20and%20Activated%20Balancing%20Reserves.html). Returns the received HTTP response, together with the used timezone. Minimum time interval in query response is one BTU period!\n\nArguments\n\ncontrolArea_Domain::Union{mappings.Area, String}: The area for which the data is needed, can be represented as an Area object or a string with country code or direct code\nperiodStart::DateTime: Start date and time of the needed data\nperiodEnd::DateTime: End date and time of the needed data \nbusinessType::String = \"\": The identification of the nature of the data\npsrType::String = \"\": The coded type of a power system resource. The classification for the asset.\n\n! One year range limit applies !\n\n\n\n\n\n","category":"function"},{"location":"balancing/#entsoeAPI.GETconstructor.query_activated_balancing_energy","page":"Balancing","title":"entsoeAPI.GETconstructor.query_activated_balancing_energy","text":"query_activated_balancing_energy(controlArea_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime[, businessType::String = \"\", psrType::String = \"\"])\n\nConstructs the HTTP request for the data about the activated balancing energy in a certain area (article 17.1 E: https://transparency.entsoe.eu/content/static_content/Static%20content/knowledge%20base/data-views/balancing/Data-view%20Accepted%20Offers%20and%20Activated%20Balancing%20Reserves.html). Returns the received HTTP response, together with the used timezone. Minimum time interval in query response is one BTU period!\n\nArguments\n\ncontrolArea_Domain::Union{mappings.Area, String}: The area for which the data is needed, can be represented as an Area object or a string with country code or direct code\nperiodStart::DateTime: Start date and time of the needed data\nperiodEnd::DateTime: End date and time of the needed data \nbusinessType::String = \"\": The identification of the nature of the data\npsrType::String = \"\": The coded type of a power system resource. The classification for the asset.\n\n! One year range limit applies !\n\n\n\n\n\n","category":"function"},{"location":"balancing/#entsoeAPI.GETconstructor.query_prices_activated_balancing_energy","page":"Balancing","title":"entsoeAPI.GETconstructor.query_prices_activated_balancing_energy","text":"query_prices_activated_balancing_energy(controlArea_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime[, businessType::String = \"\", psrType::String = \"\"])\n\nConstructs the HTTP request for the data about the prices of the activated balancing energy in a certain area (article 17.1 F: https://transparency.entsoe.eu/content/static_content/Static%20content/knowledge%20base/data-views/balancing/Data-view%20Accepted%20Offers%20and%20Activated%20Balancing%20Reserves.html). Returns the received HTTP response, together with the used timezone. Minimum time interval in query response is one BTU period!\n\nArguments\n\ncontrolArea_Domain::Union{mappings.Area, String}: The area for which the data is needed, can be represented as an Area object or a string with country code or direct code\nperiodStart::DateTime: Start date and time of the needed data\nperiodEnd::DateTime: End date and time of the needed data \nbusinessType::String = \"\": The identification of the nature of the data\npsrType::String = \"\": The coded type of a power system resource. The classification for the asset.\n\n! One year range limit applies !\n\n\n\n\n\n","category":"function"},{"location":"balancing/#entsoeAPI.GETconstructor.query_imbalance_prices","page":"Balancing","title":"entsoeAPI.GETconstructor.query_imbalance_prices","text":"query_imbalance_prices(controlArea_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)\n\nConstructs the HTTP request for the data about the imbalance prices in a certain area (article 17.1 G: https://transparency.entsoe.eu/content/static_content/Static%20content/knowledge%20base/data-views/balancing/Data-view%20Imbalance.html). Returns the received HTTP response, together with the used timezone. Minimum time interval in query response is one BTU period!\n\nArguments\n\ncontrolArea_Domain::Union{mappings.Area, String}: The area for which the data is needed, can be represented as an Area object or a string with country code or direct code\nperiodStart::DateTime: Start date and time of the needed data\nperiodEnd::DateTime: End date and time of the needed data \n\n! One year range limit applies !\n\n\n\n\n\n","category":"function"},{"location":"balancing/#entsoeAPI.GETconstructor.query_total_imbalance_volumes","page":"Balancing","title":"entsoeAPI.GETconstructor.query_total_imbalance_volumes","text":"query_total_imbalance_volumes(controlArea_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)\n\nConstructs the HTTP request for the data about the imbalance volumes in a certain area (article 17.1 H: https://transparency.entsoe.eu/content/static_content/Static%20content/knowledge%20base/data-views/balancing/Data-view%20Imbalance.html). Returns the received HTTP response, together with the used timezone. Minimum time interval in query response is one BTU period!\n\nArguments\n\ncontrolArea_Domain::Union{mappings.Area, String}: The area for which the data is needed, can be represented as an Area object or a string with country code or direct code\nperiodStart::DateTime: Start date and time of the needed data\nperiodEnd::DateTime: End date and time of the needed data \n\n! One year range limit applies !\n\n\n\n\n\n","category":"function"},{"location":"balancing/#entsoeAPI.GETconstructor.query_financial_expenses","page":"Balancing","title":"entsoeAPI.GETconstructor.query_financial_expenses","text":"query_financial_expenses(controlArea_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)\n\nConstructs the HTTP request for the data about the financial expenses and income for balancing in a certain area (article 17.1 I: https://transparency.entsoe.eu/content/static_content/Static%20content/knowledge%20base/data-views/balancing/Data-view%20Financial%20Expenses%20and%20Income.html). Returns the received HTTP response, together with the used timezone. Minimum time interval in query response is one month!\n\nArguments\n\ncontrolArea_Domain::Union{mappings.Area, String}: The area for which the data is needed, can be represented as an Area object or a string with country code or direct code\nperiodStart::DateTime: Start date and time of the needed data\nperiodEnd::DateTime: End date and time of the needed data \n\n! One year range limit applies !\n\n\n\n\n\n","category":"function"},{"location":"balancing/#entsoeAPI.GETconstructor.query_crossBorder_balancing","page":"Balancing","title":"entsoeAPI.GETconstructor.query_crossBorder_balancing","text":"query_crossBorder_balancing(acquiring_Domain::Union{mappings.Area, String}, connecting_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)\n\nConstructs the HTTP request for the data about the cross-border balancing over a certain border (article 17.1 J: https://transparency.entsoe.eu/content/static_content/Static%20content/knowledge%20base/data-views/balancing/Data-view%20Cross-Border%20Balancing.html). Returns the received HTTP response, together with the used timezone. Minimum time interval in query response is one BTU period!\n\nArguments\n\nacquiring_Domain::Union{mappings.Area, String}: \nconnecting_Domain::Union{mappings.Area, String}: \nperiodStart::DateTime: Start date and time of the needed data\nperiodEnd::DateTime: End date and time of the needed data \n\n! One year range limit applies !\n\n\n\n\n\n","category":"function"},{"location":"balancing/#entsoeAPI.GETconstructor.query_FCR_total_capacity","page":"Balancing","title":"entsoeAPI.GETconstructor.query_FCR_total_capacity","text":"query_FCR_total_capacity(area_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)\n\nConstructs the HTTP request for the data about the FCR total capacity in a certain area (article SO GL 187.2). Returns the received HTTP response.\n\nArguments\n\narea_Domain::Union{mappings.Area, String}: The area for which the data is needed, can be represented as an Area object or a string with country code or direct code\nperiodStart::DateTime: Start date and time of the needed data\nperiodEnd::DateTime: End date and time of the needed data \n\n! One year range limit applies !\n\n\n\n\n\n","category":"function"},{"location":"balancing/#entsoeAPI.GETconstructor.query_share_capacity_FCR","page":"Balancing","title":"entsoeAPI.GETconstructor.query_share_capacity_FCR","text":"query_share_capacity_FCR(area_Domain::Union{mappings.Area, String}, periodStart::Datetime, periodEnd::DateTime)\n\nConstructs the HTTP request for the data about the share of FCR capacity in a certain area (article SO GL 187.2). Returns the received HTTP response.\n\nArguments\n\narea_Domain::Union{mappings.Area, String}: The area for which the data is needed, can be represented as an Area object or a string with country code or direct code\nperiodStart::DateTime: Start date and time of the needed data\nperiodEnd::DateTime: End date and time of the needed data \n\n! One year range limit applies !\n\n\n\n\n\n","category":"function"},{"location":"balancing/#entsoeAPI.GETconstructor.query_contracted_reserve_capacity_FCR","page":"Balancing","title":"entsoeAPI.GETconstructor.query_contracted_reserve_capacity_FCR","text":"query_contracted_reserve_capacity_FCR(area_Domain::Union{mappings.Area}, periodStart::DateTime, periodEnd::DateTime)\n\nConstructs the HTTP request for the data about the share of contracted reserve FCR capacity in a certain area (article SO GL 187.2). Returns the received HTTP response.\n\nArguments\n\narea_Domain::Union{mappings.Area, String}: The area for which the data is needed, can be represented as an Area object or a string with country code or direct code\nperiodStart::DateTime: Start date and time of the needed data\nperiodEnd::DateTime: End date and time of the needed data \n\n! One year range limit applies !\n\n\n\n\n\n","category":"function"},{"location":"balancing/#entsoeAPI.GETconstructor.query_FRR_actual_capacity","page":"Balancing","title":"entsoeAPI.GETconstructor.query_FRR_actual_capacity","text":"query_FRR_actual_capacity(area_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)\n\nConstructs the HTTP request for the data about the actual FRR capacity in a certain area (article SO GL 188.4). Returns the received HTTP response.\n\nArguments\n\narea_Domain::Union{mappings.Area, String}: The area for which the data is needed, can be represented as an Area object or a string with country code or direct code\nperiodStart::DateTime: Start date and time of the needed data\nperiodEnd::DateTime: End date and time of the needed data \n\n! One quarter range limit applies !\n\n\n\n\n\n","category":"function"},{"location":"balancing/#entsoeAPI.GETconstructor.query_RR_actual_capacity","page":"Balancing","title":"entsoeAPI.GETconstructor.query_RR_actual_capacity","text":"query_RR_actual_capacity(area_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)\n\nConstructs the HTTP request for the data about the actual RR capacity in a certain area (article SO GL 189.3). Returns the received HTTP response.\n\nArguments\n\narea_Domain::Union{mappings.Area, String}: The area for which the data is needed, can be represented as an Area object or a string with country code or direct code\nperiodStart::DateTime: Start date and time of the needed data\nperiodEnd::DateTime: End date and time of the needed data \n\n! One quarter range limit applies !\n\n\n\n\n\n","category":"function"},{"location":"balancing/#entsoeAPI.GETconstructor.query_sharing_of_reserves","page":"Balancing","title":"entsoeAPI.GETconstructor.query_sharing_of_reserves","text":"query_sharing_of_reserves(processType::String, acquiring_Domain::Union{mappings.Area, String}, connecting_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)\n\nConstructs the HTTP request for the data about the sharing of RR and FRR over a certain border (article SO GL 190.1). Returns the received HTTP response.\n\nArguments\n\nprocessType::String:  identifies the type of processing to be carried out on the information\nacquiring_Domain::Union{mappings.Area, String}: \nconnecting_Domain::Union{mappings.Area, String}: \nperiodStart::DateTime: Start date and time of the needed data\nperiodEnd::DateTime: End date and time of the needed data \n\n! One year range limit applies !\n\n\n\n\n\n","category":"function"},{"location":"balancing/#Parse-functions-1","page":"Balancing","title":"Parse functions","text":"","category":"section"},{"location":"balancing/#","page":"Balancing","title":"Balancing","text":"entsoeAPI.xmlParser.parse_current_balancing_state\nentsoeAPI.xmlParser.parse_balancing_energy_bids\nentsoeAPI.xmlParser.parse_aggregated_balancing_energy_bids\nentsoeAPI.xmlParser.parse_procured_balancing_capacity\nentsoeAPI.xmlParser.parse_crossZonal_balancing_capacity\nentsoeAPI.xmlParser.parse_volumes_and_prices_contracted_reserves\nentsoeAPI.xmlParser.parse_volumes_contracted_reserves\nentsoeAPI.xmlParser.parse_prices_contracted_reserves\nentsoeAPI.xmlParser.parse_accepted_aggregated_offers\nentsoeAPI.xmlParser.parse_activated_balancing_energy\nentsoeAPI.xmlParser.parse_prices_activated_balancing_energy\nentsoeAPI.xmlParser.parse_imbalance_prices\nentsoeAPI.xmlParser.parse_total_imbalance_volumes\nentsoeAPI.xmlParser.parse_financial_expenses\nentsoeAPI.xmlParser.parse_crossBorder_balancing\nentsoeAPI.xmlParser.parse_FCR_total_capacity\nentsoeAPI.xmlParser.parse_share_capacity_FCR\nentsoeAPI.xmlParser.parse_contracted_reserve_capacity_FCR\nentsoeAPI.xmlParser.parse_FRR_actual_capacity\nentsoeAPI.xmlParser.parse_RR_actual_capacity\nentsoeAPI.xmlParser.parse_sharing_of_reserves\nentsoeAPI.xmlParser.parse_balancing_border_capacity_limitations\nentsoeAPI.xmlParser.parse_permanent_allocation_limitations_HVDC\nentsoeAPI.xmlParser.parse_netted_and_exchanged_volumes","category":"page"},{"location":"balancing/#entsoeAPI.xmlParser.parse_current_balancing_state","page":"Balancing","title":"entsoeAPI.xmlParser.parse_current_balancing_state","text":"parse_current_balancing_state(xml::Vector{UInt8}, tz::TimeZone)\n\nParses xml file generated by the function GETconstructor.query_current_balancing_state(area_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime). Returns the data in a dataframe.\n\n[start, end, situation, open loop ace]\n\nArguments\n\nxml::Vector{UInt8}: xml data in the format as returned by the function GETconstructor.query_current_balancing_state(area_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)\ntz::TimeZone: Timezone in which the dates and times have to be represented\n\n\n\n\n\n","category":"function"},{"location":"balancing/#entsoeAPI.xmlParser.parse_aggregated_balancing_energy_bids","page":"Balancing","title":"entsoeAPI.xmlParser.parse_aggregated_balancing_energy_bids","text":"parse_aggregated_balancing_energy_bids(xml::Vector{UInt8}, tz::TimeZone)\n\nParses xml file generated by the function GETconstructor.query_aggregated_balancing_energy_bids(area_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime, processType::String). Returns the data in a dataframe.\n\n[start, end, type of product, direction, offered, activated, unavailable]\n\nArguments\n\nxml::Vector{UInt8}: xml data in the format as returned by the function GETconstructor.query_aggregated_balancing_energy_bids(area_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime, processType::String)\ntz::TimeZone: Timezone in which the dates and times have to be represented\n\n\n\n\n\n","category":"function"},{"location":"balancing/#entsoeAPI.xmlParser.parse_volumes_contracted_reserves","page":"Balancing","title":"entsoeAPI.xmlParser.parse_volumes_contracted_reserves","text":"parse_volumes_contracted_reserves(xml::Vector{UInt8}, tz::TimeZone)\n\nParses xml file generated by the function GETconstructor.query_volumes_contracted_reserves(type_MarketAgreementType::String, controlArea_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime[, businessType::String = \"\", psrType::String = \"\", offset::Int = 0]). Returns the data in a dataframe.\n\n[start, end, reserve type, source, regulation volume, direction]\n\nArguments\n\nxml::Vector{UInt8}: xml data in the format as returned by the function GETconstructor.query_volumes_contracted_reserves(type_MarketAgreementType::String, controlArea_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime[, businessType::String = \"\", psrType::String = \"\", offset::Int = 0])\ntz::TimeZone: Timezone in which the dates and times have to be represented\n\n\n\n\n\n","category":"function"},{"location":"balancing/#entsoeAPI.xmlParser.parse_prices_contracted_reserves","page":"Balancing","title":"entsoeAPI.xmlParser.parse_prices_contracted_reserves","text":"parse_prices_contracted_reserves(xml::Vector{UInt8}, tz::TimeZone)\n\nParses xml file generated by the function GETconstructor.query_prices_contracted_reserves(type_MarketAgreementType::String, controlArea_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime[, businessType::String = \"\", psrType::String = \"\", offset::Int = 0]). Returns the data in a dataframe.\n\n[start, end, reserve type, source, regulation price, direction, price type]\n\nArguments\n\nxml::Vector{UInt8}: xml data in the format as returned by the function GETconstructor.query_prices_contracted_reserves(type_MarketAgreementType::String, controlArea_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime[, businessType::String = \"\", psrType::String = \"\", offset::Int = 0])\ntz::TimeZone: Timezone in which the dates and times have to be represented\n\n\n\n\n\n","category":"function"},{"location":"balancing/#entsoeAPI.xmlParser.parse_accepted_aggregated_offers","page":"Balancing","title":"entsoeAPI.xmlParser.parse_accepted_aggregated_offers","text":"parse_accepted_aggregated_offers(xml::Vector{UInt8}, tz::TimeZone)\n\nParses xml file generated by the function GETconstructor.query_accepted_aggregated_offers(controlArea_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime[, businessType::String = \"\", psrType::String = \"\"]). Returns the data in a dataframe.\n\n[start, end, reserve type, source, accepted reserves, direction]\n\nArguments\n\nxml::Vector{UInt8}: xml data in the format as returned by the function GETconstructor.query_accepted_aggregated_offers(controlArea_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime[, businessType::String = \"\", psrType::String = \"\"])\ntz::TimeZone: Timezone in which the dates and times have to be represented\n\n\n\n\n\n","category":"function"},{"location":"balancing/#entsoeAPI.xmlParser.parse_activated_balancing_energy","page":"Balancing","title":"entsoeAPI.xmlParser.parse_activated_balancing_energy","text":"parse_activated_balancing_energy(xml::Vector{UInt8}, tz::TimeZone)\n\nParses xml file generated by the function GETconstructor.query_activated_balancing_energy(controlArea_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime[, businessType::String = \"\", psrType::String = \"\"]). Returns the data in a dataframe.\n\n[start, end, reserve type, source, activated energy, direction]\n\nArguments\n\nxml::Vector{UInt8}: xml data in the format as returned by the function GETconstructor.query_activated_balancing_energy(controlArea_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime[, businessType::String = \"\", psrType::String = \"\"])\ntz::TimeZone: Timezone in which the dates and times have to be represented\n\n\n\n\n\n","category":"function"},{"location":"balancing/#entsoeAPI.xmlParser.parse_prices_activated_balancing_energy","page":"Balancing","title":"entsoeAPI.xmlParser.parse_prices_activated_balancing_energy","text":"parse_prices_activated_balancing_energy(xml::Vector{UInt8}, tz::TimeZone)\n\nParses xml file generated by the function GETconstructor.query_prices_activated_balancing_energy(controlArea_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime[, businessType::String = \"\", psrType::String = \"\"]). Returns the data in a dataframe.\n\n[start, end, reserve type, source, price type, price, direction]\n\nArguments\n\nxml::Vector{UInt8}: xml data in the format as returned by the function GETconstructor.query_prices_activated_balancing_energy(controlArea_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime[, businessType::String = \"\", psrType::String = \"\"])\ntz::TimeZone: Timezone in which the dates and times have to be represented\n\n\n\n\n\n","category":"function"},{"location":"balancing/#entsoeAPI.xmlParser.parse_total_imbalance_volumes","page":"Balancing","title":"entsoeAPI.xmlParser.parse_total_imbalance_volumes","text":"parse_total_imbalance_volumes(xml, tz)\n\nParses xml file generated by the function GETconstructor.query_total_imbalance_volumes(controlArea_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime). Returns the data in a dataframe.\n\n[start, end, volume, difference, situation, status]\n\nArguments\n\nxml::Vector{UInt8}: xml data in the format as returned by the function GETconstructor.query_total_imbalance_volumes(controlArea_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)\ntz::TimeZone: Timezone in which the dates and times have to be represented\n\n\n\n\n\n","category":"function"},{"location":"balancing/#entsoeAPI.xmlParser.parse_financial_expenses","page":"Balancing","title":"entsoeAPI.xmlParser.parse_financial_expenses","text":"parse_financial_expenses(xml::Vector{UInt8}, tz::TimeZone)\n\nParses xml file generated by the function GETconstructor.query_financial_expenses(controlArea_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime). Returns the data in a dataframe.\n\n[start, end, income, expenses, status]\n\nArguments\n\nxml::Vector{UInt8}: xml data in the format as returned by the function GETconstructor.query_financial_expenses(controlArea_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)\ntz::TimeZone: Timezone in which the dates and times have to be represented\n\n\n\n\n\n","category":"function"},{"location":"#Index-1","page":"Home","title":"Index","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"","category":"page"},{"location":"congestion/#Congestion-management-functions-1","page":"Congestion management","title":"Congestion management functions","text":"","category":"section"},{"location":"congestion/#","page":"Congestion management","title":"Congestion management","text":"This file describes the usage of all the functions under the congestion management tab in the ENTSOE-E transparancy platform.","category":"page"},{"location":"congestion/#User-functions-1","page":"Congestion management","title":"User functions","text":"","category":"section"},{"location":"congestion/#","page":"Congestion management","title":"Congestion management","text":"entsoeAPI.expansion_and_dismantling\nentsoeAPI.redispatching\nentsoeAPI.countertrading\nentsoeAPI.congestion_costs","category":"page"},{"location":"congestion/#entsoeAPI.expansion_and_dismantling","page":"Congestion management","title":"entsoeAPI.expansion_and_dismantling","text":"expansion_and_dismantling(in_Domain::Union{mappings.Area, String}, out_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime[, businessType::String = \"\", docStatus::String = \"\"])\n\nConstructs the HTTP request for the data about expansion and dismantling projects over a certain border (article 9.1: https://transparency.entsoe.eu/content/static_content/Static%20content/knowledge%20base/data-views/transmission/Data-view%20Expansion%20and%20dismantling%20projects.html). Parses the received HTTP response and returns the data in a dataframe.\n\n[estimated completion date, new NTC => [start, end, new NTC], transmission assets => [code, location, type]]\n\nTime interval in query response depends on duration of matching projects!\n\nArguments\n\nin_Domain::Union{mappings.Area, String}: The area where energy is going, can be represented as an Area object or a string with country code or direct code \nout_Domain::Union{mappings.Area, String}: The area where energy is coming from, can be represented as an Area object or a string with country code or direct code\nperiodStart::DateTime: Start date and time of the needed data\nperiodEnd::DateTime: End date and time of the needed data \nbusinessType::String = \"\": The identification of the nature of the data\ndocStatus::String = \"\": Identification of the condition or position of the document with regard to its standing\n\n! 100 document limit applies !\n\n\n\n\n\n","category":"function"},{"location":"congestion/#entsoeAPI.redispatching","page":"Congestion management","title":"entsoeAPI.redispatching","text":"redispatching(in_Domain::Union{mappings.Area, String}, out_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime[, businessType::String = \"\"])\n\nConstructs the HTTP request for the data about redispatching over a certain border (article 13.1 A: https://transparency.entsoe.eu/content/static_content/Static%20content/knowledge%20base/data-views/congestion-management/Data-view%20Redispatching.html). Parses the received HTTP response and returns the data in a dataframe.\n\n[start, end, reason, impact => [start, end, impact], affected assets => [code, location, type]]\n\nTime interval in query response depends on duration of matching redispatches!\n\nArguments\n\nin_Domain::Union{mappings.Area, String}: The area where energy is going, can be represented as an Area object or a string with country code or direct code \nout_Domain::Union{mappings.Area, String}: The area where energy is coming from, can be represented as an Area object or a string with country code or direct code\nperiodStart::DateTime: Start date and time of the needed data\nperiodEnd::DateTime: End date and time of the needed data \nbusinessType::String = \"\": The identification of the nature of the data\n\n! 100 document limit applies !\n\n\n\n\n\n","category":"function"},{"location":"congestion/#entsoeAPI.countertrading","page":"Congestion management","title":"entsoeAPI.countertrading","text":"countertrading(in_Domain::Union{mappings.Area, String}, out_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)\n\nConstructs the HTTP request for the data about countertrading over a certain border (article 13.1 B: https://transparency.entsoe.eu/content/static_content/Static%20content/knowledge%20base/data-views/congestion-management/Data-view%20Countertrading.html). Parses the received HTTP response and returns the data in a dataframe.\n\n[start, end, reason, change in cross-border exchange => [start, end, change in cross-border exchange]]\n\nTime interval in query response depends on duration of matching counter trades!\n\nArguments\n\nin_Domain::Union{mappings.Area, String}: The area where energy is going, can be represented as an Area object or a string with country code or direct code \nout_Domain::Union{mappings.Area, String}: The area where energy is coming from, can be represented as an Area object or a string with country code or direct code\nperiodStart::DateTime: Start date and time of the needed data\nperiodEnd::DateTime: End date and time of the needed data \nbusinessType::String = \"\": The identification of the nature of the data\n\n! 100 document limit applies !\n\n\n\n\n\n","category":"function"},{"location":"congestion/#entsoeAPI.congestion_costs","page":"Congestion management","title":"entsoeAPI.congestion_costs","text":"congestion_costs(domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime[, businessType::String = \"\"])\n\nConstructs the HTTP request for the data about the congestion management costs over a certain border (article 13.1 C: https://transparency.entsoe.eu/content/static_content/Static%20content/knowledge%20base/data-views/congestion-management/Data-view%20Costs.html). Parses the received HTTP response and returns the data in a dataframe.\n\n[start, end, costs]\n\nMinimum time interval in query response is one month!\n\nArguments\n\ndomain::Union{mappings.Area, String}: The area for which the data is needed, can be represented as an Area object or a string with country code or direct code\nperiodStart::DateTime: Start date and time of the needed data\nperiodEnd::DateTime: End date and time of the needed data \nbusinessType::String = \"\": The identification of the nature of the data\n\n! 100 document limit applies !\n\n\n\n\n\n","category":"function"},{"location":"congestion/#GET-functions-1","page":"Congestion management","title":"GET functions","text":"","category":"section"},{"location":"congestion/#","page":"Congestion management","title":"Congestion management","text":"entsoeAPI.GETconstructor.query_expansion_and_dismantling\nentsoeAPI.GETconstructor.query_redispatching\nentsoeAPI.GETconstructor.query_countertrading\nentsoeAPI.GETconstructor.query_congestion_costs","category":"page"},{"location":"congestion/#entsoeAPI.GETconstructor.query_expansion_and_dismantling","page":"Congestion management","title":"entsoeAPI.GETconstructor.query_expansion_and_dismantling","text":"query_expansion_and_dismantling(in_Domain::Union{mappings.Area, String}, out_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime[, businessType::String = \"\", docStatus::String = \"\"])\n\nConstructs the HTTP request for the data about expansion and dismantling projects over a certain border (article 9.1: https://transparency.entsoe.eu/content/static_content/Static%20content/knowledge%20base/data-views/transmission/Data-view%20Expansion%20and%20dismantling%20projects.html). Returns the received HTTP response, together with the used timezone. Time interval in query response depends on duration of matching projects!\n\nArguments\n\nin_Domain::Union{mappings.Area, String}: The area where energy is going, can be represented as an Area object or a string with country code or direct code \nout_Domain::Union{mappings.Area, String}: The area where energy is coming from, can be represented as an Area object or a string with country code or direct code\nperiodStart::DateTime: Start date and time of the needed data\nperiodEnd::DateTime: End date and time of the needed data \nbusinessType::String = \"\": The identification of the nature of the data\ndocStatus::String = \"\": Identification of the condition or position of the document with regard to its standing\n\n! 100 document limit applies !\n\n\n\n\n\n","category":"function"},{"location":"congestion/#entsoeAPI.GETconstructor.query_redispatching","page":"Congestion management","title":"entsoeAPI.GETconstructor.query_redispatching","text":"query_redispatching(in_Domain::Union{mappings.Area, String}, out_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime[, businessType::String = \"\"])\n\nConstructs the HTTP request for the data about redispatching over a certain border (article 13.1 A: https://transparency.entsoe.eu/content/static_content/Static%20content/knowledge%20base/data-views/congestion-management/Data-view%20Redispatching.html). Returns the received HTTP response, together with the used timezone. Time interval in query response depends on duration of matching redispatches!\n\nArguments\n\nin_Domain::Union{mappings.Area, String}: The area where energy is going, can be represented as an Area object or a string with country code or direct code \nout_Domain::Union{mappings.Area, String}: The area where energy is coming from, can be represented as an Area object or a string with country code or direct code\nperiodStart::DateTime: Start date and time of the needed data\nperiodEnd::DateTime: End date and time of the needed data \nbusinessType::String = \"\": The identification of the nature of the data\n\n! 100 document limit applies !\n\n\n\n\n\n","category":"function"},{"location":"congestion/#entsoeAPI.GETconstructor.query_countertrading","page":"Congestion management","title":"entsoeAPI.GETconstructor.query_countertrading","text":"query_countertrading(in_Domain::Union{mappings.Area, String}, out_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)\n\nConstructs the HTTP request for the data about countertrading over a certain border (article 13.1 B: https://transparency.entsoe.eu/content/static_content/Static%20content/knowledge%20base/data-views/congestion-management/Data-view%20Countertrading.html). Returns the received HTTP response, together with the used timezone. Time interval in query response depends on duration of matching counter trades!\n\nArguments\n\nin_Domain::Union{mappings.Area, String}: The area where energy is going, can be represented as an Area object or a string with country code or direct code \nout_Domain::Union{mappings.Area, String}: The area where energy is coming from, can be represented as an Area object or a string with country code or direct code\nperiodStart::DateTime: Start date and time of the needed data\nperiodEnd::DateTime: End date and time of the needed data \nbusinessType::String = \"\": The identification of the nature of the data\n\n! 100 document limit applies !\n\n\n\n\n\n","category":"function"},{"location":"congestion/#entsoeAPI.GETconstructor.query_congestion_costs","page":"Congestion management","title":"entsoeAPI.GETconstructor.query_congestion_costs","text":"query_congestion_costs(domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime[, businessType::String = \"\"])\n\nConstructs the HTTP request for the data about the congestion management costs over a certain border (article 13.1 C: https://transparency.entsoe.eu/content/static_content/Static%20content/knowledge%20base/data-views/congestion-management/Data-view%20Costs.html). Returns the received HTTP response, together with the used timezone. Minimum time interval in query response is one month!\n\nArguments\n\ndomain::Union{mappings.Area, String}: The area for which the data is needed, can be represented as an Area object or a string with country code or direct code\nperiodStart::DateTime: Start date and time of the needed data\nperiodEnd::DateTime: End date and time of the needed data \nbusinessType::String = \"\": The identification of the nature of the data\n\n! 100 document limit applies !\n\n\n\n\n\n","category":"function"},{"location":"congestion/#Parse-functions-1","page":"Congestion management","title":"Parse functions","text":"","category":"section"},{"location":"congestion/#","page":"Congestion management","title":"Congestion management","text":"entsoeAPI.xmlParser.parse_expansion_and_dismantling\nentsoeAPI.xmlParser.parse_redsispatching\nentsoeAPI.xmlParser.parse_countertrading\nentsoeAPI.xmlParser.parse_congestion_costs","category":"page"},{"location":"congestion/#entsoeAPI.xmlParser.parse_expansion_and_dismantling","page":"Congestion management","title":"entsoeAPI.xmlParser.parse_expansion_and_dismantling","text":"parse_expansion_and_dismantling(xml::Vector{UInt8}, tz::TimeZone)\n\nParses the xml file generated by the function GETconstructor.query_expansion_and_dismantling(in_Domain::Union{mappings.Area, String}, out_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime[, businessType::String = \"\", docStatus::String = \"\"]). Returns the data in a dataframe.\n\n[estimated completion date, new NTC => [start, end, new NTC], transmission assets => [code, location, type]]\n\nArguments\n\nxml::Vector{UInt8}: xml data in the format as returned by the function GETconstructor.query_expansion_and_dismantling(in_Domain::Union{mappings.Area, String}, out_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime[, businessType::String = \"\", docStatus::String = \"\"])\ntz::TimeZone: Timezone in which the dates and times have to be represented\n\n\n\n\n\n","category":"function"},{"location":"congestion/#entsoeAPI.xmlParser.parse_countertrading","page":"Congestion management","title":"entsoeAPI.xmlParser.parse_countertrading","text":"parse_countertrading(xml::Vector{UInt8}, tz::TimeZone)\n\nParses xml file generated by the function GETconstructor.query_countertrading(in_Domain::Union{mappings.Area, String}, out_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime). Returns the data in a dataframe.\n\n[start, end, reason, change in cross-border exchange => [start, end, change in cross-border exchange]]\n\nArguments\n\nxml::Vector{UInt8}: xml data in the format as returned by the function GETconstructor.query_countertrading(in_Domain::Union{mappings.Area, String}, out_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)\ntz::TimeZone: Timezone in which the dates and times have to be represented\n\n\n\n\n\n","category":"function"},{"location":"congestion/#entsoeAPI.xmlParser.parse_congestion_costs","page":"Congestion management","title":"entsoeAPI.xmlParser.parse_congestion_costs","text":"parse_congestion_costs(xml::Vector{UInt8}, tz::TimeZone)\n\nParses xml file generated by the function GETconstructor.query_congestion_costs(domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime[, businessType::String = \"\"]). Returns the data in a dataframe.\n\n[start, end, costs]\n\nArguments\n\nxml::Vector{UInt8}: xml data in the format as returned by the function GETconstructor.query_congestion_costs(domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime[, businessType::String = \"\"])\ntz::TimeZone: Timezone in which the dates and times have to be represented\n\n\n\n\n\n","category":"function"},{"location":"load/#Load-functions-1","page":"Load","title":"Load functions","text":"","category":"section"},{"location":"load/#","page":"Load","title":"Load","text":"This file describes the usage of all the functions under the load tab in the ENTSOE-E transparancy platform.","category":"page"},{"location":"load/#User-functions-1","page":"Load","title":"User functions","text":"","category":"section"},{"location":"load/#","page":"Load","title":"Load","text":"entsoeAPI.actual_total_load\nentsoeAPI.day_ahead_total_load\nentsoeAPI.week_ahead_total_load\nentsoeAPI.month_ahead_total_load\nentsoeAPI.year_ahead_total_load\nentsoeAPI.year_ahead_margin","category":"page"},{"location":"load/#entsoeAPI.actual_total_load","page":"Load","title":"entsoeAPI.actual_total_load","text":"actual_total_load(outBiddingZone_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)\n\nConstructs the HTTP request for actual total load data (article 6.1 A: https://transparency.entsoe.eu/content/static_content/Static%20content/knowledge%20base/data-views/load-domain/Data-view%20Total%20Load%20-%20Day%20Ahead%20-%20Actual.html).  Parses the received HTTP response and returns the data in a dataframe.\n\n[time, load]\n\nMinimum time interval in query response is one MTU period!\n\nArguments\n\noutBiddingZone_Domain::Union{mappings.Area, String}: Area for which the load data is needed, can be represented as an Area object or a string with country code or direct code \nperiodStart::DateTime: Start date and time of the needed data\nperiodEnd::DateTime: End date and time of the needed data \n\n! One year range limit applies !\n\n\n\n\n\n","category":"function"},{"location":"load/#entsoeAPI.day_ahead_total_load","page":"Load","title":"entsoeAPI.day_ahead_total_load","text":"day_ahead_total_load(outBiddingZone_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)\n\nConstructs the HTTP request for the data of the day ahaed total load forecast (article 6.1 B: https://transparency.entsoe.eu/content/static_content/Static%20content/knowledge%20base/data-views/load-domain/Data-view%20Total%20Load%20-%20Day%20Ahead%20-%20Actual.html).  Parses the received HTTP response and returns the data in a dataframe.\n\n[time, load]\n\nMinimum time interval in query response is one day!\n\nArguments\n\noutBiddingZone_Domain::Union{mappings.Area, String}: Area for which the load data is needed, can be represented as an Area object or a string with country code or direct code \nperiodStart::DateTime: Start date and time of the needed data\nperiodEnd::DateTime: End date and time of the needed data \n\n! One year range limit applies !\n\n\n\n\n\n","category":"function"},{"location":"load/#entsoeAPI.week_ahead_total_load","page":"Load","title":"entsoeAPI.week_ahead_total_load","text":"week_ahead_total_load(outBiddingZone_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)\n\nConstructs the HTTP request for the data of the week ahaed total load forecast (article 6.1 C: https://transparency.entsoe.eu/content/static_content/Static%20content/knowledge%20base/data-views/load-domain/Data-view%20Total%20Load%20Forecast%20-%20Week%20Ahead.html).  Parses the received HTTP response and returns the data in a dictionary.\n\n(\"min total load\" => [time, load], \"max total load\" => [time, load])\n\nMinimum time interval in query response is one week!\n\nArguments\n\noutBiddingZone_Domain::Union{mappings.Area, String}: Area for which the load data is needed, can be represented as an Area object or a string with country code or direct code \nperiodStart::DateTime: Start date and time of the needed data\nperiodEnd::DateTime: End date and time of the needed data \n\n! One year range limit applies !\n\n\n\n\n\n","category":"function"},{"location":"load/#entsoeAPI.month_ahead_total_load","page":"Load","title":"entsoeAPI.month_ahead_total_load","text":"month_ahead_total_load(outBiddingZone_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)\n\nConstructs the HTTP request for the data of the month ahaed total load forecast (article 6.1 D: https://transparency.entsoe.eu/content/static_content/Static%20content/knowledge%20base/data-views/load-domain/Data-view%20Total%20Load%20Forecast%20-%20Month%20Ahead.html).  Parses the received HTTP response and returns the data in a dictionary.\n\n(\"min total load\" => [week, load], \"max total load\" => [week, load])\n\nMinimum time interval in query response is one month!\n\nArguments\n\noutBiddingZone_Domain::Union{mappings.Area, String}: Area for which the load data is needed, can be represented as an Area object or a string with country code or direct code \nperiodStart::DateTime: Start date and time of the needed data\nperiodEnd::DateTime: End date and time of the needed data \n\n! One year range limit applies !\n\n\n\n\n\n","category":"function"},{"location":"load/#entsoeAPI.year_ahead_total_load","page":"Load","title":"entsoeAPI.year_ahead_total_load","text":"year_ahead_total_load(outBiddingZone_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)\n\nConstructs the HTTP request for the data of the year ahaed total load forecast (article 6.1 E: https://transparency.entsoe.eu/content/static_content/Static%20content/knowledge%20base/data-views/load-domain/Data-view%20Total%20Load%20Forecast%20-%20Year%20Ahead.html).  Parses the received HTTP response and returns the data in a dictionary.\n\n(\"min total load\" => [week, load], \"max total load\" => [week, load])\n\nMinimum time interval in query response is one year!\n\nArguments\n\noutBiddingZone_Domain::Union{mappings.Area, String}: Area for which the load data is needed, can be represented as an Area object or a string with country code or direct code \nperiodStart::DateTime: Start date and time of the needed data\nperiodEnd::DateTime: End date and time of the needed data \n\n! One year range limit applies !\n\n\n\n\n\n","category":"function"},{"location":"load/#entsoeAPI.year_ahead_margin","page":"Load","title":"entsoeAPI.year_ahead_margin","text":"year_ahead_margin(outBiddingZone_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)\n\nConstructs the HTTP request for the data of the year ahead forecast margin (article 8.1: https://transparency.entsoe.eu/content/static_content/Static%20content/knowledge%20base/data-views/load-domain/Data-view%20Forecast%20Margin%20-%20Year%20Ahead.html).  Parses the received HTTP response and returns the data in a dataframe.\n\n[year, margin]\n\nMinimum time interval in query response is one year!\n\nArguments\n\noutBiddingZone_Domain::Union{mappings.Area, String}: Area for which the load data is needed, can be represented as an Area object or a string with country code or direct code \nperiodStart::DateTime: Start date and time of the needed data\nperiodEnd::DateTime: End date and time of the needed data \n\n! One year range limit applies !\n\n\n\n\n\n","category":"function"},{"location":"load/#GET-functions-1","page":"Load","title":"GET functions","text":"","category":"section"},{"location":"load/#","page":"Load","title":"Load","text":"entsoeAPI.GETconstructor.query_actual_total_load\nentsoeAPI.GETconstructor.query_day_ahead_total_load\nentsoeAPI.GETconstructor.query_week_ahead_total_load\nentsoeAPI.GETconstructor.query_month_ahead_total_load\nentsoeAPI.GETconstructor.query_year_ahead_total_load\nentsoeAPI.GETconstructor.query_year_ahead_margin","category":"page"},{"location":"load/#entsoeAPI.GETconstructor.query_actual_total_load","page":"Load","title":"entsoeAPI.GETconstructor.query_actual_total_load","text":"query_actual_total_load(outBiddingZone_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)\n\nConstructs the HTTP request for actual total load data (article 6.1 A: https://transparency.entsoe.eu/content/static_content/Static%20content/knowledge%20base/data-views/load-domain/Data-view%20Total%20Load%20-%20Day%20Ahead%20-%20Actual.html).  Returns the received HTTP response, together with the used timezone. Minimum time interval in query response is one MTU period!\n\nArguments\n\noutBiddingZone_Domain::Union{mappings.Area, String}: Area for which the load data is needed, can be represented as an Area object or a string with country code or direct code \nperiodStart::DateTime: Start date and time of the needed data\nperiodEnd::DateTime: End date and time of the needed data \n\n! One year range limit applies !\n\n\n\n\n\n","category":"function"},{"location":"load/#entsoeAPI.GETconstructor.query_day_ahead_total_load","page":"Load","title":"entsoeAPI.GETconstructor.query_day_ahead_total_load","text":"query_day_ahead_total_load(outBiddingZone_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)\n\nConstructs the HTTP request for the data of the day ahaed total load forecast (article 6.1 B: https://transparency.entsoe.eu/content/static_content/Static%20content/knowledge%20base/data-views/load-domain/Data-view%20Total%20Load%20-%20Day%20Ahead%20-%20Actual.html).  Returns the received HTTP response, together with the used timezone. Minimum time interval in query response is one day!\n\nArguments\n\noutBiddingZone_Domain::Union{mappings.Area, String}: Area for which the load data is needed, can be represented as an Area object or a string with country code or direct code \nperiodStart::DateTime: Start date and time of the needed data\nperiodEnd::DateTime: End date and time of the needed data \n\n! One year range limit applies !\n\n\n\n\n\n","category":"function"},{"location":"load/#entsoeAPI.GETconstructor.query_week_ahead_total_load","page":"Load","title":"entsoeAPI.GETconstructor.query_week_ahead_total_load","text":"query_week_ahead_total_load(outBiddingZone_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)\n\nConstructs the HTTP request for the data of the week ahaed total load forecast (article 6.1 C: https://transparency.entsoe.eu/content/static_content/Static%20content/knowledge%20base/data-views/load-domain/Data-view%20Total%20Load%20Forecast%20-%20Week%20Ahead.html).  Returns the received HTTP response, together with the used timezone. Minimum time interval in query response is one week!\n\nArguments\n\noutBiddingZone_Domain::Union{mappings.Area, String}: Area for which the load data is needed, can be represented as an Area object or a string with country code or direct code \nperiodStart::DateTime: Start date and time of the needed data\nperiodEnd::DateTime: End date and time of the needed data \n\n! One year range limit applies !\n\n\n\n\n\n","category":"function"},{"location":"load/#entsoeAPI.GETconstructor.query_month_ahead_total_load","page":"Load","title":"entsoeAPI.GETconstructor.query_month_ahead_total_load","text":"query_month_ahead_total_load(outBiddingZone_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)\n\nConstructs the HTTP request for the data of the month ahaed total load forecast (article 6.1 D: https://transparency.entsoe.eu/content/static_content/Static%20content/knowledge%20base/data-views/load-domain/Data-view%20Total%20Load%20Forecast%20-%20Month%20Ahead.html).  Returns the received HTTP response, together with the used timezone. Minimum time interval in query response is one month!\n\nArguments\n\noutBiddingZone_Domain::Union{mappings.Area, String}: Area for which the load data is needed, can be represented as an Area object or a string with country code or direct code \nperiodStart::DateTime: Start date and time of the needed data\nperiodEnd::DateTime: End date and time of the needed data \n\n! One year range limit applies !\n\n\n\n\n\n","category":"function"},{"location":"load/#entsoeAPI.GETconstructor.query_year_ahead_total_load","page":"Load","title":"entsoeAPI.GETconstructor.query_year_ahead_total_load","text":"query_year_ahead_total_load(outBiddingZone_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)\n\nConstructs the HTTP request for the data of the year ahaed total load forecast (article 6.1 E: https://transparency.entsoe.eu/content/static_content/Static%20content/knowledge%20base/data-views/load-domain/Data-view%20Total%20Load%20Forecast%20-%20Year%20Ahead.html).  Returns the received HTTP response, together with the used timezone. Minimum time interval in query response is one year!\n\nArguments\n\noutBiddingZone_Domain::Union{mappings.Area, String}: Area for which the load data is needed, can be represented as an Area object or a string with country code or direct code \nperiodStart::DateTime: Start date and time of the needed data\nperiodEnd::DateTime: End date and time of the needed data \n\n! One year range limit applies !\n\n\n\n\n\n","category":"function"},{"location":"load/#entsoeAPI.GETconstructor.query_year_ahead_margin","page":"Load","title":"entsoeAPI.GETconstructor.query_year_ahead_margin","text":"query_year_ahead_margin(outBiddingZone_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)\n\nConstructs the HTTP request for the data of the year ahead forecast margin (article 8.1: https://transparency.entsoe.eu/content/static_content/Static%20content/knowledge%20base/data-views/load-domain/Data-view%20Forecast%20Margin%20-%20Year%20Ahead.html).  Returns the received HTTP response, together with the used timezone. Minimum time interval in query response is one year!\n\nArguments\n\noutBiddingZone_Domain::Union{mappings.Area, String}: Area for which the load data is needed, can be represented as an Area object or a string with country code or direct code \nperiodStart::DateTime: Start date and time of the needed data\nperiodEnd::DateTime: End date and time of the needed data \n\n! One year range limit applies !\n\n\n\n\n\n","category":"function"},{"location":"load/#Parse-functions-1","page":"Load","title":"Parse functions","text":"","category":"section"},{"location":"load/#","page":"Load","title":"Load","text":"entsoeAPI.xmlParser.parse_actual_total_load\nentsoeAPI.xmlParser.parse_day_ahead_total_load\nentsoeAPI.xmlParser.parse_week_ahead_total_load\nentsoeAPI.xmlParser.parse_month_ahead_total_load\nentsoeAPI.xmlParser.parse_year_ahead_total_load\nentsoeAPI.xmlParser.parse_year_ahead_margin","category":"page"},{"location":"load/#entsoeAPI.xmlParser.parse_actual_total_load","page":"Load","title":"entsoeAPI.xmlParser.parse_actual_total_load","text":"parse_actual_total_load(xml::Vector{UInt8}, tz::TimeZone)\n\nParses the xml file generated by the function GETconstructor.query_actual_total_load(outBiddingZone_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime). Returns the data in a dataframe.\n\n[time, load]\n\nArguments\n\nxml::Vector{UInt8}: xml data in the format as returned by the function GETconstructor.query_actual_total_load(outBiddingZone_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)\ntz::TimeZone: Timezone in which the dates and times have to be represented\n\n\n\n\n\n","category":"function"},{"location":"load/#entsoeAPI.xmlParser.parse_day_ahead_total_load","page":"Load","title":"entsoeAPI.xmlParser.parse_day_ahead_total_load","text":"parse_day_ahead_total_load(xml::Vector{UInt8}, tz::TimeZone)\n\nParses the xml file generated by the function GETconstructor.query_day_ahead_total_load(outBiddingZone_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime). Returns the data in a dataframe.\n\n[time, load]\n\nArguments\n\nxml::Vector{UInt8}: xml data in the format as returned by the function GETconstructor.query_day_ahead_total_load(outBiddingZone_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)\ntz::TimeZone: Timezone in which the dates and times have to be represented\n\n\n\n\n\n","category":"function"},{"location":"load/#entsoeAPI.xmlParser.parse_week_ahead_total_load","page":"Load","title":"entsoeAPI.xmlParser.parse_week_ahead_total_load","text":"parse_week_ahead_total_load(xml::Vector{UInt8}, tz::TimeZone)\n\nParses the xml file generated by the function GETconstructor.query_week_ahead_total_load(outBiddingZone_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime). Returns the data in a dictionary.\n\n(\"min total load\" => [time, load], \"max total load\" => [time, load])\n\nArguments\n\nxml::Vector{UInt8}: xml data in the format as returned by the function GETconstructor.query_week_ahead_total_load(outBiddingZone_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)\ntz::TimeZone: Timezone in which the dates and times have to be represented\n\n\n\n\n\n","category":"function"},{"location":"load/#entsoeAPI.xmlParser.parse_month_ahead_total_load","page":"Load","title":"entsoeAPI.xmlParser.parse_month_ahead_total_load","text":"parse_month_ahead_total_load(xml::Vector{UInt8}, tz::TimeZone)\n\nParses the xml file generated by the function GETconstructor.query_month_ahead_total_load(outBiddingZone_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime). Returns the data in a dictionary.\n\n(\"min total load\" => [week, load], \"max total load\" => [week, load])\n\nArguments\n\nxml::Vector{UInt8}: xml data in the format as returned by the function GETconstructor.query_month_ahead_total_load(outBiddingZone_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)\ntz::TimeZone: Timezone in which the dates and times have to be represented\n\n\n\n\n\n","category":"function"},{"location":"load/#entsoeAPI.xmlParser.parse_year_ahead_total_load","page":"Load","title":"entsoeAPI.xmlParser.parse_year_ahead_total_load","text":"parse_year_ahead_total_load(xml::Vector{UInt8}, tz::TimeZone)\n\nParses the xml file generated by the function GETconstructor.query_year_ahead_total_load(outBiddingZone_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime). Returns the data in a dictionary.\n\n(\"min total load\" => [week, load], \"max total load\" => [week, load])\n\nArguments\n\nxml::Vector{UInt8}: xml data in the format as returned by the function GETconstructor.query_month_ahead_total_load(outBiddingZone_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)\ntz::TimeZone: Timezone in which the dates and times have to be represented\n\n\n\n\n\n","category":"function"},{"location":"load/#entsoeAPI.xmlParser.parse_year_ahead_margin","page":"Load","title":"entsoeAPI.xmlParser.parse_year_ahead_margin","text":"parse_year_ahead_margin(xml::Vector{UInt8}, tz::TimeZone)\n\nParses the xml file generated by the function GETconstructor.query_year_ahead_margin(outBiddingZone_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime). Returns the data in dataframe.\n\n[year, margin]\n\nArguments\n\nxml::Vector{UInt8}: xml data in the format as returned by the function GETconstructor.query_year_ahead_margin(outBiddingZone_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)\ntz::TimeZone: Timezone in which the dates and times have to be represented\n\n\n\n\n\n","category":"function"}]
}
