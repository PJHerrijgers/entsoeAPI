var documenterSearchIndex = {"docs":
[{"location":"transmission/#Transmission-functions-1","page":"Transmission","title":"Transmission functions","text":"","category":"section"},{"location":"transmission/#","page":"Transmission","title":"Transmission","text":"This file describes the usage of all the functions under the load tab in the ENTSOE-E transparancy platform.","category":"page"},{"location":"transmission/#User-functions-1","page":"Transmission","title":"User functions","text":"","category":"section"},{"location":"transmission/#","page":"Transmission","title":"Transmission","text":"entsoeAPI.forecasted_capacity\nentsoeAPI.offered_capacity\nentsoeAPI.flowbased\nentsoeAPI.intraday_transfer_limits\nentsoeAPI.explicit_allocation_information_capacity\nentsoeAPI.explicit_allocation_information_revenue\nentsoeAPI.total_capacity_nominated\nentsoeAPI.total_capacity_already_allocated\nentsoeAPI.day_ahead_prices\nentsoeAPI.implicit_auction_net_positions\nentsoeAPI.implicit_auction_congestion_income\nentsoeAPI.total_commercial_schedules\nentsoeAPI.physical_flows\nentsoeAPI.capacity_allocated_outside_EU","category":"page"},{"location":"transmission/#entsoeAPI.forecasted_capacity","page":"Transmission","title":"entsoeAPI.forecasted_capacity","text":"forecasted_capacity(contract_MarketAgreementType::String, in_Domain::Union{mappings.Area, String}, out_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)\n\nConstructs the HTTP request for the data of the forecasted capacity over a certain border (article 11.1 A: https://transparency.entsoe.eu/content/static_content/Static%20content/knowledge%20base/data-views/transmission-domain/Data-view%20Forecasted%20Transfer%20Capacities%20-%20Day%20Ahead.html). Parses the received HTTP response and returns the data in a dataframe.\n\n[time, capacity]\n\nMinimum time interval in query response ranges from day to year, depending on selected Contract_MarketAgreementType!\n\nArguments\n\ncontract_MarketAgreementType::String:The specification of the kind of the agreement, e.g. long term, daily contract. Used to distinguish between day ahead, week ahead, month ahead and year ahead forecasts.\nin_Domain::Union{mappings.Area, String}: The area where energy is going, can be represented as an Area object or a string with country code or direct code \nout_Domain::Union{mappings.Area, String}: The area where energy is coming from, can be represented as an Area object or a string with country code or direct code\nperiodStart::DateTime: Start date and time of the needed data\nperiodEnd::DateTime: End date and time of the needed data \n\n! One year range limit applies !\n\n\n\n\n\n","category":"function"},{"location":"transmission/#entsoeAPI.offered_capacity","page":"Transmission","title":"entsoeAPI.offered_capacity","text":"offered_capacity(auctionType::String, contract_MarketAgreementType::String, in_Domain::Union{mappings.Area, String}, out_Domain::Union{mappings.Area}, periodStart::DateTime, periodEnd::DateTime[, auctionCategory::String = \"\", update_DateAndOrTime::DateTime = DateTime(0), classificationSequence_AttributeInstanceComponentPosition::String = \"\"])\n\nConstructs the HTTP request for the data of the offered capacity over a certain border (article 11.1 A: https://transparency.entsoe.eu/content/static_content/Static%20content/knowledge%20base/data-views/transmission/Data-view%20Explicit%20Allocations%20-%20Intraday.html). Parses the received HTTP response and returns the data in a dataframe.\n\n[time, capacity]\n\nMinimum time interval in query response ranges from day to year, depending on selected Contract_MarketAgreementType!\n\nArguments\n\nauctionType::String: The kind of the auction (e.g. implicit, explicit ...)\ncontract_MarketAgreementType::String: The specification of the kind of the agreement, e.g. long term, daily contract. Used to distinguish between day ahead, week ahead, month ahead and year ahead forecasts.\nin_Domain::Union{mappings.Area, String}: The area where energy is going, can be represented as an Area object or a string with country code or direct code \nout_Domain::Union{mappings.Area, String}: The area where energy is coming from, can be represented as an Area object or a string with country code or direct code\nperiodStart::DateTime: Start date and time of the needed data\nperiodEnd::DateTime: End date and time of the needed data \nauctionCategory::String = \"\": The product category of an auction\nupdate_DateAndOrTime::DateTime = \"\": The date and time of the update of the document\nclassificationSequence_AttributeInstanceComponentPosition::String = \"\": A sequential value representing a relative sequence number. A classification sequence is only provided in the case where there are several auctions in the same category and contract type.\n\n! 100 document limit applies !\n\n\n\n\n\n","category":"function"},{"location":"transmission/#entsoeAPI.flowbased","page":"Transmission","title":"entsoeAPI.flowbased","text":"flowbased(processType::String, domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)\n\nConstructs the HTTP request for the data of the flow-based parameters of a certain area (article 11.1 B: https://transparency.entsoe.eu/content/static_content/Static%20content/knowledge%20base/data-views/transmission-domain/Data-view%20Day%20Ahead%20Flow%20Based%20Allocations.html). Parses the received HTTP response and returns the data in a dictionary.\n\n(\"time\" => [cb/co, RAM, domain, ..., domain])\n\nMinimum time interval in query response is one day for day-ahead allocations!\n\nArguments\n\nprocessType::String: The kind of the auction (e.g. implicit, explicit ...)\ndomain::Union{mappings.Area, String}: The area for which the data is needed, can be represented as an Area object or a string with country code or direct code \nperiodStart::DateTime: Start date and time of the needed data\nperiodEnd::DateTime: End date and time of the needed data \n\n! 100 document limit applies !\n\n\n\n\n\n","category":"function"},{"location":"transmission/#entsoeAPI.intraday_transfer_limits","page":"Transmission","title":"entsoeAPI.intraday_transfer_limits","text":"intraday_transfer_limits(in_Domain::Union{mappings.Area, String}, out_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)\n\nConstructs the HTTP request for the data of the intraday transfer limits over a certain border (article 11.3: https://transparency.entsoe.eu/content/static_content/Static%20content/knowledge%20base/data-views/transmission-domain/Data-view%20Cross%20Border%20Capacity%20of%20DC%20Links%20-%20Intraday%20Transfer%20Limits.html). Parses the received HTTP response and returns the data in a dataframe.\n\n[time, capacity]\n\nMinimum time interval in query response ranges from part of day up to one day!\n\nArguments\n\nin_Domain::Union{mappings.Area, String}: The area where energy is going, can be represented as an Area object or a string with country code or direct code \nout_Domain::Union{mappings.Area, String}: The area where energy is coming from, can be represented as an Area object or a string with country code or direct code\nperiodStart::DateTime: Start date and time of the needed data\nperiodEnd::DateTime: End date and time of the needed data \n\n! One year range limit applies !\n\n\n\n\n\n","category":"function"},{"location":"transmission/#entsoeAPI.explicit_allocation_information_capacity","page":"Transmission","title":"entsoeAPI.explicit_allocation_information_capacity","text":"explicit_allocation_information_capacity(businessType::String, contract_MarketAgreementType::String, in_Domain::Union{mappings.Area, String}, out_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime[, auctionCategory::String = \"\", classificationSequence_AttributeInstanceComponentPosition::String = \"\"])\n\nConstructs the HTTP request for the data of the capacity explicitly allocated to the market over a certain border and its revenue (article 12.1 A: https://transparency.entsoe.eu/content/static_content/Static%20content/knowledge%20base/data-views/transmission/Data-view%20Explicit%20Allocations%20-%20Day%20ahead.html). Parses the received HTTP response and returns the data in a dataframe.\n\n[time, capacity [, price]]\n\nMinimum time interval in query response ranges from part of day to year, depending on selected Contract_MarketAgreementType!\n\nArguments\n\nbusinessType::String: The identification of the nature of the data\ncontract_MarketAgreementType::String: The specification of the kind of the agreement, e.g. long term, daily contract. Used to distinguish between day ahead, week ahead, month ahead and year ahead forecasts.\nin_Domain::Union{mappings.Area, String}: The area where energy is going, can be represented as an Area object or a string with country code or direct code \nout_Domain::Union{mappings.Area, String}: The area where energy is coming from, can be represented as an Area object or a string with country code or direct code\nperiodStart::DateTime: Start date and time of the needed data\nperiodEnd::DateTime: End date and time of the needed data \nauctionCategory::String = \"\": The product category of an auction\nclassificationSequence_AttributeInstanceComponentPosition::String = \"\": A sequential value representing a relative sequence number. A classification sequence is only provided in the case where there are several auctions in the same category and contract type.\n\n! 100 document limit applies !\n\n\n\n\n\n","category":"function"},{"location":"transmission/#entsoeAPI.explicit_allocation_information_revenue","page":"Transmission","title":"entsoeAPI.explicit_allocation_information_revenue","text":"explicit_allocation_information_revenue(contract_MarketAgreementType::String, in_Domain::Union{mappings.Area, String}, out_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)\n\nConstructs the HTTP request for the data of the revenue of the capacity explicitly allocated to the market over a certain border (article 12.1 A: https://transparency.entsoe.eu/content/static_content/Static%20content/knowledge%20base/data-views/transmission-domain/Data-view%20Explicit%20Allocations%20Revenue.html). Parses the received HTTP response and returns the data in a dataframe.\n\n[time, price]\n\nMinimum time interval in query response ranges from part of day to year, depending on selected Contract_MarketAgreementType!\n\nArguments\n\ncontract_MarketAgreementType::String: The specification of the kind of the agreement, e.g. long term, daily contract. Used to distinguish between day ahead, week ahead, month ahead and year ahead forecasts.\nin_Domain::Union{mappings.Area, String}: The area where energy is going, can be represented as an Area object or a string with country code or direct code \nout_Domain::Union{mappings.Area, String}: The area where energy is coming from, can be represented as an Area object or a string with country code or direct code\nperiodStart::DateTime: Start date and time of the needed data\nperiodEnd::DateTime: End date and time of the needed data \n\n! 100 document limit applies !\n\n\n\n\n\n","category":"function"},{"location":"transmission/#entsoeAPI.total_capacity_nominated","page":"Transmission","title":"entsoeAPI.total_capacity_nominated","text":"total_capacity_nominated(in_Domain::Union{mappings.Area, String}, out_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)\n\nConstructs the HTTP request for the data of the total nominated capacity over a certain border (article 12.1 B: https://transparency.entsoe.eu/content/static_content/Static%20content/knowledge%20base/data-views/transmission-domain/Data-view%20Total%20Nominated%20Capacity.html). Parses the received HTTP response and returns the data in a dataframe.\n\n[time, capacity]\n\nMinimum time interval in query response is one day!\n\nArguments\n\nin_Domain::Union{mappings.Area, String}: The area where energy is going, can be represented as an Area object or a string with country code or direct code \nout_Domain::Union{mappings.Area, String}: The area where energy is coming from, can be represented as an Area object or a string with country code or direct code\nperiodStart::DateTime: Start date and time of the needed data\nperiodEnd::DateTime: End date and time of the needed data \n\n! One year range limit applies !\n\n\n\n\n\n","category":"function"},{"location":"transmission/#entsoeAPI.total_capacity_already_allocated","page":"Transmission","title":"entsoeAPI.total_capacity_already_allocated","text":"total_capacity_already_allocated(contract_MarketAgreementType::String, in_Domain::Union{mappings.Area, String}, out_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime[, auctionCategory::String = \"\"])\n\nConstructs the HTTP request for the data of the total capacity already allocated over a certain border (article 12.1 C: https://transparency.entsoe.eu/content/static_content/Static%20content/knowledge%20base/data-views/transmission/Data-view%20Explicit%20Allocations%20-%20AAC.html). Parses the received HTTP response and returns the data in a dataframe.\n\n[time, capacity]\n\nMinimum time interval in query response ranges from part of day to year, depending on selected Contract_MarketAgreement.Type!\n\nArguments\n\ncontract_MarketAgreementType::String: The specification of the kind of the agreement, e.g. long term, daily contract. Used to distinguish between day ahead, week ahead, month ahead and year ahead forecasts.\nin_Domain::Union{mappings.Area, String}: The area where energy is going, can be represented as an Area object or a string with country code or direct code \nout_Domain::Union{mappings.Area, String}: The area where energy is coming from, can be represented as an Area object or a string with country code or direct code\nperiodStart::DateTime: Start date and time of the needed data\nperiodEnd::DateTime: End date and time of the needed data \nauctionCategory::String = \"\": The product category of an auction\n\n! 100 documents limit applies !\n\n\n\n\n\n","category":"function"},{"location":"transmission/#entsoeAPI.day_ahead_prices","page":"Transmission","title":"entsoeAPI.day_ahead_prices","text":"day_ahead_prices(domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)\n\nConstructs the HTTP request for the data of the day ahead prices in a certain area (article 12.1 D: https://transparency.entsoe.eu/content/static_content/Static%20content/knowledge%20base/data-views/transmission-domain/Data-view%20Day-ahead%20prices.html). Parses the received HTTP response and returns the data in a dataframe.\n\n[time, price]\n\nMinimum time interval in query response is one day!\n\nArguments\n\ndomain::Union{mappings.Area, String}: The area for which the data is needed, can be represented as an Area object or a string with country code or direct code\nperiodStart::DateTime: Start date and time of the needed data\nperiodEnd::DateTime: End date and time of the needed data \n\n! One year range limit applies !\n\n\n\n\n\n","category":"function"},{"location":"transmission/#entsoeAPI.implicit_auction_net_positions","page":"Transmission","title":"entsoeAPI.implicit_auction_net_positions","text":"implicit_auction_net_positions(businessType::String, contract_MarketAgreementType::String, domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)\n\nConstructs the HTTP request for the data of the net positions and congestion income of implictly allocated capacity over a certain border (article 12.1 E: https://transparency.entsoe.eu/content/static_content/Static%20content/knowledge%20base/data-views/transmission-domain/Data-view%20Intraday%20Flow%20Based%20Implicit%20Allocations%20-%20Congestion%20Income.html). Parses the received HTTP response and returns the data in a dataframe.\n\n[time, import/export, capacity]\n\nMinimum time interval in query response is one day!\n\nArguments\n\nbusinessType::String: The identification of the nature of the data.\ncontract_MarketAgreementType::String: The specification of the kind of the agreement, e.g. long term, daily contract. Used to distinguish between day ahead, week ahead, month ahead and year ahead forecasts.\nin_Domain::Union{mappings.Area, String}: The area where energy is going, can be represented as an Area object or a string with country code or direct code \nout_Domain::Union{mappings.Area, String}: The area where energy is coming from, can be represented as an Area object or a string with country code or direct code\nperiodStart::DateTime: Start date and time of the needed data\nperiodEnd::DateTime: End date and time of the needed data \n\n! One year range limit applies ! ! 100 documents limit applies !\n\n\n\n\n\n","category":"function"},{"location":"transmission/#entsoeAPI.implicit_auction_congestion_income","page":"Transmission","title":"entsoeAPI.implicit_auction_congestion_income","text":"implicit_auction_congestion_income(businessType::String, contract_MarketAgreementType::String, domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)\n\nConstructs the HTTP request for the data of the net positions and congestion income of implictly allocated capacity over a certain border (article 12.1 E: https://transparency.entsoe.eu/content/static_content/Static%20content/knowledge%20base/data-views/transmission-domain/Data-view%20Intraday%20Flow%20Based%20Implicit%20Allocations%20-%20Congestion%20Income.html). Parses the received HTTP response and returns the data in a dataframe.\n\n[time, price]\n\nMinimum time interval in query response is one day!\n\nArguments\n\nbusinessType::String: The identification of the nature of the data.\ncontract_MarketAgreementType::String: The specification of the kind of the agreement, e.g. long term, daily contract. Used to distinguish between day ahead, week ahead, month ahead and year ahead forecasts.\nin_Domain::Union{mappings.Area, String}: The area where energy is going, can be represented as an Area object or a string with country code or direct code \nout_Domain::Union{mappings.Area, String}: The area where energy is coming from, can be represented as an Area object or a string with country code or direct code\nperiodStart::DateTime: Start date and time of the needed data\nperiodEnd::DateTime: End date and time of the needed data \n\n! One year range limit applies ! ! 100 documents limit applies !\n\n\n\n\n\n","category":"function"},{"location":"transmission/#entsoeAPI.total_commercial_schedules","page":"Transmission","title":"entsoeAPI.total_commercial_schedules","text":"total_commercial_schedules(contract_MarketAgreementType::String, in_Domain::Union{mappings.Area, String}, out_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)\n\nConstructs the HTTP request for the data of the total or day ahead commercial schedules over a certain border (article 12.1 F: https://transparency.entsoe.eu/content/static_content/Static%20content/knowledge%20base/data-views/transmission-domain/Data-view%20Scheduled%20Commercial%20Exchanges%20-%20Day%20Ahead.html). Parses the received HTTP response and returns the data in a dataframe.\n\n[time, capacity]\n\nMinimum time interval in query response is one day!\n\nArguments\n\ncontract_MarketAgreementType::String: The specification of the kind of the agreement, e.g. long term, daily contract. Used to distinguish between day ahead, week ahead, month ahead and year ahead forecasts.\nin_Domain::Union{mappings.Area, String}: The area where energy is going, can be represented as an Area object or a string with country code or direct code \nout_Domain::Union{mappings.Area, String}: The area where energy is coming from, can be represented as an Area object or a string with country code or direct code\nperiodStart::DateTime: Start date and time of the needed data\nperiodEnd::DateTime: End date and time of the needed data \n\n! One year range limit applies !\n\n\n\n\n\n","category":"function"},{"location":"transmission/#entsoeAPI.physical_flows","page":"Transmission","title":"entsoeAPI.physical_flows","text":"phyiscal_flows(in_Domain::Union{mappings.Area, String}, out_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)\n\nConstructs the HTTP request for the data of the physical flows over a certain border (article 12.1 G: https://transparency.entsoe.eu/content/static_content/Static%20content/knowledge%20base/data-views/transmission-domain/Data-view%20Cross%20Border%20Physical%20Flows.html). Parses the received HTTP response and returns the data in a dataframe.\n\n[time, capacity]\n\nMinimum time interval in query response is MTU period!\n\nArguments\n\nin_Domain::Union{mappings.Area, String}: The area where energy is going, can be represented as an Area object or a string with country code or direct code \nout_Domain::Union{mappings.Area, String}: The area where energy is coming from, can be represented as an Area object or a string with country code or direct code\nperiodStart::DateTime: Start date and time of the needed data\nperiodEnd::DateTime: End date and time of the needed data \n\n! One year range limit applies !\n\n\n\n\n\n","category":"function"},{"location":"transmission/#entsoeAPI.capacity_allocated_outside_EU","page":"Transmission","title":"entsoeAPI.capacity_allocated_outside_EU","text":"capacity_allocated_outside_EU(auctionType::String, contract_MarketAgreementType::String, in_Domain::Union{mappings.Area, String}, out_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime[, auctionCategory::String = \"\", classificationSequence_AttributeInstanceComponentPosition::String = \"\"])\n\nConstructs the HTTP request for the data of the capacity allocated outside the EU over a certain border (article 12.1 H: https://transparency.entsoe.eu/content/static_content/Static%20content/knowledge%20base/data-views/transmission/Data-view%20Transfer%20Capacities%20Allocated%20with%20Third%20Countries.html). Parses the received HTTP response and returns the data in a dataframe.\n\n[time, capacity]\n\nMinimum time interval in query response ranges from part of day to year, depending on selected Contract_MarketAgreementType!\n\nArguments\n\nauctionType::String: The kind of the auction (e.g. implicit, explicit ...)\ncontract_MarketAgreementType::String: The specification of the kind of the agreement, e.g. long term, daily contract. Used to distinguish between day ahead, week ahead, month ahead and year ahead forecasts.\nin_Domain::Union{mappings.Area, String}: The area where energy is going, can be represented as an Area object or a string with country code or direct code \nout_Domain::Union{mappings.Area, String}: The area where energy is coming from, can be represented as an Area object or a string with country code or direct code\nperiodStart::DateTime: Start date and time of the needed data\nperiodEnd::DateTime: End date and time of the needed data \nauctionCategory::String = \"\": The product category of an auction\nclassificationSequence_AttributeInstanceComponentPosition::String = \"\": A sequential value representing a relative sequence number. A classification sequence is only provided in the case where there are several auctions in the same category and contract type.\n\n! 100 document limit applies !\n\n\n\n\n\n","category":"function"},{"location":"transmission/#GET-functions-1","page":"Transmission","title":"GET functions","text":"","category":"section"},{"location":"transmission/#","page":"Transmission","title":"Transmission","text":"entsoeAPI.GETconstructor.query_forecasted_capacity\nentsoeAPI.GETconstructor.query_offered_capacity\nentsoeAPI.GETconstructor.query_flowbased\nentsoeAPI.GETconstructor.query_intraday_transfer_limits\nentsoeAPI.GETconstructor.query_explicit_allocation_information_capacity\nentsoeAPI.GETconstructor.query_explicit_allocation_information_revenue\nentsoeAPI.GETconstructor.query_total_capacity_nominated\nentsoeAPI.GETconstructor.query_total_capacity_already_allocated\nentsoeAPI.GETconstructor.query_day_ahead_prices\nentsoeAPI.GETconstructor.query_implicit_auction_net_positions_and_congestion_income\nentsoeAPI.GETconstructor.query_total_commercial_schedules\nentsoeAPI.GETconstructor.query_physical_flows\nentsoeAPI.GETconstructor.query_capacity_allocated_outside_EU","category":"page"},{"location":"transmission/#entsoeAPI.GETconstructor.query_forecasted_capacity","page":"Transmission","title":"entsoeAPI.GETconstructor.query_forecasted_capacity","text":"query_forecasted_capacity(contract_MarketAgreementType::String, in_Domain::Union{mappings.Area, String}, out_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)\n\nConstructs the HTTP request for the data of the forecasted capacity over a certain border (article 11.1 A: https://transparency.entsoe.eu/content/staticcontent/Static%20content/knowledge%20base/data-views/transmission-domain/Data-view%20Forecasted%20Transfer%20Capacities%20-%20Day%20Ahead.html). Returns the received HTTP response, together with the used timezone. Minimum time interval in query response ranges from day to year, depending on selected ContractMarketAgreementType!\n\nArguments\n\ncontract_MarketAgreementType::String:The specification of the kind of the agreement, e.g. long term, daily contract. Used to distinguish between day ahead, week ahead, month ahead and year ahead forecasts.\nin_Domain::Union{mappings.Area, String}: The area where energy is going, can be represented as an Area object or a string with country code or direct code \nout_Domain::Union{mappings.Area, String}: The area where energy is coming from, can be represented as an Area object or a string with country code or direct code\nperiodStart::DateTime: Start date and time of the needed data\nperiodEnd::DateTime: End date and time of the needed data \n\n! One year range limit applies !\n\n\n\n\n\n","category":"function"},{"location":"transmission/#entsoeAPI.GETconstructor.query_offered_capacity","page":"Transmission","title":"entsoeAPI.GETconstructor.query_offered_capacity","text":"query_offered_capacity(auctionType::String, contract_MarketAgreementType::String, in_Domain::Union{mappings.Area, String}, out_Domain::Union{mappings.Area}, periodStart::DateTime, periodEnd::DateTime[, auctionCategory::String = \"\", update_DateAndOrTime::DateTime = DateTime(0), classificationSequence_AttributeInstanceComponentPosition::String = \"\"])\n\nConstructs the HTTP request for the data of the offered capacity over a certain border (article 11.1 A: https://transparency.entsoe.eu/content/staticcontent/Static%20content/knowledge%20base/data-views/transmission/Data-view%20Explicit%20Allocations%20-%20Intraday.html). Returns the received HTTP response, together with the used timezone. Minimum time interval in query response ranges from day to year, depending on selected ContractMarketAgreementType!\n\nArguments\n\nauctionType::String: The kind of the auction (e.g. implicit, explicit ...)\ncontract_MarketAgreementType::String: The specification of the kind of the agreement, e.g. long term, daily contract. Used to distinguish between day ahead, week ahead, month ahead and year ahead forecasts.\nin_Domain::Union{mappings.Area, String}: The area where energy is going, can be represented as an Area object or a string with country code or direct code \nout_Domain::Union{mappings.Area, String}: The area where energy is coming from, can be represented as an Area object or a string with country code or direct code\nperiodStart::DateTime: Start date and time of the needed data\nperiodEnd::DateTime: End date and time of the needed data \nauctionCategory::String = \"\": The product category of an auction\nupdate_DateAndOrTime::DateTime = \"\": The date and time of the update of the document\nclassificationSequence_AttributeInstanceComponentPosition::String = \"\": A sequential value representing a relative sequence number. A classification sequence is only provided in the case where there are several auctions in the same category and contract type.\n\n! 100 document limit applies !\n\n\n\n\n\n","category":"function"},{"location":"transmission/#entsoeAPI.GETconstructor.query_flowbased","page":"Transmission","title":"entsoeAPI.GETconstructor.query_flowbased","text":"query_flowbased(processType::String, domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)\n\nConstructs the HTTP request for the data of the flow-based parameters of a certain area (article 11.1 B: https://transparency.entsoe.eu/content/static_content/Static%20content/knowledge%20base/data-views/transmission-domain/Data-view%20Day%20Ahead%20Flow%20Based%20Allocations.html). Returns the received HTTP response, together with the used timezone. Minimum time interval in query response is one day for day-ahead allocations!\n\nArguments\n\nprocessType::String: The kind of the auction (e.g. implicit, explicit ...)\ndomain::Union{mappings.Area, String}: The area for which the data is needed, can be represented as an Area object or a string with country code or direct code \nperiodStart::DateTime: Start date and time of the needed data\nperiodEnd::DateTime: End date and time of the needed data \n\n! 100 document limit applies !\n\n\n\n\n\n","category":"function"},{"location":"transmission/#entsoeAPI.GETconstructor.query_intraday_transfer_limits","page":"Transmission","title":"entsoeAPI.GETconstructor.query_intraday_transfer_limits","text":"query_intraday_transfer_limits(in_Domain::Union{mappings.Area, String}, out_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)\n\nConstructs the HTTP request for the data of the intraday transfer limits over a certain border (article 11.3: https://transparency.entsoe.eu/content/static_content/Static%20content/knowledge%20base/data-views/transmission-domain/Data-view%20Cross%20Border%20Capacity%20of%20DC%20Links%20-%20Intraday%20Transfer%20Limits.html). Returns the received HTTP response, together with the used timezone. Minimum time interval in query response ranges from part of day up to one day!\n\nArguments\n\nin_Domain::Union{mappings.Area, String}: The area where energy is going, can be represented as an Area object or a string with country code or direct code \nout_Domain::Union{mappings.Area, String}: The area where energy is coming from, can be represented as an Area object or a string with country code or direct code\nperiodStart::DateTime: Start date and time of the needed data\nperiodEnd::DateTime: End date and time of the needed data \n\n! One year range limit applies !\n\n\n\n\n\n","category":"function"},{"location":"transmission/#entsoeAPI.GETconstructor.query_explicit_allocation_information_capacity","page":"Transmission","title":"entsoeAPI.GETconstructor.query_explicit_allocation_information_capacity","text":"query_explicit_allocation_information_capacity(businessType::String, contract_MarketAgreementType::String, in_Domain::Union{mappings.Area, String}, out_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime[, auctionCategory::String = \"\", classificationSequence_AttributeInstanceComponentPosition::String = \"\"])\n\nConstructs the HTTP request for the data of the capacity explicitly allocated to the market over a certain border and its revenue (article 12.1 A: https://transparency.entsoe.eu/content/staticcontent/Static%20content/knowledge%20base/data-views/transmission/Data-view%20Explicit%20Allocations%20-%20Day%20ahead.html). Returns the received HTTP response, together with the used timezone. Minimum time interval in query response ranges from part of day to year, depending on selected ContractMarketAgreementType!\n\nArguments\n\nbusinessType::String: The identification of the nature of the data\ncontract_MarketAgreementType::String: The specification of the kind of the agreement, e.g. long term, daily contract. Used to distinguish between day ahead, week ahead, month ahead and year ahead forecasts.\nin_Domain::Union{mappings.Area, String}: The area where energy is going, can be represented as an Area object or a string with country code or direct code \nout_Domain::Union{mappings.Area, String}: The area where energy is coming from, can be represented as an Area object or a string with country code or direct code\nperiodStart::DateTime: Start date and time of the needed data\nperiodEnd::DateTime: End date and time of the needed data \nauctionCategory::String = \"\": The product category of an auction\nclassificationSequence_AttributeInstanceComponentPosition::String = \"\": A sequential value representing a relative sequence number. A classification sequence is only provided in the case where there are several auctions in the same category and contract type.\n\n! 100 document limit applies !\n\n\n\n\n\n","category":"function"},{"location":"transmission/#entsoeAPI.GETconstructor.query_explicit_allocation_information_revenue","page":"Transmission","title":"entsoeAPI.GETconstructor.query_explicit_allocation_information_revenue","text":"query_explicit_allocation_information_revenue(contract_MarketAgreementType::String, in_Domain::Union{mappings.Area, String}, out_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)\n\nConstructs the HTTP request for the data of the revenue of the capacity explicitly allocated to the market over a certain border (article 12.1 A: https://transparency.entsoe.eu/content/staticcontent/Static%20content/knowledge%20base/data-views/transmission-domain/Data-view%20Explicit%20Allocations%20Revenue.html). Returns the received HTTP response, together with the used timezone. Minimum time interval in query response ranges from part of day to year, depending on selected ContractMarketAgreementType!\n\nArguments\n\ncontract_MarketAgreementType::String: The specification of the kind of the agreement, e.g. long term, daily contract. Used to distinguish between day ahead, week ahead, month ahead and year ahead forecasts.\nin_Domain::Union{mappings.Area, String}: The area where energy is going, can be represented as an Area object or a string with country code or direct code \nout_Domain::Union{mappings.Area, String}: The area where energy is coming from, can be represented as an Area object or a string with country code or direct code\nperiodStart::DateTime: Start date and time of the needed data\nperiodEnd::DateTime: End date and time of the needed data \n\n! 100 document limit applies !\n\n\n\n\n\n","category":"function"},{"location":"transmission/#entsoeAPI.GETconstructor.query_total_capacity_nominated","page":"Transmission","title":"entsoeAPI.GETconstructor.query_total_capacity_nominated","text":"query_total_capacity_nominated(in_Domain::Union{mappings.Area, String}, out_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)\n\nConstructs the HTTP request for the data of the total nominated capacity over a certain border (article 12.1 B: https://transparency.entsoe.eu/content/static_content/Static%20content/knowledge%20base/data-views/transmission-domain/Data-view%20Total%20Nominated%20Capacity.html). Returns the received HTTP response, together with the used timezone. Minimum time interval in query response is one day!\n\nArguments\n\nin_Domain::Union{mappings.Area, String}: The area where energy is going, can be represented as an Area object or a string with country code or direct code \nout_Domain::Union{mappings.Area, String}: The area where energy is coming from, can be represented as an Area object or a string with country code or direct code\nperiodStart::DateTime: Start date and time of the needed data\nperiodEnd::DateTime: End date and time of the needed data \n\n! One year range limit applies !\n\n\n\n\n\n","category":"function"},{"location":"transmission/#entsoeAPI.GETconstructor.query_total_capacity_already_allocated","page":"Transmission","title":"entsoeAPI.GETconstructor.query_total_capacity_already_allocated","text":"query_total_capacity_already_allocated(contract_MarketAgreementType::String, in_Domain::Union{mappings.Area, String}, out_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime[, auctionCategory::String = \"\"])\n\nConstructs the HTTP request for the data of the total capacity already allocated over a certain border (article 12.1 C: https://transparency.entsoe.eu/content/staticcontent/Static%20content/knowledge%20base/data-views/transmission/Data-view%20Explicit%20Allocations%20-%20AAC.html). Returns the received HTTP response, together with the used timezone. Minimum time interval in query response ranges from part of day to year, depending on selected ContractMarketAgreement.Type!\n\nArguments\n\ncontract_MarketAgreementType::String: The specification of the kind of the agreement, e.g. long term, daily contract. Used to distinguish between day ahead, week ahead, month ahead and year ahead forecasts.\nin_Domain::Union{mappings.Area, String}: The area where energy is going, can be represented as an Area object or a string with country code or direct code \nout_Domain::Union{mappings.Area, String}: The area where energy is coming from, can be represented as an Area object or a string with country code or direct code\nperiodStart::DateTime: Start date and time of the needed data\nperiodEnd::DateTime: End date and time of the needed data \nauctionCategory::String = \"\": The product category of an auction\n\n! 100 documents limit applies !\n\n\n\n\n\n","category":"function"},{"location":"transmission/#entsoeAPI.GETconstructor.query_day_ahead_prices","page":"Transmission","title":"entsoeAPI.GETconstructor.query_day_ahead_prices","text":"query_day_ahead_prices(domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)\n\nConstructs the HTTP request for the data of the day ahead prices in a certain area (article 12.1 D: https://transparency.entsoe.eu/content/static_content/Static%20content/knowledge%20base/data-views/transmission-domain/Data-view%20Day-ahead%20prices.html). Returns the received HTTP response, together with the used timezone. Minimum time interval in query response is one day!\n\nArguments\n\ndomain::Union{mappings.Area, String}: The area for which the data is needed, can be represented as an Area object or a string with country code or direct code\nperiodStart::DateTime: Start date and time of the needed data\nperiodEnd::DateTime: End date and time of the needed data \n\n! One year range limit applies !\n\n\n\n\n\n","category":"function"},{"location":"transmission/#entsoeAPI.GETconstructor.query_implicit_auction_net_positions_and_congestion_income","page":"Transmission","title":"entsoeAPI.GETconstructor.query_implicit_auction_net_positions_and_congestion_income","text":"query_implicit_auction_net_positions_and_congestion_income(businessType::String, contract_MarketAgreementType::String, domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)\n\nConstructs the HTTP request for the data of the net positions and congestion income of implictly allocated capacity over a certain border (article 12.1 E: https://transparency.entsoe.eu/content/static_content/Static%20content/knowledge%20base/data-views/transmission-domain/Data-view%20Intraday%20Flow%20Based%20Implicit%20Allocations%20-%20Congestion%20Income.html). Returns the received HTTP response, together with the used timezone. Minimum time interval in query response is one day!\n\nArguments\n\nbusinessType::String: The identification of the nature of the data.\ncontract_MarketAgreementType::String: The specification of the kind of the agreement, e.g. long term, daily contract. Used to distinguish between day ahead, week ahead, month ahead and year ahead forecasts.\nin_Domain::Union{mappings.Area, String}: The area where energy is going, can be represented as an Area object or a string with country code or direct code \nout_Domain::Union{mappings.Area, String}: The area where energy is coming from, can be represented as an Area object or a string with country code or direct code\nperiodStart::DateTime: Start date and time of the needed data\nperiodEnd::DateTime: End date and time of the needed data \n\n! One year range limit applies ! ! 100 documents limit applies !\n\n\n\n\n\n","category":"function"},{"location":"transmission/#entsoeAPI.GETconstructor.query_total_commercial_schedules","page":"Transmission","title":"entsoeAPI.GETconstructor.query_total_commercial_schedules","text":"query_total_commercial_schedules(contract_MarketAgreementType::String, in_Domain::Union{mappings.Area, String}, out_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)\n\nConstructs the HTTP request for the data of the total or day ahead commercial schedules over a certain border (article 12.1 F: https://transparency.entsoe.eu/content/static_content/Static%20content/knowledge%20base/data-views/transmission-domain/Data-view%20Scheduled%20Commercial%20Exchanges%20-%20Day%20Ahead.html). Returns the received HTTP response, together with the used timezone. Minimum time interval in query response is one day!\n\nArguments\n\ncontract_MarketAgreementType::String: The specification of the kind of the agreement, e.g. long term, daily contract. Used to distinguish between day ahead, week ahead, month ahead and year ahead forecasts.\nin_Domain::Union{mappings.Area, String}: The area where energy is going, can be represented as an Area object or a string with country code or direct code \nout_Domain::Union{mappings.Area, String}: The area where energy is coming from, can be represented as an Area object or a string with country code or direct code\nperiodStart::DateTime: Start date and time of the needed data\nperiodEnd::DateTime: End date and time of the needed data \n\n! One year range limit applies !\n\n\n\n\n\n","category":"function"},{"location":"transmission/#entsoeAPI.GETconstructor.query_physical_flows","page":"Transmission","title":"entsoeAPI.GETconstructor.query_physical_flows","text":"query_physical_flows(in_Domain::Union{mappings.Area, String}, out_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)\n\nConstructs the HTTP request for the data of the physical flows over a certain border (article 12.1 G: https://transparency.entsoe.eu/content/static_content/Static%20content/knowledge%20base/data-views/transmission-domain/Data-view%20Cross%20Border%20Physical%20Flows.html). Returns the received HTTP response, together with the used timezone. Minimum time interval in query response is MTU period!\n\nArguments\n\nin_Domain::Union{mappings.Area, String}: The area where energy is going, can be represented as an Area object or a string with country code or direct code \nout_Domain::Union{mappings.Area, String}: The area where energy is coming from, can be represented as an Area object or a string with country code or direct code\nperiodStart::DateTime: Start date and time of the needed data\nperiodEnd::DateTime: End date and time of the needed data \n\n! One year range limit applies !\n\n\n\n\n\n","category":"function"},{"location":"transmission/#entsoeAPI.GETconstructor.query_capacity_allocated_outside_EU","page":"Transmission","title":"entsoeAPI.GETconstructor.query_capacity_allocated_outside_EU","text":"query_capacity_allocated_outside_EU(auctionType::String, contract_MarketAgreementType::String, in_Domain::Union{mappings.Area, String}, out_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime[, auctionCategory::String = \"\", classificationSequence_AttributeInstanceComponentPosition::String = \"\"])\n\nConstructs the HTTP request for the data of the capacity allocated outside the EU over a certain border (article 12.1 H: https://transparency.entsoe.eu/content/staticcontent/Static%20content/knowledge%20base/data-views/transmission/Data-view%20Transfer%20Capacities%20Allocated%20with%20Third%20Countries.html). Returns the received HTTP response, together with the used timezone. Minimum time interval in query response ranges from part of day to year, depending on selected ContractMarketAgreementType!\n\nArguments\n\nauctionType::String: The kind of the auction (e.g. implicit, explicit ...)\ncontract_MarketAgreementType::String: The specification of the kind of the agreement, e.g. long term, daily contract. Used to distinguish between day ahead, week ahead, month ahead and year ahead forecasts.\nin_Domain::Union{mappings.Area, String}: The area where energy is going, can be represented as an Area object or a string with country code or direct code \nout_Domain::Union{mappings.Area, String}: The area where energy is coming from, can be represented as an Area object or a string with country code or direct code\nperiodStart::DateTime: Start date and time of the needed data\nperiodEnd::DateTime: End date and time of the needed data \nauctionCategory::String = \"\": The product category of an auction\nclassificationSequence_AttributeInstanceComponentPosition::String = \"\": A sequential value representing a relative sequence number. A classification sequence is only provided in the case where there are several auctions in the same category and contract type.\n\n! 100 document limit applies !\n\n\n\n\n\n","category":"function"},{"location":"transmission/#Parse-functions-1","page":"Transmission","title":"Parse functions","text":"","category":"section"},{"location":"transmission/#","page":"Transmission","title":"Transmission","text":"entsoeAPI.xmlParser.parse_forecasted_capacity\nentsoeAPI.xmlParser.parse_offered_capacity\nentsoeAPI.xmlParser.parse_flowbased\nentsoeAPI.xmlParser.parse_intraday_transfer_limits\nentsoeAPI.xmlParser.parse_explicit_allocation_information_capacity\nentsoeAPI.xmlParser.parse_explicit_allocation_information_revenue\nentsoeAPI.xmlParser.parse_total_capacity_nominated\nentsoeAPI.xmlParser.parse_total_capacity_already_allocated\nentsoeAPI.xmlParser.parse_day_ahead_prices\nentsoeAPI.xmlParser.parse_implicit_auction_net_positions\nentsoeAPI.xmlParser.parse_implicit_auction_congestion_income\nentsoeAPI.xmlParser.parse_total_commercial_schedules\nentsoeAPI.xmlParser.parse_physical_flows\nentsoeAPI.xmlParser.parse_capacity_allocated_outside_EU","category":"page"},{"location":"transmission/#entsoeAPI.xmlParser.parse_forecasted_capacity","page":"Transmission","title":"entsoeAPI.xmlParser.parse_forecasted_capacity","text":"parse_forecasted_capacity(xml::Vector{UInt8}, tz::TimeZone)\n\nParses the xml file generated by the function GETconstructor.query_forecasted_capacity(contract_MarketAgreementType::String, in_Domain::Union{mappings.Area, String}, out_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime). Returns the data in a dataframe.\n\n[time, capacity]\n\nArguments\n\nxml::Vector{UInt8}: xml data in the format as returned by the function GETconstructor.query_forecasted_capacity(contract_MarketAgreementType::String, in_Domain::Union{mappings.Area, String}, out_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)\ntz::TimeZone: Timezone in which the dates and times have to be represented\n\n\n\n\n\n","category":"function"},{"location":"transmission/#entsoeAPI.xmlParser.parse_offered_capacity","page":"Transmission","title":"entsoeAPI.xmlParser.parse_offered_capacity","text":"parse_offered_capacity(xml::Vector{UInt8}, tz::TimeZone)\n\nParses the xml file generated by the function GETconstructor.query_offered_capacity(auctionType::String, contract_MarketAgreementType::String, in_Domain::Union{mappings.Area, String}, out_Domain::Union{mappings.Area}, periodStart::DateTime, periodEnd::DateTime[, auctionCategory::String = \"\", update_DateAndOrTime::DateTime = DateTime(0), classificationSequence_AttributeInstanceComponentPosition::String = \"\"]). Returns the data in a dataframe.\n\n[time, capacity]\n\nArguments\n\nxml::Vector{UInt8}: xml data in the format as returned by the function GETconstructor.query_offered_capacity(auctionType::String, contract_MarketAgreementType::String, in_Domain::Union{mappings.Area, String}, out_Domain::Union{mappings.Area}, periodStart::DateTime, periodEnd::DateTime[, auctionCategory::String = \"\", update_DateAndOrTime::DateTime = DateTime(0), classificationSequence_AttributeInstanceComponentPosition::String = \"\"])\ntz::TimeZone: Timezone in which the dates and times have to be represented\n\n\n\n\n\n","category":"function"},{"location":"transmission/#entsoeAPI.xmlParser.parse_flowbased","page":"Transmission","title":"entsoeAPI.xmlParser.parse_flowbased","text":"parse_flowbased(xml::Vector{UInt8}, tz::TimeZone)\n\nParses the xml file generated by the function GETconstructor.query_flowbased(processType::String, domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime). Returns the data in dictionary.\n\n(\"time\" => [cb/co, RAM, domain, ..., domain])\n\nArguments\n\nxml::Vector{UInt8}: xml data in the format as returned by the function GETconstructor.query_flowbased(processType::String, domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)\ntz::TimeZone: Timezone in which the dates and times have to be represented\n\n\n\n\n\n","category":"function"},{"location":"transmission/#entsoeAPI.xmlParser.parse_intraday_transfer_limits","page":"Transmission","title":"entsoeAPI.xmlParser.parse_intraday_transfer_limits","text":"parse_intraday_transfer_limits(xml::Vector{UInt8}, tz::TimeZone)\n\nParses the xml file generated by the function GETconstructor.query_intraday_transfer_limits(in_Domain::Union{mappings.Area, String}, out_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime). Returns the data in a dataframe.\n\n[time, capacity]\n\nArguments\n\nxml::Vector{UInt8}: xml data in the format as returned by the function GETconstructor.query_intraday_transfer_limits(in_Domain::Union{mappings.Area, String}, out_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)\ntz::TimeZone: Timezone in which the dates and times have to be represented\n\n\n\n\n\n","category":"function"},{"location":"transmission/#entsoeAPI.xmlParser.parse_explicit_allocation_information_capacity","page":"Transmission","title":"entsoeAPI.xmlParser.parse_explicit_allocation_information_capacity","text":"parse_explicit_allocation_information_capacity(xml::Vector{UInt8}, tz::TimeZone)\n\nParses the xml file generated by the function GETconstructor.query_explicit_allocation_information_capacity(businessType::String, contract_MarketAgreementType::String, in_Domain::Union{mappings.Area, String}, out_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime[, auctionCategory::String = \"\", classificationSequence_AttributeInstanceComponentPosition::String = \"\"]). Returns the data in a dataframe.\n\n[time, capacity [, price]]\n\nArguments\n\nxml::Vector{UInt8}: xml data in the format as returned by the function GETconstructor.query_explicit_allocation_information_capacity(businessType::String, contract_MarketAgreementType::String, in_Domain::Union{mappings.Area, String}, out_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime[, auctionCategory::String = \"\", classificationSequence_AttributeInstanceComponentPosition::String = \"\"])\ntz::TimeZone: Timezone in which the dates and times have to be represented\n\n\n\n\n\n","category":"function"},{"location":"transmission/#entsoeAPI.xmlParser.parse_explicit_allocation_information_revenue","page":"Transmission","title":"entsoeAPI.xmlParser.parse_explicit_allocation_information_revenue","text":"parse_explicit_allocation_information_revenue(xml::Vector{UInt8}, tz::TimeZone)\n\nParses the xml file generated by the function GETconstructor.query_explicit_allocation_information_revenue(contract_MarketAgreementType::String, in_Domain::Union{mappings.Area, String}, out_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime) Returns the data in a dataframe.\n\n[time, price]\n\nArguments\n\nxml::Vector{UInt8}: xml data in the format as returned by the function GETconstructor.query_explicit_allocation_information_revenue(contract_MarketAgreementType::String, in_Domain::Union{mappings.Area, String}, out_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)\ntz::TimeZone: Timezone in which the dates and times have to be represented\n\n\n\n\n\n","category":"function"},{"location":"transmission/#entsoeAPI.xmlParser.parse_total_capacity_nominated","page":"Transmission","title":"entsoeAPI.xmlParser.parse_total_capacity_nominated","text":"parse_total_capacity_nominated(xml::Vector{UInt8}, tz::TimeZone)\n\nParses the xml file generated by the function GETconstructor.query_total_capacity_nominated(in_Domain::Union{mappings.Area, String}, out_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime). Returns the data in a dataframe.\n\n[time, capacity]\n\nArguments\n\n- `xml::Vector{UInt8}`: xml data in the format as returned by the function `GETconstructor.query_total_capacity_nominated(in_Domain::Union{mappings.Area, String}, out_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)`\n- `tz::TimeZone`: Timezone in which the dates and times have to be represented\n\n\n\n\n\n","category":"function"},{"location":"transmission/#entsoeAPI.xmlParser.parse_total_capacity_already_allocated","page":"Transmission","title":"entsoeAPI.xmlParser.parse_total_capacity_already_allocated","text":"parse_total_capacity_already_allocated(xml::Vector{UInt8}, tz::TimeZone)\n\nParses the xml file generated by the function GETconstructor.query_total_capacity_already_allocated(contract_MarketAgreementType::String, in_Domain::Union{mappings.Area, String}, out_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime[, auctionCategory::String = \"\"]). Returns the data in a dataframe.\n\n[time, capacity]\n\nArguments\n\nxml::Vector{UInt8}: xml data in the format as returned by the function GETconstructor.query_total_capacity_already_allocated(contract_MarketAgreementType::String, in_Domain::Union{mappings.Area, String}, out_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime[, auctionCategory::String = \"\"])\ntz::TimeZone: Timezone in which the dates and times have to be represented\n\n\n\n\n\n","category":"function"},{"location":"transmission/#entsoeAPI.xmlParser.parse_day_ahead_prices","page":"Transmission","title":"entsoeAPI.xmlParser.parse_day_ahead_prices","text":"parse_day_ahead_prices(xml::Vector{UInt8}, tz::TimeZone)\n\nParses the xml file generated by the function GETconstructor.query_day_ahead_prices(domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime). Returns the data in a dataframe.\n\n[time, capacity]\n\nArguments\n\nxml::Vector{UInt8}: xml data in the format as returned by the function GETconstructor.query_day_ahead_prices(domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)\ntz::TimeZone: Timezone in which the dates and times have to be represented\n\n\n\n\n\n","category":"function"},{"location":"transmission/#entsoeAPI.xmlParser.parse_implicit_auction_net_positions","page":"Transmission","title":"entsoeAPI.xmlParser.parse_implicit_auction_net_positions","text":"parse_implicit_auction_net_positions(xml::Vector{UInt8}, tz::TimeZone)\n\nParses the xml file generated by the function GETconstructor.query_implicit_auction_net_positions_and_congestion_income(businessType::String, contract_MarketAgreementType::String, domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime), in case the option 'net positions' is chosen. Returns the data in a dataframe.\n\n[time, import/export, capacity]\n\nArguments\n\nxml::Vector{UInt8}: xml data in the format as returned by the function GETconstructor.query_implicit_auction_net_positions_and_congestion_income(businessType::String, contract_MarketAgreementType::String, domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)\ntz::TimeZone: Timezone in which the dates and times have to be represented\n\n\n\n\n\n","category":"function"},{"location":"transmission/#entsoeAPI.xmlParser.parse_implicit_auction_congestion_income","page":"Transmission","title":"entsoeAPI.xmlParser.parse_implicit_auction_congestion_income","text":"parse_implicit_auction_congestion_income(xml::Vector{UInt8}, tz::TimeZone)\n\nParses the xml file generated by the function GETconstructor.query_implicit_auction_net_positions_and_congestion_income(businessType::String, contract_MarketAgreementType::String, domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime), in case the option 'congestion income' is chosen. Returns the data in a dataframe.\n\n[time, price]\n\nArguments\n\nxml::Vector{UInt8}: xml data in the format as returned by the function GETconstructor.query_implicit_auction_net_positions_and_congestion_income(businessType::String, contract_MarketAgreementType::String, domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)\ntz::TimeZone: Timezone in which the dates and times have to be represented\n\n\n\n\n\n","category":"function"},{"location":"transmission/#entsoeAPI.xmlParser.parse_total_commercial_schedules","page":"Transmission","title":"entsoeAPI.xmlParser.parse_total_commercial_schedules","text":"parse_total_commercial_schedules(xml::Vector{UInt8}, tz::TimeZone)\n\nParses the xml file generated by the function GETconstructor.query_total_commercial_schedules(contract_MarketAgreementType::String, in_Domain::Union{mappings.Area, String}, out_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime). Returns the data in a dataframe.\n\n[time, capacity]\n\nArguments\n\nxml::Vector{UInt8}: xml data in the format as returned by the function GETconstructor.query_total_commercial_schedules(contract_MarketAgreementType::String, in_Domain::Union{mappings.Area, String}, out_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)\ntz::TimeZone: Timezone in which the dates and times have to be represented\n\n\n\n\n\n","category":"function"},{"location":"transmission/#entsoeAPI.xmlParser.parse_physical_flows","page":"Transmission","title":"entsoeAPI.xmlParser.parse_physical_flows","text":"parse_physical_flows(xml::Vector{UInt8}, tz::TimeZone)\n\nParses the xml file generated by the function GETconstructor.query_phyiscal_flows(in_Domain::Union{mappings.Area, String}, out_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime). Returns the data in a dataframe.\n\n[time, capacity]\n\nArguments\n\nxml::Vector{UInt8}: xml data in the format as returned by the function GETconstructor.query_phyiscal_flows(in_Domain::Union{mappings.Area, String}, out_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)\ntz::TimeZone: Timezone in which the dates and times have to be represented\n\n\n\n\n\n","category":"function"},{"location":"transmission/#entsoeAPI.xmlParser.parse_capacity_allocated_outside_EU","page":"Transmission","title":"entsoeAPI.xmlParser.parse_capacity_allocated_outside_EU","text":"parse_capacity_allocated_outside_EU(xml::Vector{UInt8}, tz::TimeZone)\n\nParses the xml file generated by the function GETconstructor.query_capacity_allocated_outside_EU(auctionType::String, contract_MarketAgreementType::String, in_Domain::Union{mappings.Area, String}, out_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime[, auctionCategory::String = \"\", classificationSequence_AttributeInstanceComponentPosition::String = \"\"]). Returns the data in a dataframe.\n\n[time, capacity]\n\nArguments\n\nxml::Vector{UInt8}: xml data in the format as returned by the function GETconstructor.query_capacity_allocated_outside_EU(auctionType::String, contract_MarketAgreementType::String, in_Domain::Union{mappings.Area, String}, out_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime[, auctionCategory::String = \"\", classificationSequence_AttributeInstanceComponentPosition::String = \"\"])\ntz::TimeZone: Timezone in which the dates and times have to be represented\n\n\n\n\n\n","category":"function"},{"location":"#entsoeAPI-1","page":"Home","title":"entsoeAPI","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Julia API to retreive data from the ENTSO-E transparancy platform using the ENTSOE-E API. Documentation for the ENTSO-E can be found on https://transparency.entsoe.eu/content/static_content/Static%20content/web%20api/Guide.html","category":"page"},{"location":"#Prerequisites-1","page":"Home","title":"Prerequisites","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"Download and install the Julia API for the ENTSO-E transparency platform first using the following link\nCreate an account in the ENTSO-E transparency platform\nRequest an API key by sending an email to transparency@entsoe.eu with “Restful API access” in the subject line. In the email body state your registered email address. You will receive an email when you have been provided with the API key. The key is then visible in your ENTSO-E account under “Web API Security Token”.","category":"page"},{"location":"#Usage-1","page":"Home","title":"Usage","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"entsoeAPI.jl is the main file which contains the following functions:","category":"page"},{"location":"#","page":"Home","title":"Home","text":"function initialize_key(APIkey::String)\n\nfunction actual_total_load(outBiddingZone_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)\nfunction day_ahead_total_load(outBiddingZone_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)\nfunction week_ahead_total_load(outBiddingZone_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)\nfunction month_ahead_total_load(outBiddingZone_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)\nfunction year_ahead_total_load(outBiddingZone_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)\nfunction year_ahead_margin(outBiddingZone_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)\n\nfunction forecasted_capacity(contract_MarketAgreementType::String, in_Domain::Union{mappings.Area, String}, out_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)\nfunction offered_capacity(auctionType::String, contract_MarketAgreementType::String, in_Domain::Union{mappings.Area, String}, out_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime, auctionCategory::String = \"\", update_DateAndOrTime::DateTime = DateTime(0), classificationSequence_AttributeInstanceComponentPosition::String = \"\")\nfunction flowbased(processType::String, domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)\nfunction intraday_transfer_limits(in_Domain::Union{mappings.Area, String}, out_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)\nfunction explicit_allocation_information_capacity(businessType::String, contract_MarketAgreementType::String, in_Domain::Union{mappings.Area, String}, out_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime, auctionCategory::String = \"\", classificationSequence_AttributeInstanceComponentPosition::String = \"\")\nfunction explicit_allocation_information_revenue(contract_MarketAgreementType::String, in_Domain::Union{mappings.Area, String}, out_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)\nfunction total_capacity_nominated(in_Domain::Union{mappings.Area, String}, out_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)\nfunction total_capacity_already_allocated(contract_MarketAgreementType::String, in_Domain::Union{mappings.Area, String}, out_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime, auctionCategory::String = \"\")\nfunction day_ahead_prices(domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)\nfunction implicit_auction_net_positions(businessType::String, contract_MarketAgreementType::String, domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)\nfunction implicit_auction_congestion_income(businessType::String, contract_MarketAgreementType::String, domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)\nfunction total_commercial_schedules(contract_MarketAgreementType::String, in_Domain::Union{mappings.Area, String}, out_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)\nfunction phyiscal_flows(in_Domain::Union{mappings.Area, String}, out_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)\nfunction capacity_allocated_outside_EU(auctionType::String, contract_MarketAgreementType::String, in_Domain::Union{mappings.Area, String}, out_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime, auctionCategory::String = \"\", classificationSequence_AttributeInstanceComponentPosition::String = \"\")\n\nfunction expansion_and_dismantling(in_Domain::Union{mappings.Area, String}, out_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime, businessType::String = \"\", docStatus::String = \"\")\nfunction redispatching(in_Domain::Union{mappings.Area, String}, out_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime, businessType::String = \"\")\nfunction countertrading(in_Domain::Union{mappings.Area, String}, out_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)\nfunction congestion_costs(domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime, businessType::String = \"\")\n\nfunction installed_generation_capacity_aggregated(in_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime, psrType::String = \"\")\nfunction installed_generation_capacity_per_unit(in_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime, psrType::String = \"\")\nfunction day_ahead_aggregated_generation(in_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)\nfunction day_ahead_generation_forecasts_wind_solar(in_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime, psrType::String = \"\")\nfunction current_generation_forecasts_wind_solar(in_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime, psrType::String = \"\")\nfunction intraday_generation_forecasts_wind_solar(in_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime, psrType::String = \"\")\nfunction actual_generation_per_generation_unit(in_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime, psrType::String = \"\", registeredResource::String = \"\")\nfunction aggregated_generation_per_type(in_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime, psrType::String = \"\")\nfunction aggregated_filling_rate(in_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)\n\nfunction production_generation_units(biddingZone_Domain::Union{mappings.Area, String}, implementation_DateAndOrTime::DateTime, psrType::String = \"\")\n\nfunction current_balancing_state(area_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)\nfunction balancing_energy_bids(area_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime, processType::String)\nfunction aggregated_balancing_energy_bids(area_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime, processType::String)\nfunction procured_balancing_capacity(area_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime, type_MarketAgreementType::String = \"\")\nfunction crossZonal_balancing_capacity(acquiring_Domain::Union{mappings.Area, String}, connecting_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)\nfunction volumes_and_prices_contracted_reserves(type_MarketAgreementType::String, processType::String, controlArea_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime, psrType::String = \"\", offset::Int = 0)\nfunction volumes_contracted_reserves(type_MarketAgreementType::String, controlArea_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime, businessType::String = \"\", psrType::String = \"\", offset::Int = 0)\nfunction prices_contracted_reserves(type_MarketAgreementType::String, controlArea_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime, businessType::String = \"\", psrType::String = \"\", offset::Int = 0)\nfunction accepted_aggregated_offers(controlArea_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime, businessType::String = \"\", psrType::String = \"\")\nfunction activated_balancing_energy(controlArea_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime, businessType::String = \"\", psrType::String = \"\")\nfunction prices_activated_balancing_energy(controlArea_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime, businessType::String = \"\", psrType::String = \"\")\nfunction imbalance_prices(controlArea_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)\nfunction total_imbalance_volumes(controlArea_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)\nfunction financial_expenses(controlArea_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)\nfunction crossBorder_balancing(acquiring_Domain::Union{mappings.Area, String}, connecting_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)\nfunction FCR_total_capacity(area_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)\nfunction share_capacity_FCR(area_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)\nfunction contracted_reserve_capacity_FCR(area_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)\nfunction FRR_actual_capacity(area_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)\nfunction RR_actual_capacity(area_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)\nfunction query_sharing_of_reserves(processType::String, acquiring_Domain::Union{mappings.Area, String}, connecting_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)\nfunction balancing_border_capacity_limitations()\nfunction permanent_allocation_limitations_HVDC()\nfunction netted_and_exchanged_volumes()\n\nfunction unavailability_consumption_units(biddingZone_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime, businessType::String = \"\")\nfunction unavailability_generation_units(biddingZone_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime, businessType::String = \"\", docStatus::String = \"\", periodStartUpdate::DateTime = DateTime(0), periodEndUpdate::DateTime = DateTime(0), registeredResource::String = \"\", mRID::String = \"\", offset::Int = 0)\nfunction unavailability_production_units(biddingZone_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime, businessType::String = \"\", docStatus::String = \"\", periodStartUpdate::DateTime = DateTime(0), periodEndUpdate::DateTime = DateTime(0), registeredResource::String = \"\", mRID::String = \"\", offset::Int = 0)\nfunction unavailability_offshore_grid(biddingZone_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime, docStatus::String = \"\", periodStartUpdate::DateTime = DateTime(0), periodEndUpdate::DateTime = DateTime(0), mRID::String = \"\", offset::Int = 0)\nfunction unavailability_transmission_infrastructure(in_Domain::Union{mappings.Area, String}, out_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime, businessType::String = \"\", docStatus::String = \"\", periodStartUpdate::DateTime = DateTime(0), periodEndUpdate::DateTime = DateTime(0), mRID::String = \"\", offset::Int = 0)\nfunction fallBacks()","category":"page"},{"location":"#","page":"Home","title":"Home","text":"The initialize_key(APIkey::String) function saves your personal security token in the GETconstructor.jl file. In this way it is possbile to use the API without entering the security token everytime.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"All the other functions retreive a specific set of data from the transparancy platform. This happens in 2 steps: ","category":"page"},{"location":"#","page":"Home","title":"Home","text":"A HTTP-request is formed with the functions in the GETconstructor.jl file. This request is sent to the ENTSO-E API which returns the requested data in XML format.\nThe XML data is parsed with the functions in the XMLparser.jl file. The return format is not exactly the same for each function. But it's always a combination of dataframes and dicitionaries (The exact format can be found in the documentation per function).","category":"page"},{"location":"#Arguments-1","page":"Home","title":"Arguments","text":"","category":"section"},{"location":"#Domains-1","page":"Home","title":"Domains","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"Domains can be entered in the following formats:","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Area object as defined in mappings.jl\nEIC-code ad defined on https://www.entsoe.eu/data/energy-identification-codes-eic/eic-approved-codes/\nDisplay name as defined on https://www.entsoe.eu/data/energy-identification-codes-eic/eic-approved-codes/","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Important to know is that the list in mappings.jl isn't complete and that the domains are always evolving as well. If you want to add a missing domain to mappings.jl you have to do this as follows:","category":"page"},{"location":"#","page":"Home","title":"Home","text":"display_name = Area(\"display name\", \"EIC-code\", \"description\", TimeZone)","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Example for Belgium:","category":"page"},{"location":"#","page":"Home","title":"Home","text":"BE = Area(\"BE\", \"10YBE----------2\", \"Belgium, Elia BZ / CA / MBA\", TimeZone(\"Europe/Brussels\"))","category":"page"},{"location":"#Dates-and-Times-1","page":"Home","title":"Dates and Times","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"Dates and TImes need to be entered as a DateTime() object. The correct timezone is choosen automatically based on the entered domain. More information on the DateTime()object and the Dates packages can be found on https://docs.julialang.org/en/v1/stdlib/Dates/","category":"page"},{"location":"#Example-1","page":"Home","title":"Example","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"Hereafter an example will be discussed to clarify how to use the API. We want to get the actual load data from the Czech Republic between 31/12/2015 23:00 and 31/12/2016 23:00. First we have to initialize our personal security token:","category":"page"},{"location":"#","page":"Home","title":"Home","text":"APIkey = \"YOUR_PERSONAL_TOKEN\"\nentsoeAPI.initialize_key(APIkey)","category":"page"},{"location":"#","page":"Home","title":"Home","text":"When the token is initialized, we can try to retreive the actual data. This is done in the following way:","category":"page"},{"location":"#","page":"Home","title":"Home","text":"entsoeAPI.actual_total_load(\"10YCZ-CEPS-----N\", DateTime(2015,12,31,23,00), DateTime(2016,12,31,23,00))","category":"page"},{"location":"load/#Load-functions-1","page":"Load","title":"Load functions","text":"","category":"section"},{"location":"load/#","page":"Load","title":"Load","text":"This file describes the usage of all the functions under the load tab in the ENTSOE-E transparancy platform.","category":"page"},{"location":"load/#User-functions-1","page":"Load","title":"User functions","text":"","category":"section"},{"location":"load/#","page":"Load","title":"Load","text":"entsoeAPI.actual_total_load\nentsoeAPI.day_ahead_total_load\nentsoeAPI.week_ahead_total_load\nentsoeAPI.month_ahead_total_load\nentsoeAPI.year_ahead_total_load\nentsoeAPI.year_ahead_margin","category":"page"},{"location":"load/#entsoeAPI.actual_total_load","page":"Load","title":"entsoeAPI.actual_total_load","text":"actual_total_load(outBiddingZone_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)\n\nConstructs the HTTP request for actual total load data (article 6.1 A: https://transparency.entsoe.eu/content/static_content/Static%20content/knowledge%20base/data-views/load-domain/Data-view%20Total%20Load%20-%20Day%20Ahead%20-%20Actual.html).  Parses the received HTTP response and returns the data in a dataframe.\n\n[time, load]\n\nMinimum time interval in query response is one MTU period!\n\nArguments\n\noutBiddingZone_Domain::Union{mappings.Area, String}: Area for which the load data is needed, can be represented as an Area object or a string with country code or direct code \nperiodStart::DateTime: Start date and time of the needed data\nperiodEnd::DateTime: End date and time of the needed data \n\n! One year range limit applies !\n\n\n\n\n\n","category":"function"},{"location":"load/#entsoeAPI.day_ahead_total_load","page":"Load","title":"entsoeAPI.day_ahead_total_load","text":"day_ahead_total_load(outBiddingZone_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)\n\nConstructs the HTTP request for the data of the day ahaed total load forecast (article 6.1 B: https://transparency.entsoe.eu/content/static_content/Static%20content/knowledge%20base/data-views/load-domain/Data-view%20Total%20Load%20-%20Day%20Ahead%20-%20Actual.html).  Parses the received HTTP response and returns the data in a dataframe.\n\n[time, load]\n\nMinimum time interval in query response is one day!\n\nArguments\n\noutBiddingZone_Domain::Union{mappings.Area, String}: Area for which the load data is needed, can be represented as an Area object or a string with country code or direct code \nperiodStart::DateTime: Start date and time of the needed data\nperiodEnd::DateTime: End date and time of the needed data \n\n! One year range limit applies !\n\n\n\n\n\n","category":"function"},{"location":"load/#entsoeAPI.week_ahead_total_load","page":"Load","title":"entsoeAPI.week_ahead_total_load","text":"week_ahead_total_load(outBiddingZone_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)\n\nConstructs the HTTP request for the data of the week ahaed total load forecast (article 6.1 C: https://transparency.entsoe.eu/content/static_content/Static%20content/knowledge%20base/data-views/load-domain/Data-view%20Total%20Load%20Forecast%20-%20Week%20Ahead.html).  Parses the received HTTP response and returns the data in a dictionary.\n\n(\"min total load\" => [time, load], \"max total load\" => [time, load])\n\nMinimum time interval in query response is one week!\n\nArguments\n\noutBiddingZone_Domain::Union{mappings.Area, String}: Area for which the load data is needed, can be represented as an Area object or a string with country code or direct code \nperiodStart::DateTime: Start date and time of the needed data\nperiodEnd::DateTime: End date and time of the needed data \n\n! One year range limit applies !\n\n\n\n\n\n","category":"function"},{"location":"load/#entsoeAPI.month_ahead_total_load","page":"Load","title":"entsoeAPI.month_ahead_total_load","text":"month_ahead_total_load(outBiddingZone_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)\n\nConstructs the HTTP request for the data of the month ahaed total load forecast (article 6.1 D: https://transparency.entsoe.eu/content/static_content/Static%20content/knowledge%20base/data-views/load-domain/Data-view%20Total%20Load%20Forecast%20-%20Month%20Ahead.html).  Parses the received HTTP response and returns the data in a dictionary.\n\n(\"min total load\" => [week, load], \"max total load\" => [week, load])\n\nMinimum time interval in query response is one month!\n\nArguments\n\noutBiddingZone_Domain::Union{mappings.Area, String}: Area for which the load data is needed, can be represented as an Area object or a string with country code or direct code \nperiodStart::DateTime: Start date and time of the needed data\nperiodEnd::DateTime: End date and time of the needed data \n\n! One year range limit applies !\n\n\n\n\n\n","category":"function"},{"location":"load/#entsoeAPI.year_ahead_total_load","page":"Load","title":"entsoeAPI.year_ahead_total_load","text":"year_ahead_total_load(outBiddingZone_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)\n\nConstructs the HTTP request for the data of the year ahaed total load forecast (article 6.1 E: https://transparency.entsoe.eu/content/static_content/Static%20content/knowledge%20base/data-views/load-domain/Data-view%20Total%20Load%20Forecast%20-%20Year%20Ahead.html).  Parses the received HTTP response and returns the data in a dictionary.\n\n(\"min total load\" => [week, load], \"max total load\" => [week, load])\n\nMinimum time interval in query response is one year!\n\nArguments\n\noutBiddingZone_Domain::Union{mappings.Area, String}: Area for which the load data is needed, can be represented as an Area object or a string with country code or direct code \nperiodStart::DateTime: Start date and time of the needed data\nperiodEnd::DateTime: End date and time of the needed data \n\n! One year range limit applies !\n\n\n\n\n\n","category":"function"},{"location":"load/#entsoeAPI.year_ahead_margin","page":"Load","title":"entsoeAPI.year_ahead_margin","text":"year_ahead_margin(outBiddingZone_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)\n\nConstructs the HTTP request for the data of the year ahead forecast margin (article 8.1: https://transparency.entsoe.eu/content/static_content/Static%20content/knowledge%20base/data-views/load-domain/Data-view%20Forecast%20Margin%20-%20Year%20Ahead.html).  Parses the received HTTP response and returns the data in a dataframe.\n\n[year, margin]\n\nMinimum time interval in query response is one year!\n\nArguments\n\noutBiddingZone_Domain::Union{mappings.Area, String}: Area for which the load data is needed, can be represented as an Area object or a string with country code or direct code \nperiodStart::DateTime: Start date and time of the needed data\nperiodEnd::DateTime: End date and time of the needed data \n\n! One year range limit applies !\n\n\n\n\n\n","category":"function"},{"location":"load/#GET-functions-1","page":"Load","title":"GET functions","text":"","category":"section"},{"location":"load/#","page":"Load","title":"Load","text":"entsoeAPI.GETconstructor.query_actual_total_load\nentsoeAPI.GETconstructor.query_day_ahead_total_load\nentsoeAPI.GETconstructor.query_week_ahead_total_load\nentsoeAPI.GETconstructor.query_month_ahead_total_load\nentsoeAPI.GETconstructor.query_year_ahead_total_load\nentsoeAPI.GETconstructor.query_year_ahead_margin","category":"page"},{"location":"load/#entsoeAPI.GETconstructor.query_actual_total_load","page":"Load","title":"entsoeAPI.GETconstructor.query_actual_total_load","text":"query_actual_total_load(outBiddingZone_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)\n\nConstructs the HTTP request for actual total load data (article 6.1 A: https://transparency.entsoe.eu/content/static_content/Static%20content/knowledge%20base/data-views/load-domain/Data-view%20Total%20Load%20-%20Day%20Ahead%20-%20Actual.html).  Returns the received HTTP response, together with the used timezone. Minimum time interval in query response is one MTU period!\n\nArguments\n\noutBiddingZone_Domain::Union{mappings.Area, String}: Area for which the load data is needed, can be represented as an Area object or a string with country code or direct code \nperiodStart::DateTime: Start date and time of the needed data\nperiodEnd::DateTime: End date and time of the needed data \n\n! One year range limit applies !\n\n\n\n\n\n","category":"function"},{"location":"load/#entsoeAPI.GETconstructor.query_day_ahead_total_load","page":"Load","title":"entsoeAPI.GETconstructor.query_day_ahead_total_load","text":"query_day_ahead_total_load(outBiddingZone_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)\n\nConstructs the HTTP request for the data of the day ahaed total load forecast (article 6.1 B: https://transparency.entsoe.eu/content/static_content/Static%20content/knowledge%20base/data-views/load-domain/Data-view%20Total%20Load%20-%20Day%20Ahead%20-%20Actual.html).  Returns the received HTTP response, together with the used timezone. Minimum time interval in query response is one day!\n\nArguments\n\noutBiddingZone_Domain::Union{mappings.Area, String}: Area for which the load data is needed, can be represented as an Area object or a string with country code or direct code \nperiodStart::DateTime: Start date and time of the needed data\nperiodEnd::DateTime: End date and time of the needed data \n\n! One year range limit applies !\n\n\n\n\n\n","category":"function"},{"location":"load/#entsoeAPI.GETconstructor.query_week_ahead_total_load","page":"Load","title":"entsoeAPI.GETconstructor.query_week_ahead_total_load","text":"query_week_ahead_total_load(outBiddingZone_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)\n\nConstructs the HTTP request for the data of the week ahaed total load forecast (article 6.1 C: https://transparency.entsoe.eu/content/static_content/Static%20content/knowledge%20base/data-views/load-domain/Data-view%20Total%20Load%20Forecast%20-%20Week%20Ahead.html).  Returns the received HTTP response, together with the used timezone. Minimum time interval in query response is one week!\n\nArguments\n\noutBiddingZone_Domain::Union{mappings.Area, String}: Area for which the load data is needed, can be represented as an Area object or a string with country code or direct code \nperiodStart::DateTime: Start date and time of the needed data\nperiodEnd::DateTime: End date and time of the needed data \n\n! One year range limit applies !\n\n\n\n\n\n","category":"function"},{"location":"load/#entsoeAPI.GETconstructor.query_month_ahead_total_load","page":"Load","title":"entsoeAPI.GETconstructor.query_month_ahead_total_load","text":"query_month_ahead_total_load(outBiddingZone_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)\n\nConstructs the HTTP request for the data of the month ahaed total load forecast (article 6.1 D: https://transparency.entsoe.eu/content/static_content/Static%20content/knowledge%20base/data-views/load-domain/Data-view%20Total%20Load%20Forecast%20-%20Month%20Ahead.html).  Returns the received HTTP response, together with the used timezone. Minimum time interval in query response is one month!\n\nArguments\n\noutBiddingZone_Domain::Union{mappings.Area, String}: Area for which the load data is needed, can be represented as an Area object or a string with country code or direct code \nperiodStart::DateTime: Start date and time of the needed data\nperiodEnd::DateTime: End date and time of the needed data \n\n! One year range limit applies !\n\n\n\n\n\n","category":"function"},{"location":"load/#entsoeAPI.GETconstructor.query_year_ahead_total_load","page":"Load","title":"entsoeAPI.GETconstructor.query_year_ahead_total_load","text":"query_year_ahead_total_load(outBiddingZone_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)\n\nConstructs the HTTP request for the data of the year ahaed total load forecast (article 6.1 E: https://transparency.entsoe.eu/content/static_content/Static%20content/knowledge%20base/data-views/load-domain/Data-view%20Total%20Load%20Forecast%20-%20Year%20Ahead.html).  Returns the received HTTP response, together with the used timezone. Minimum time interval in query response is one year!\n\nArguments\n\noutBiddingZone_Domain::Union{mappings.Area, String}: Area for which the load data is needed, can be represented as an Area object or a string with country code or direct code \nperiodStart::DateTime: Start date and time of the needed data\nperiodEnd::DateTime: End date and time of the needed data \n\n! One year range limit applies !\n\n\n\n\n\n","category":"function"},{"location":"load/#entsoeAPI.GETconstructor.query_year_ahead_margin","page":"Load","title":"entsoeAPI.GETconstructor.query_year_ahead_margin","text":"query_year_ahead_margin(outBiddingZone_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)\n\nConstructs the HTTP request for the data of the year ahead forecast margin (article 8.1: https://transparency.entsoe.eu/content/static_content/Static%20content/knowledge%20base/data-views/load-domain/Data-view%20Forecast%20Margin%20-%20Year%20Ahead.html).  Returns the received HTTP response, together with the used timezone. Minimum time interval in query response is one year!\n\nArguments\n\noutBiddingZone_Domain::Union{mappings.Area, String}: Area for which the load data is needed, can be represented as an Area object or a string with country code or direct code \nperiodStart::DateTime: Start date and time of the needed data\nperiodEnd::DateTime: End date and time of the needed data \n\n! One year range limit applies !\n\n\n\n\n\n","category":"function"},{"location":"load/#Parse-functions-1","page":"Load","title":"Parse functions","text":"","category":"section"},{"location":"load/#","page":"Load","title":"Load","text":"entsoeAPI.xmlParser.parse_actual_total_load\nentsoeAPI.xmlParser.parse_day_ahead_total_load\nentsoeAPI.xmlParser.parse_week_ahead_total_load\nentsoeAPI.xmlParser.parse_month_ahead_total_load\nentsoeAPI.xmlParser.parse_year_ahead_total_load\nentsoeAPI.xmlParser.parse_year_ahead_margin","category":"page"},{"location":"load/#entsoeAPI.xmlParser.parse_actual_total_load","page":"Load","title":"entsoeAPI.xmlParser.parse_actual_total_load","text":"parse_actual_total_load(xml::Vector{UInt8}, tz::TimeZone)\n\nParses the xml file generated by the function GETconstructor.query_actual_total_load(outBiddingZone_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime). Returns the data in a dataframe.\n\n[time, load]\n\nArguments\n\nxml::Vector{UInt8}: xml data in the format as returned by the function GETconstructor.query_actual_total_load(outBiddingZone_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)\ntz::TimeZone: Timezone in which the dates and times have to be represented\n\n\n\n\n\n","category":"function"},{"location":"load/#entsoeAPI.xmlParser.parse_day_ahead_total_load","page":"Load","title":"entsoeAPI.xmlParser.parse_day_ahead_total_load","text":"parse_day_ahead_total_load(xml::Vector{UInt8}, tz::TimeZone)\n\nParses the xml file generated by the function GETconstructor.query_day_ahead_total_load(outBiddingZone_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime). Returns the data in a dataframe.\n\n[time, load]\n\nArguments\n\nxml::Vector{UInt8}: xml data in the format as returned by the function GETconstructor.query_day_ahead_total_load(outBiddingZone_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)\ntz::TimeZone: Timezone in which the dates and times have to be represented\n\n\n\n\n\n","category":"function"},{"location":"load/#entsoeAPI.xmlParser.parse_week_ahead_total_load","page":"Load","title":"entsoeAPI.xmlParser.parse_week_ahead_total_load","text":"parse_week_ahead_total_load(xml::Vector{UInt8}, tz::TimeZone)\n\nParses the xml file generated by the function GETconstructor.query_week_ahead_total_load(outBiddingZone_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime). Returns the data in a dictionary.\n\n(\"min total load\" => [time, load], \"max total load\" => [time, load])\n\nArguments\n\nxml::Vector{UInt8}: xml data in the format as returned by the function GETconstructor.query_week_ahead_total_load(outBiddingZone_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)\ntz::TimeZone: Timezone in which the dates and times have to be represented\n\n\n\n\n\n","category":"function"},{"location":"load/#entsoeAPI.xmlParser.parse_month_ahead_total_load","page":"Load","title":"entsoeAPI.xmlParser.parse_month_ahead_total_load","text":"parse_month_ahead_total_load(xml::Vector{UInt8}, tz::TimeZone)\n\nParses the xml file generated by the function GETconstructor.query_month_ahead_total_load(outBiddingZone_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime). Returns the data in a dictionary.\n\n(\"min total load\" => [week, load], \"max total load\" => [week, load])\n\nArguments\n\nxml::Vector{UInt8}: xml data in the format as returned by the function GETconstructor.query_month_ahead_total_load(outBiddingZone_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)\ntz::TimeZone: Timezone in which the dates and times have to be represented\n\n\n\n\n\n","category":"function"},{"location":"load/#entsoeAPI.xmlParser.parse_year_ahead_total_load","page":"Load","title":"entsoeAPI.xmlParser.parse_year_ahead_total_load","text":"parse_year_ahead_total_load(xml::Vector{UInt8}, tz::TimeZone)\n\nParses the xml file generated by the function GETconstructor.query_year_ahead_total_load(outBiddingZone_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime). Returns the data in a dictionary.\n\n(\"min total load\" => [week, load], \"max total load\" => [week, load])\n\nArguments\n\nxml::Vector{UInt8}: xml data in the format as returned by the function GETconstructor.query_month_ahead_total_load(outBiddingZone_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)\ntz::TimeZone: Timezone in which the dates and times have to be represented\n\n\n\n\n\n","category":"function"},{"location":"load/#entsoeAPI.xmlParser.parse_year_ahead_margin","page":"Load","title":"entsoeAPI.xmlParser.parse_year_ahead_margin","text":"parse_year_ahead_margin(xml::Vector{UInt8}, tz::TimeZone)\n\nParses the xml file generated by the function GETconstructor.query_year_ahead_margin(outBiddingZone_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime). Returns the data in dataframe.\n\n[year, margin]\n\nArguments\n\nxml::Vector{UInt8}: xml data in the format as returned by the function GETconstructor.query_year_ahead_margin(outBiddingZone_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)\ntz::TimeZone: Timezone in which the dates and times have to be represented\n\n\n\n\n\n","category":"function"}]
}
