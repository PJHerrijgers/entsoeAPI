var documenterSearchIndex = {"docs":
[{"location":"#entsoeAPI-1","page":"Home","title":"entsoeAPI","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"Julia API to retreive data from the ENTSO-E transparancy platform using the ENTSOE-E API. Documentation for the ENTSO-E can be found on https://transparency.entsoe.eu/content/static_content/Static%20content/web%20api/Guide.html","category":"page"},{"location":"#Prerequisites-1","page":"Home","title":"Prerequisites","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"Download and install the Julia API for the ENTSO-E transparency platform first using the following link\nCreate an account in the ENTSO-E transparency platform\nRequest an API key by sending an email to transparency@entsoe.eu with “Restful API access” in the subject line. In the email body state your registered email address. You will receive an email when you have been provided with the API key. The key is then visible in your ENTSO-E account under “Web API Security Token”.","category":"page"},{"location":"#Usage-1","page":"Home","title":"Usage","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"entsoeAPI.jl is the main file which contains the following functions:","category":"page"},{"location":"#","page":"Home","title":"Home","text":"function initialize_key(APIkey::String)\n\nfunction actual_total_load(outBiddingZone_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)\nfunction day_ahead_total_load(outBiddingZone_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)\nfunction week_ahead_total_load(outBiddingZone_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)\nfunction month_ahead_total_load(outBiddingZone_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)\nfunction year_ahead_total_load(outBiddingZone_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)\nfunction year_ahead_margin(outBiddingZone_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)\n\nfunction forecasted_capacity(contract_MarketAgreementType::String, in_Domain::Union{mappings.Area, String}, out_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)\nfunction offered_capacity(auctionType::String, contract_MarketAgreementType::String, in_Domain::Union{mappings.Area, String}, out_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime, auctionCategory::String = \"\", update_DateAndOrTime::DateTime = DateTime(0), classificationSequence_AttributeInstanceComponentPosition::String = \"\")\nfunction flowbased(processType::String, domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)\nfunction intraday_transfer_limits(in_Domain::Union{mappings.Area, String}, out_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)\nfunction explicit_allocation_information_capacity(businessType::String, contract_MarketAgreementType::String, in_Domain::Union{mappings.Area, String}, out_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime, auctionCategory::String = \"\", classificationSequence_AttributeInstanceComponentPosition::String = \"\")\nfunction explicit_allocation_information_revenue(contract_MarketAgreementType::String, in_Domain::Union{mappings.Area, String}, out_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)\nfunction total_capacity_nominated(in_Domain::Union{mappings.Area, String}, out_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)\nfunction total_capacity_already_allocated(contract_MarketAgreementType::String, in_Domain::Union{mappings.Area, String}, out_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime, auctionCategory::String = \"\")\nfunction day_ahead_prices(domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)\nfunction implicit_auction_net_positions(businessType::String, contract_MarketAgreementType::String, domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)\nfunction implicit_auction_congestion_income(businessType::String, contract_MarketAgreementType::String, domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)\nfunction total_commercial_schedules(contract_MarketAgreementType::String, in_Domain::Union{mappings.Area, String}, out_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)\nfunction phyiscal_flows(in_Domain::Union{mappings.Area, String}, out_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)\nfunction capacity_allocated_outside_EU(auctionType::String, contract_MarketAgreementType::String, in_Domain::Union{mappings.Area, String}, out_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime, auctionCategory::String = \"\", classificationSequence_AttributeInstanceComponentPosition::String = \"\")\n\nfunction expansion_and_dismantling(in_Domain::Union{mappings.Area, String}, out_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime, businessType::String = \"\", docStatus::String = \"\")\nfunction redispatching(in_Domain::Union{mappings.Area, String}, out_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime, businessType::String = \"\")\nfunction countertrading(in_Domain::Union{mappings.Area, String}, out_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)\nfunction congestion_costs(domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime, businessType::String = \"\")\n\nfunction installed_generation_capacity_aggregated(in_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime, psrType::String = \"\")\nfunction installed_generation_capacity_per_unit(in_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime, psrType::String = \"\")\nfunction day_ahead_aggregated_generation(in_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)\nfunction day_ahead_generation_forecasts_wind_solar(in_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime, psrType::String = \"\")\nfunction current_generation_forecasts_wind_solar(in_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime, psrType::String = \"\")\nfunction intraday_generation_forecasts_wind_solar(in_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime, psrType::String = \"\")\nfunction actual_generation_per_generation_unit(in_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime, psrType::String = \"\", registeredResource::String = \"\")\nfunction aggregated_generation_per_type(in_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime, psrType::String = \"\")\nfunction aggregated_filling_rate(in_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)\n\nfunction production_generation_units(biddingZone_Domain::Union{mappings.Area, String}, implementation_DateAndOrTime::DateTime, psrType::String = \"\")\n\nfunction current_balancing_state(area_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)\nfunction balancing_energy_bids(area_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime, processType::String)\nfunction aggregated_balancing_energy_bids(area_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime, processType::String)\nfunction procured_balancing_capacity(area_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime, type_MarketAgreementType::String = \"\")\nfunction crossZonal_balancing_capacity(acquiring_Domain::Union{mappings.Area, String}, connecting_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)\nfunction volumes_and_prices_contracted_reserves(type_MarketAgreementType::String, processType::String, controlArea_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime, psrType::String = \"\", offset::Int = 0)\nfunction volumes_contracted_reserves(type_MarketAgreementType::String, controlArea_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime, businessType::String = \"\", psrType::String = \"\", offset::Int = 0)\nfunction prices_contracted_reserves(type_MarketAgreementType::String, controlArea_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime, businessType::String = \"\", psrType::String = \"\", offset::Int = 0)\nfunction accepted_aggregated_offers(controlArea_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime, businessType::String = \"\", psrType::String = \"\")\nfunction activated_balancing_energy(controlArea_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime, businessType::String = \"\", psrType::String = \"\")\nfunction prices_activated_balancing_energy(controlArea_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime, businessType::String = \"\", psrType::String = \"\")\nfunction imbalance_prices(controlArea_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)\nfunction total_imbalance_volumes(controlArea_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)\nfunction financial_expenses(controlArea_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)\nfunction crossBorder_balancing(acquiring_Domain::Union{mappings.Area, String}, connecting_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)\nfunction FCR_total_capacity(area_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)\nfunction share_capacity_FCR(area_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)\nfunction contracted_reserve_capacity_FCR(area_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)\nfunction FRR_actual_capacity(area_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)\nfunction RR_actual_capacity(area_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)\nfunction query_sharing_of_reserves(processType::String, acquiring_Domain::Union{mappings.Area, String}, connecting_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)\nfunction balancing_border_capacity_limitations()\nfunction permanent_allocation_limitations_HVDC()\nfunction netted_and_exchanged_volumes()\n\nfunction unavailability_consumption_units(biddingZone_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime, businessType::String = \"\")\nfunction unavailability_generation_units(biddingZone_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime, businessType::String = \"\", docStatus::String = \"\", periodStartUpdate::DateTime = DateTime(0), periodEndUpdate::DateTime = DateTime(0), registeredResource::String = \"\", mRID::String = \"\", offset::Int = 0)\nfunction unavailability_production_units(biddingZone_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime, businessType::String = \"\", docStatus::String = \"\", periodStartUpdate::DateTime = DateTime(0), periodEndUpdate::DateTime = DateTime(0), registeredResource::String = \"\", mRID::String = \"\", offset::Int = 0)\nfunction unavailability_offshore_grid(biddingZone_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime, docStatus::String = \"\", periodStartUpdate::DateTime = DateTime(0), periodEndUpdate::DateTime = DateTime(0), mRID::String = \"\", offset::Int = 0)\nfunction unavailability_transmission_infrastructure(in_Domain::Union{mappings.Area, String}, out_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime, businessType::String = \"\", docStatus::String = \"\", periodStartUpdate::DateTime = DateTime(0), periodEndUpdate::DateTime = DateTime(0), mRID::String = \"\", offset::Int = 0)\nfunction fallBacks()","category":"page"},{"location":"#","page":"Home","title":"Home","text":"The initialize_key(APIkey::String) function saves your personal security token in the GETconstructor.jl file. In this way it is possbile to use the API without entering the security token everytime.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"All the other functions retreive a specific set of data from the transparancy platform. This happens in 2 steps: ","category":"page"},{"location":"#","page":"Home","title":"Home","text":"A HTTP-request is formed with the functions in the GETconstructor.jl file. This request is sent to the ENTSO-E API which returns the requested data in XML format.\nThe XML data is parsed with the functions in the XMLparser.jl file. The return format is not exactly the same for each function. But it's always a combination of dataframes and dicitionaries (The exact format can be found in the documentation per function).","category":"page"},{"location":"#Arguments-1","page":"Home","title":"Arguments","text":"","category":"section"},{"location":"#Domains-1","page":"Home","title":"Domains","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"Domains can be entered in the following formats:","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Area object as defined in mappings.jl\nEIC-code ad defined on https://www.entsoe.eu/data/energy-identification-codes-eic/eic-approved-codes/\nDisplay name as defined on https://www.entsoe.eu/data/energy-identification-codes-eic/eic-approved-codes/","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Important to know is that the list in mappings.jl isn't complete and that the domains are always evolving as well. If you want to add a missing domain to mappings.jl you have to do this as follows:","category":"page"},{"location":"#","page":"Home","title":"Home","text":"display_name = Area(\"display name\", \"EIC-code\", \"description\", TimeZone)","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Example for Belgium:","category":"page"},{"location":"#","page":"Home","title":"Home","text":"BE = Area(\"BE\", \"10YBE----------2\", \"Belgium, Elia BZ / CA / MBA\", TimeZone(\"Europe/Brussels\"))","category":"page"},{"location":"#Dates-and-Times-1","page":"Home","title":"Dates and Times","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"Dates and TImes need to be entered as a DateTime() object. The correct timezone is choosen automatically based on the entered domain. More information on the DateTime()object and the Dates packages can be found on https://docs.julialang.org/en/v1/stdlib/Dates/","category":"page"},{"location":"#Example-1","page":"Home","title":"Example","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"Hereafter an example will be discussed to clarify how to use the API. We want to get the actual load data from the Czech Republic between 31/12/2015 23:00 and 31/12/2016 23:00. First we have to initialize our personal security token:","category":"page"},{"location":"#","page":"Home","title":"Home","text":"APIkey = \"YOUR_PERSONAL_TOKEN\"\nentsoeAPI.initialize_key(APIkey)","category":"page"},{"location":"#","page":"Home","title":"Home","text":"When the token is initialized, we can try to retreive the actual data. This is done in the following way:","category":"page"},{"location":"#","page":"Home","title":"Home","text":"entsoeAPI.actual_total_load(\"10YCZ-CEPS-----N\", DateTime(2015,12,31,23,00), DateTime(2016,12,31,23,00))","category":"page"},{"location":"load/#Load-functions-1","page":"Load","title":"Load functions","text":"","category":"section"},{"location":"load/#","page":"Load","title":"Load","text":"","category":"page"},{"location":"load/#","page":"Load","title":"Load","text":"This file describes the usage of all the functions under the load tab in the ENTSOE-E transparancy platform.","category":"page"},{"location":"load/#User-functions-1","page":"Load","title":"User functions","text":"","category":"section"},{"location":"load/#","page":"Load","title":"Load","text":"actual_total_load(outBiddingZone_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)\nday_ahead_total_load(outBiddingZone_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)\nweek_ahead_total_load(outBiddingZone_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)\nmonth_ahead_total_load(outBiddingZone_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)\nyear_ahead_total_load(outBiddingZone_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)\nyear_ahead_margin(outBiddingZone_Domain::Union{mappings.Area, String}, periodStart::DateTime, periodEnd::DateTime)","category":"page"}]
}
